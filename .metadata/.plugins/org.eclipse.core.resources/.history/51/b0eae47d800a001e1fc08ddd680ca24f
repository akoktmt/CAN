#include "main.h"
#ifndef CAN_MUTIFRAME_H
#define CAN_MUTIFRAME_H
#define TIMEOUT_MS 5000
#define CAN_MAX_DATA_LENGTH 				(0x08)
#define FILL_VALUE 							(0x55)
#define MAX_BUFFER_SIZE 					128
/*-------------------------------------------*/
/** @defgroup CAN_MessType_mode 
  * @{
  */
#define ALL_NODE 							(0x00)
#define COMMAND_FRAME 						(0x01)
#define ACK_COMMAND_FRAME 					(0x02)
#define REMOTE_NOTICE_FRAME 				(0x03)
#define TEST_FRAME 							(0x04)
#define ACK_TEST_FRAME 						(0x05)
/**
  * @}
  */
/*-------------------------------------------*/
	/** @defgroup CAN_Target_mode
  * @{
  */
#define ALL_NODE 							(0x00)
#define ENGINE_CONTROL 						(0x01)
#define LIGHT_GPS 							(0x02)
#define MASTER 								(0x03)
#define STEERING 							(0x04)
#define OBSTALCE 							(0x05)
#define POWER 								(0x06)
/**
  * @}
  */
#define ALL_NODE 							(0x0000)
#define ENGINE_CONTROL 						(0x0100)
#define LIGHT_GPS 							(0x0200)
#define MASTER 								(0x0300)
#define STEERING 							(0x0400)
#define POWER 								(0x0600)
#define OBSTALCE1 							(0x0800)
#define OBSTALCE2							(0x0900)
#define OBSTALCE3							(0x0A00)
#define OBSTALCE4							(0x0B00)
#define OBSTALCE5							(0x0C00)
#define OBSTALCE6							(0x0D00)
#define OBSTALCE7							(0x0E00)
#define OBSTALCE8							(0x0F00)
/*-------------------------------------------*/
	/** @defgroup CAN_Frame_mode 
  * @{
  */
#define END_FRAME 						(0x00)
#define FIRST_FRAME 					(0x01)
#define SECOND_FRAME 					(0x02)
#define THIRD_FRAME 					(0x03)
#define FOURTH_FRAME 					(0x04)
#define FIFTH_FRAME 					(0x05)
#define SIX_FRAME 						(0x06)
#define SEVEN_FRAME 					(0X07)
/**
  * @}
  */
/*-------------------------------------------*/
 /** @defgroup CAN_Sender_mode
  * @{
  */
#define ALL_NODE 							(0x00)
#define ENGINE_CONTROL 						(0x01)
#define LIGHT_GPS 							(0x02)
#define MASTER 								(0x03)
#define STEERING 							(0x04)
#define OBSTALCE 							(0x05)
#define POWER 								(0x06)
/**
  * @}
  */
/*-------------------------------------------*/
/** @defgroup CAN_TX_Struct 
  * @{
  */
typedef struct CANHandlertypedef{
	CAN_HandleTypeDef* hcan;
	uint16_t SenderID;
	uint16_t fillterbank;
}CANHandlertypedef;
typedef struct {
	uint16_t MessageType; /*!< @ref CAN_Target_mode */
	uint16_t TargetNode; /*!< @ref CAN_Target_mode */
	uint16_t Frametype; /*!< @ref CAN_Frame_mode */
	uint16_t SenderID;
}CANConfigIDTxtypedef;
typedef struct{
	CANHandlertypedef CANHandlerInit;
	CANConfigIDTxtypedef CANconfigIDTxInit;
	CANConfigIDRxtypedef CANconfigIDRxInit;
}CANInit;
/**
  * @}
  */
/*-------------------------------------------*/
/** @defgroup CAN_RX_Struct 
  * @{
  */
typedef struct {
	uint16_t MessageType;	/*!< @ref CAN_Target_mode */
	uint16_t TargetNode; 	/*!< @ref CAN_Target_mode */
	uint16_t Frametype;		/*!< @ref CAN_Target_mode */
	uint8_t ReceivedBuffer[MAX_BUFFER_SIZE];
	uint8_t Recframe[CAN_MAX_DATA_LENGTH];
	uint8_t Index;
	uint8_t SenderID;
	uint8_t ExpectedLength;
	uint8_t frameLength;
	uint8_t isLastFrame;
}CANConfigIDRxtypedef;

/**
  * @}
  */
uint8_t CAN_Receive_Dataframe(CANConfigIDRxtypedef* pIDtype,uint8_t *ReceiveData, uint32_t *ReceiveLength);
uint8_t CAN_Send_Dataframe(CANConfigIDTxtypedef* pIDtype, uint8_t *Data, uint32_t Datalength);
uint32_t CAN_Config_filtering(CANHandlertypedef *Can, uint16_t *NodeID)
uint8_t CAN_Send_Request(uint8_t *frame);
uint16_t CAN_RECEIVE_ACK(uint8_t *Data);
#endif
