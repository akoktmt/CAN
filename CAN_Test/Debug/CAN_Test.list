
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000583c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a80  08005a80  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005a80  08005a80  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a80  08005a80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f8  20000074  08005afc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a6c  08005afc  00021a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fef  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c46  00000000  00000000  0003308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00035cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00036be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c6  00000000  00000000  000379e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001102f  00000000  00000000  000503a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed96  00000000  00000000  000613d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f016b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  000f01bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005934 	.word	0x08005934

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005934 	.word	0x08005934

08000150 <CAN_Send_Dataframe>:
#include <string.h>
#include "canframe.h"
extern CAN_HandleTypeDef hcan;
extern UART_HandleTypeDef huart1;
uint8_t CAN_Send_Dataframe(CANConfigIDTxtypedef* pIDtype, uint8_t *Data, uint32_t Datalength)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b096      	sub	sp, #88	; 0x58
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef Txheader;
/*Config Frame----------------------------------------------------------------*/	
	Txheader.DLC=8;
 800015c:	2308      	movs	r3, #8
 800015e:	62bb      	str	r3, [r7, #40]	; 0x28
	Txheader.RTR=CAN_RTR_DATA;
 8000160:	2300      	movs	r3, #0
 8000162:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.IDE=CAN_ID_STD;
 8000164:	2300      	movs	r3, #0
 8000166:	623b      	str	r3, [r7, #32]
/*Config ID-------------------------------------------------------------------*/	
	uint32_t Txmailbox;
	uint16_t ID_NUM = 0x00;
 8000168:	2300      	movs	r3, #0
 800016a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint8_t Message_ID = pIDtype->MessageType;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	889b      	ldrh	r3, [r3, #4]
 8000172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t Target_ID=pIDtype->TargetNode;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	88db      	ldrh	r3, [r3, #6]
 800017a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t Frame_type=FIRST_FRAME;
 800017e:	2301      	movs	r3, #1
 8000180:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ID_NUM |= Message_ID;
 8000184:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000188:	b29a      	uxth	r2, r3
 800018a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800018e:	4313      	orrs	r3, r2
 8000190:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	ID_NUM =(ID_NUM <<4)|Target_ID;
 8000194:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000198:	011b      	lsls	r3, r3, #4
 800019a:	b21a      	sxth	r2, r3
 800019c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80001a0:	b21b      	sxth	r3, r3
 80001a2:	4313      	orrs	r3, r2
 80001a4:	b21b      	sxth	r3, r3
 80001a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
/*Implement send data----------------------------------------------------------*/	
		uint8_t* frame = (uint8_t*)malloc(CAN_MAX_DATA_LENGTH);  
 80001aa:	2008      	movs	r0, #8
 80001ac:	f004 ff30 	bl	8005010 <malloc>
 80001b0:	4603      	mov	r3, r0
 80001b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t frameLength = 0;  
 80001b4:	2300      	movs	r3, #0
 80001b6:	653b      	str	r3, [r7, #80]	; 0x50
		uint32_t length = Datalength;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
    int isFirstFrame = 1;
 80001bc:	2301      	movs	r3, #1
 80001be:	64fb      	str	r3, [r7, #76]	; 0x4c
		int isLastFrame=0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	64bb      	str	r3, [r7, #72]	; 0x48
		uint32_t startTime = HAL_GetTick();
 80001c4:	f000 fd60 	bl	8000c88 <HAL_GetTick>
 80001c8:	6378      	str	r0, [r7, #52]	; 0x34
/*Add SenderID vs Data length at first frame-----------------------------------*/    
    for (int i = 0; i < Datalength; i++) 
 80001ca:	2300      	movs	r3, #0
 80001cc:	647b      	str	r3, [r7, #68]	; 0x44
 80001ce:	e089      	b.n	80002e4 <CAN_Send_Dataframe+0x194>
		 {
        uint8_t byte = Data[i];
 80001d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001d2:	68ba      	ldr	r2, [r7, #8]
 80001d4:	4413      	add	r3, r2
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
         if (isFirstFrame) 
 80001dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d014      	beq.n	800020c <CAN_Send_Dataframe+0xbc>
					{
            frame[frameLength] = pIDtype->SenderID;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	8959      	ldrh	r1, [r3, #10]
 80001e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80001e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80001ea:	4413      	add	r3, r2
 80001ec:	b2ca      	uxtb	r2, r1
 80001ee:	701a      	strb	r2, [r3, #0]
            frameLength++;
 80001f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80001f2:	3301      	adds	r3, #1
 80001f4:	653b      	str	r3, [r7, #80]	; 0x50
            frame[frameLength] = length;
 80001f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80001fa:	4413      	add	r3, r2
 80001fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80001fe:	b2d2      	uxtb	r2, r2
 8000200:	701a      	strb	r2, [r3, #0]
            frameLength++;
 8000202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000204:	3301      	adds	r3, #1
 8000206:	653b      	str	r3, [r7, #80]	; 0x50
            isFirstFrame = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	64fb      	str	r3, [r7, #76]	; 0x4c
					}
/*Add byte into frame data----------------------------------------------------*/
        frame[frameLength] = byte;
 800020c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800020e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000210:	4413      	add	r3, r2
 8000212:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000216:	701a      	strb	r2, [r3, #0]
        frameLength++;  
 8000218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800021a:	3301      	adds	r3, #1
 800021c:	653b      	str	r3, [r7, #80]	; 0x50
/*Check if frame data is not fill, add FILL byte until frame full 8bytes------*/				
        if (frameLength == CAN_MAX_DATA_LENGTH || i == Datalength - 1) 
 800021e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000220:	2b08      	cmp	r3, #8
 8000222:	d00d      	beq.n	8000240 <CAN_Send_Dataframe+0xf0>
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	1e5a      	subs	r2, r3, #1
 8000228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800022a:	429a      	cmp	r2, r3
 800022c:	d157      	bne.n	80002de <CAN_Send_Dataframe+0x18e>
				{  					
             while (frameLength < CAN_MAX_DATA_LENGTH)
 800022e:	e007      	b.n	8000240 <CAN_Send_Dataframe+0xf0>
							{
                frame[frameLength] = FILL_VALUE;
 8000230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000234:	4413      	add	r3, r2
 8000236:	2255      	movs	r2, #85	; 0x55
 8000238:	701a      	strb	r2, [r3, #0]
                frameLength++;
 800023a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800023c:	3301      	adds	r3, #1
 800023e:	653b      	str	r3, [r7, #80]	; 0x50
             while (frameLength < CAN_MAX_DATA_LENGTH)
 8000240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000242:	2b07      	cmp	r3, #7
 8000244:	d9f4      	bls.n	8000230 <CAN_Send_Dataframe+0xe0>
							}
/*Check last frame------------------------------------------------------*/ 
						if(i == Datalength - 1)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	1e5a      	subs	r2, r3, #1
 800024a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800024c:	429a      	cmp	r2, r3
 800024e:	d106      	bne.n	800025e <CAN_Send_Dataframe+0x10e>
							{ 
								isLastFrame=1;
 8000250:	2301      	movs	r3, #1
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
								ID_NUM=(ID_NUM <<3)|END_FRAME;
 8000254:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000258:	00db      	lsls	r3, r3, #3
 800025a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							}
						if(isLastFrame==0){
 800025e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10a      	bne.n	800027a <CAN_Send_Dataframe+0x12a>
								ID_NUM =(ID_NUM <<3)|Frame_type;
 8000264:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	b21a      	sxth	r2, r3
 800026c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000270:	b21b      	sxth	r3, r3
 8000272:	4313      	orrs	r3, r2
 8000274:	b21b      	sxth	r3, r3
 8000276:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							}
						Txheader.StdId=ID_NUM;
 800027a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800027e:	61bb      	str	r3, [r7, #24]
/*send data--------------------------------------------------------------------*/
            if(HAL_CAN_AddTxMessage(&hcan,&Txheader,frame,&Txmailbox)!=HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	f107 0118 	add.w	r1, r7, #24
 8000288:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800028a:	481d      	ldr	r0, [pc, #116]	; (8000300 <CAN_Send_Dataframe+0x1b0>)
 800028c:	f000 ff0e 	bl	80010ac <HAL_CAN_AddTxMessage>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d007      	beq.n	80002a6 <CAN_Send_Dataframe+0x156>
							{
								Error_Handler();
 8000296:	f000 fb45 	bl	8000924 <Error_Handler>
							}
/*Check if a transmission request is pending on the selected TxMailboxes------*/			
						while(HAL_CAN_IsTxMessagePending(&hcan,Txmailbox))        
 800029a:	e004      	b.n	80002a6 <CAN_Send_Dataframe+0x156>
/*Decrease data frame and set frame turn 0 again------------------------------*/							
            memset(frame, 0, CAN_MAX_DATA_LENGTH);
 800029c:	2208      	movs	r2, #8
 800029e:	2100      	movs	r1, #0
 80002a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80002a2:	f004 fed3 	bl	800504c <memset>
						while(HAL_CAN_IsTxMessagePending(&hcan,Txmailbox))        
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4815      	ldr	r0, [pc, #84]	; (8000300 <CAN_Send_Dataframe+0x1b0>)
 80002ac:	f000 ffcd 	bl	800124a <HAL_CAN_IsTxMessagePending>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1f2      	bne.n	800029c <CAN_Send_Dataframe+0x14c>
            frameLength = 0;        
 80002b6:	2300      	movs	r3, #0
 80002b8:	653b      	str	r3, [r7, #80]	; 0x50
/*add SenderID for every 1st next frame---------------------------------------*/						
            frame[0] = pIDtype->SenderID;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	895b      	ldrh	r3, [r3, #10]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002c2:	701a      	strb	r2, [r3, #0]
            frameLength++;
 80002c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002c6:	3301      	adds	r3, #1
 80002c8:	653b      	str	r3, [r7, #80]	; 0x50
						ID_NUM=ID_NUM>>3;
 80002ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80002ce:	08db      	lsrs	r3, r3, #3
 80002d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						Frame_type++;
 80002d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80002d8:	3301      	adds	r3, #1
 80002da:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    for (int i = 0; i < Datalength; i++) 
 80002de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002e0:	3301      	adds	r3, #1
 80002e2:	647b      	str	r3, [r7, #68]	; 0x44
 80002e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	f63f af71 	bhi.w	80001d0 <CAN_Send_Dataframe+0x80>
        }
			}
    free(frame);  
 80002ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80002f0:	f004 fe96 	bl	8005020 <free>
   return HAL_OK;
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	3758      	adds	r7, #88	; 0x58
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000090 	.word	0x20000090

08000304 <CAN_Receive_Dataframe>:
//        buffer[*bufferIndex] = array[i];
//        (*bufferIndex)++;
//    }
//}
uint8_t CAN_Receive_Dataframe(CANConfigIDRxtypedef* pIDtype,uint8_t *ReceiveData, uint32_t *ReceiveLength)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b092      	sub	sp, #72	; 0x48
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t frame[CAN_MAX_DATA_LENGTH] = {0};
 8000310:	2300      	movs	r3, #0
 8000312:	613b      	str	r3, [r7, #16]
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
    uint8_t isLastFrame = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t SenderId=0;
 800031e:	2300      	movs	r3, #0
 8000320:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint8_t LengthRecData=0;
 8000324:	2300      	movs	r3, #0
 8000326:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CANConfigIDRxtypedef *Rec=(uint8_t*)malloc(CAN_MAX_DATA_LENGTH);
 800032a:	2008      	movs	r0, #8
 800032c:	f004 fe70 	bl	8005010 <malloc>
 8000330:	4603      	mov	r3, r0
 8000332:	63bb      	str	r3, [r7, #56]	; 0x38
	for (int i=0; i< 13; i++)
 8000334:	2300      	movs	r3, #0
 8000336:	643b      	str	r3, [r7, #64]	; 0x40
 8000338:	e00b      	b.n	8000352 <CAN_Receive_Dataframe+0x4e>
	{
	   Rec[i].Index=0;
 800033a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800033c:	2298      	movs	r2, #152	; 0x98
 800033e:	fb02 f303 	mul.w	r3, r2, r3
 8000342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000344:	4413      	add	r3, r2
 8000346:	2200      	movs	r2, #0
 8000348:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	for (int i=0; i< 13; i++)
 800034c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800034e:	3301      	adds	r3, #1
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
 8000352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000354:	2b0c      	cmp	r3, #12
 8000356:	ddf0      	ble.n	800033a <CAN_Receive_Dataframe+0x36>
	}
	Rec->ExpectedLength=0;
 8000358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800035a:	2200      	movs	r2, #0
 800035c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	Rec->frameLength=0;
 8000360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000362:	2200      	movs	r2, #0
 8000364:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	while(!isLastFrame){
 8000368:	e0b7      	b.n	80004da <CAN_Receive_Dataframe+0x1d6>
    while (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0);
 800036a:	bf00      	nop
 800036c:	2100      	movs	r1, #0
 800036e:	4872      	ldr	r0, [pc, #456]	; (8000538 <CAN_Receive_Dataframe+0x234>)
 8000370:	f001 f8af 	bl	80014d2 <HAL_CAN_GetRxFifoFillLevel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f8      	beq.n	800036c <CAN_Receive_Dataframe+0x68>
    if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, frame) != HAL_OK)
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	f107 0218 	add.w	r2, r7, #24
 8000382:	2100      	movs	r1, #0
 8000384:	486c      	ldr	r0, [pc, #432]	; (8000538 <CAN_Receive_Dataframe+0x234>)
 8000386:	f000 ff83 	bl	8001290 <HAL_CAN_GetRxMessage>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <CAN_Receive_Dataframe+0x90>
    {
        Error_Handler();
 8000390:	f000 fac8 	bl	8000924 <Error_Handler>
    }
    SenderId=frame[0];
 8000394:	7c3b      	ldrb	r3, [r7, #16]
 8000396:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t ID_NUM = RxHeader.StdId;
 800039a:	69bb      	ldr	r3, [r7, #24]
 800039c:	86fb      	strh	r3, [r7, #54]	; 0x36
    pIDtype -> Frametype = ID_NUM & 0x07;
 800039e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003a0:	f003 0307 	and.w	r3, r3, #7
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	811a      	strh	r2, [r3, #8]
    pIDtype -> TargetNode = (ID_NUM >> 3) & 0x0F;
 80003aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003ac:	08db      	lsrs	r3, r3, #3
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	f003 030f 	and.w	r3, r3, #15
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	80da      	strh	r2, [r3, #6]
    pIDtype ->  MessageType= (ID_NUM >> 7) & 0x0F;
 80003ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003bc:	09db      	lsrs	r3, r3, #7
 80003be:	b29b      	uxth	r3, r3
 80003c0:	f003 030f 	and.w	r3, r3, #15
 80003c4:	b29a      	uxth	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	809a      	strh	r2, [r3, #4]
    if( pIDtype ->Frametype==FIRST_FRAME)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	891b      	ldrh	r3, [r3, #8]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d114      	bne.n	80003fc <CAN_Receive_Dataframe+0xf8>
    {
    	Rec[SenderId].ExpectedLength=frame[1];
 80003d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80003d6:	2298      	movs	r2, #152	; 0x98
 80003d8:	fb02 f303 	mul.w	r3, r2, r3
 80003dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003de:	4413      	add	r3, r2
 80003e0:	7c7a      	ldrb	r2, [r7, #17]
 80003e2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    	Rec[SenderId].frameLength=2;
 80003e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80003ea:	2298      	movs	r2, #152	; 0x98
 80003ec:	fb02 f303 	mul.w	r3, r2, r3
 80003f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003f2:	4413      	add	r3, r2
 80003f4:	2202      	movs	r2, #2
 80003f6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80003fa:	e060      	b.n	80004be <CAN_Receive_Dataframe+0x1ba>
    }
    else  if (pIDtype ->Frametype!=FIRST_FRAME&& pIDtype ->Frametype!=END_FRAME)
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	891b      	ldrh	r3, [r3, #8]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d00e      	beq.n	8000422 <CAN_Receive_Dataframe+0x11e>
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	891b      	ldrh	r3, [r3, #8]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d00a      	beq.n	8000422 <CAN_Receive_Dataframe+0x11e>
    {
    	Rec[SenderId].frameLength=1;
 800040c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000410:	2298      	movs	r2, #152	; 0x98
 8000412:	fb02 f303 	mul.w	r3, r2, r3
 8000416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000418:	4413      	add	r3, r2
 800041a:	2201      	movs	r2, #1
 800041c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8000420:	e010      	b.n	8000444 <CAN_Receive_Dataframe+0x140>
    }
    else if( pIDtype ->Frametype==END_FRAME)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	891b      	ldrh	r3, [r3, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d149      	bne.n	80004be <CAN_Receive_Dataframe+0x1ba>
    {
    	Rec[SenderId].frameLength=1;
 800042a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800042e:	2298      	movs	r2, #152	; 0x98
 8000430:	fb02 f303 	mul.w	r3, r2, r3
 8000434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000436:	4413      	add	r3, r2
 8000438:	2201      	movs	r2, #1
 800043a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    	isLastFrame=1;
 800043e:	2301      	movs	r3, #1
 8000440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    for(Rec[SenderId].frameLength;Rec[SenderId].frameLength<CAN_MAX_DATA_LENGTH;Rec[SenderId].frameLength++){
 8000444:	e03b      	b.n	80004be <CAN_Receive_Dataframe+0x1ba>
    	Rec[SenderId].ReceivedBuffer[Rec[SenderId].Index]=frame[Rec[SenderId].frameLength];
 8000446:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800044a:	2298      	movs	r2, #152	; 0x98
 800044c:	fb02 f303 	mul.w	r3, r2, r3
 8000450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000452:	4413      	add	r3, r2
 8000454:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8000458:	4618      	mov	r0, r3
 800045a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800045e:	2298      	movs	r2, #152	; 0x98
 8000460:	fb02 f303 	mul.w	r3, r2, r3
 8000464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000466:	4413      	add	r3, r2
 8000468:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800046c:	2198      	movs	r1, #152	; 0x98
 800046e:	fb01 f202 	mul.w	r2, r1, r2
 8000472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000474:	440a      	add	r2, r1
 8000476:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 800047a:	4611      	mov	r1, r2
 800047c:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8000480:	443a      	add	r2, r7
 8000482:	f812 2c38 	ldrb.w	r2, [r2, #-56]
 8000486:	440b      	add	r3, r1
 8000488:	729a      	strb	r2, [r3, #10]
        Rec[SenderId].Index++;
 800048a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800048e:	2298      	movs	r2, #152	; 0x98
 8000490:	fb02 f303 	mul.w	r3, r2, r3
 8000494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000496:	4413      	add	r3, r2
 8000498:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800049c:	3201      	adds	r2, #1
 800049e:	b2d2      	uxtb	r2, r2
 80004a0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
    for(Rec[SenderId].frameLength;Rec[SenderId].frameLength<CAN_MAX_DATA_LENGTH;Rec[SenderId].frameLength++){
 80004a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004a8:	2298      	movs	r2, #152	; 0x98
 80004aa:	fb02 f303 	mul.w	r3, r2, r3
 80004ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004b0:	4413      	add	r3, r2
 80004b2:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
 80004b6:	3201      	adds	r2, #1
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80004be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004c2:	2298      	movs	r2, #152	; 0x98
 80004c4:	fb02 f303 	mul.w	r3, r2, r3
 80004c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004ca:	4413      	add	r3, r2
 80004cc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80004d0:	2b07      	cmp	r3, #7
 80004d2:	d9b8      	bls.n	8000446 <CAN_Receive_Dataframe+0x142>
    	}
    LengthRecData= sizeof(Rec[SenderId].ReceivedBuffer);
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while(!isLastFrame){
 80004da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80004de:	2b00      	cmp	r3, #0
 80004e0:	f43f af43 	beq.w	800036a <CAN_Receive_Dataframe+0x66>
}
	*ReceiveLength=Rec[SenderId].ExpectedLength;
 80004e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004e8:	2298      	movs	r2, #152	; 0x98
 80004ea:	fb02 f303 	mul.w	r3, r2, r3
 80004ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004f0:	4413      	add	r3, r2
 80004f2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80004f6:	461a      	mov	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	601a      	str	r2, [r3, #0]
	memcpy(ReceiveData,Rec[SenderId].ReceivedBuffer,Rec[SenderId].ExpectedLength);
 80004fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000500:	2298      	movs	r2, #152	; 0x98
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000508:	4413      	add	r3, r2
 800050a:	f103 010a 	add.w	r1, r3, #10
 800050e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000512:	2298      	movs	r2, #152	; 0x98
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800051a:	4413      	add	r3, r2
 800051c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8000520:	461a      	mov	r2, r3
 8000522:	68b8      	ldr	r0, [r7, #8]
 8000524:	f004 fd84 	bl	8005030 <memcpy>
	free(Rec);
 8000528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800052a:	f004 fd79 	bl	8005020 <free>
	return HAL_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3748      	adds	r7, #72	; 0x48
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000090 	.word	0x20000090

0800053c <CAN_Config_filtering>:
    {
        Error_Handler();
    } 
}
void CAN_Config_filtering(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
		CAN_FilterTypeDef Can_filter_init;
		Can_filter_init.FilterActivation=	ENABLE;
 8000542:	2301      	movs	r3, #1
 8000544:	623b      	str	r3, [r7, #32]
		Can_filter_init.FilterBank=0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
		Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
		Can_filter_init.FilterIdHigh= 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
		Can_filter_init.FilterIdLow= 0x0000;
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
		Can_filter_init.FilterMaskIdHigh= 0x0000;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
		Can_filter_init.FilterMaskIdLow= 0x0000;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
		Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
		Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 8000562:	2301      	movs	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <CAN_Config_filtering+0x48>)
 800056c:	f000 fc91 	bl	8000e92 <HAL_CAN_ConfigFilter>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <CAN_Config_filtering+0x3e>
	{
		Error_Handler();
 8000576:	f000 f9d5 	bl	8000924 <Error_Handler>
	}
}
 800057a:	bf00      	nop
 800057c:	3728      	adds	r7, #40	; 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000090 	.word	0x20000090

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fb24 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f842 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8e6 	bl	8000764 <MX_GPIO_Init>
  MX_CAN_Init();
 8000598:	f000 f884 	bl	80006a4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800059c:	f000 f8b8 	bl	8000710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 80005a0:	f7ff ffcc 	bl	800053c <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <main+0x68>)
 80005a6:	f000 fd3d 	bl	8001024 <HAL_CAN_Start>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <main+0x2c>
  {
  	Error_Handler();
 80005b0:	f000 f9b8 	bl	8000924 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b4:	f002 f82e 	bl	8002614 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mCANRec */
  mCANRecHandle = osThreadNew(tCANRec, NULL, &mCANRec_attributes);
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <main+0x6c>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x70>)
 80005be:	f002 f88f 	bl	80026e0 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <main+0x74>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of mBlinkLed */
  mBlinkLedHandle = osThreadNew(tBlinkLed, NULL, &mBlinkLed_attributes);
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <main+0x78>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x7c>)
 80005ce:	f002 f887 	bl	80026e0 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <main+0x80>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of mMainTask */
  mMainTaskHandle = osThreadNew(tMainTask, NULL, &mMainTask_attributes);
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <main+0x84>)
 80005da:	2100      	movs	r1, #0
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <main+0x88>)
 80005de:	f002 f87f 	bl	80026e0 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <main+0x8c>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f002 f846 	bl	8002678 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x64>
 80005ee:	bf00      	nop
 80005f0:	20000090 	.word	0x20000090
 80005f4:	080059b4 	.word	0x080059b4
 80005f8:	080007fd 	.word	0x080007fd
 80005fc:	20000100 	.word	0x20000100
 8000600:	080059d8 	.word	0x080059d8
 8000604:	08000895 	.word	0x08000895
 8000608:	20000104 	.word	0x20000104
 800060c:	080059fc 	.word	0x080059fc
 8000610:	080008b5 	.word	0x080008b5
 8000614:	20000108 	.word	0x20000108

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b090      	sub	sp, #64	; 0x40
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2228      	movs	r2, #40	; 0x28
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fd10 	bl	800504c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000656:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f9f7 	bl	8001a54 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800066c:	f000 f95a 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc64 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000696:	f000 f945 	bl	8000924 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3740      	adds	r7, #64	; 0x40
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_CAN_Init+0x64>)
 80006aa:	4a18      	ldr	r2, [pc, #96]	; (800070c <MX_CAN_Init+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_CAN_Init+0x64>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_CAN_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_CAN_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_CAN_Init+0x64>)
 80006c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006c6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_CAN_Init+0x64>)
 80006ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ce:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_CAN_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_CAN_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_CAN_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_CAN_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_CAN_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CAN_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_CAN_Init+0x64>)
 80006f6:	f000 fad1 	bl	8000c9c <HAL_CAN_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000700:	f000 f910 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090
 800070c:	40006400 	.word	0x40006400

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART1_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000748:	f001 fd94 	bl	8002274 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8e7 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000b8 	.word	0x200000b8
 8000760:	40013800 	.word	0x40013800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_GPIO_Init+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <MX_GPIO_Init+0x90>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_GPIO_Init+0x90>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_GPIO_Init+0x90>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MX_GPIO_Init+0x90>)
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_GPIO_Init+0x90>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_GPIO_Init+0x90>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <MX_GPIO_Init+0x90>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_GPIO_Init+0x90>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_GPIO_Init+0x94>)
 80007c8:	f001 f912 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0x94>)
 80007e6:	f000 ff7f 	bl	80016e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011000 	.word	0x40011000

080007fc <tCANRec>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tCANRec */
void tCANRec(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0dc      	sub	sp, #368	; 0x170
 8000800:	af00      	add	r7, sp, #0
 8000802:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000806:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800080a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	uint8_t Receivedata[100]={0};
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000812:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000816:	2260      	movs	r2, #96	; 0x60
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fc16 	bl	800504c <memset>
	CANConfigIDRxtypedef test1;
	uint8_t rcvLen = 0;
 8000820:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000824:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	CAN_Receive_Dataframe(&test1,Receivedata,&rcvLen);
 800082c:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 8000830:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000834:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fd63 	bl	8000304 <CAN_Receive_Dataframe>
	char Print[100] = {0};
 800083e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000842:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	3304      	adds	r3, #4
 800084c:	2260      	movs	r2, #96	; 0x60
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f004 fbfb 	bl	800504c <memset>
	uint8_t len = sprintf(Print, "Node 2 Rcv: %s len %d \r\n", Receivedata, rcvLen);
 8000856:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800085a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000864:	f107 0008 	add.w	r0, r7, #8
 8000868:	4908      	ldr	r1, [pc, #32]	; (800088c <tCANRec+0x90>)
 800086a:	f004 fce3 	bl	8005234 <siprintf>
 800086e:	4603      	mov	r3, r0
 8000870:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	HAL_UART_Transmit(&huart1,(uint8_t*)Print,len,HAL_MAX_DELAY);
 8000874:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000878:	b29a      	uxth	r2, r3
 800087a:	f107 0108 	add.w	r1, r7, #8
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	4803      	ldr	r0, [pc, #12]	; (8000890 <tCANRec+0x94>)
 8000884:	f001 fd46 	bl	8002314 <HAL_UART_Transmit>
  {
 8000888:	e7d0      	b.n	800082c <tCANRec+0x30>
 800088a:	bf00      	nop
 800088c:	0800596c 	.word	0x0800596c
 8000890:	200000b8 	.word	0x200000b8

08000894 <tBlinkLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tBlinkLed */
void tBlinkLed(void *argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tBlinkLed */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <tBlinkLed+0x1c>)
 80008a2:	f001 f8bd 	bl	8001a20 <HAL_GPIO_TogglePin>
    osDelay(500);
 80008a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008aa:	f001 ffc3 	bl	8002834 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008ae:	e7f5      	b.n	800089c <tBlinkLed+0x8>
 80008b0:	40011000 	.word	0x40011000

080008b4 <tMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tMainTask */
void tMainTask(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tMainTask */

	  uint8_t sendData[24] = {0};
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
	  uint8_t len = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  uint16_t cnt = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	85fb      	strh	r3, [r7, #46]	; 0x2e

	  CANConfigIDTxtypedef test;
	  test.MessageType=ALL_NODE;
 80008da:	2300      	movs	r3, #0
 80008dc:	81bb      	strh	r3, [r7, #12]
	  test.TargetNode=ENGINE_CONTROL;
 80008de:	2301      	movs	r3, #1
 80008e0:	81fb      	strh	r3, [r7, #14]
	  test.SenderID=MASTER;
 80008e2:	2303      	movs	r3, #3
 80008e4:	827b      	strh	r3, [r7, #18]
  /* Infinite loop */
  for(;;)
  {
	  len = sprintf((char*)sendData, "From 3 to 2: %d\r\n",cnt++);
 80008e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	85fa      	strh	r2, [r7, #46]	; 0x2e
 80008ec:	461a      	mov	r2, r3
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	490b      	ldr	r1, [pc, #44]	; (8000920 <tMainTask+0x6c>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fc9d 	bl	8005234 <siprintf>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  CAN_Send_Dataframe(&test,sendData,len+1);
 8000900:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000904:	3301      	adds	r3, #1
 8000906:	461a      	mov	r2, r3
 8000908:	f107 0114 	add.w	r1, r7, #20
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fc1d 	bl	8000150 <CAN_Send_Dataframe>
	  osDelay(50);
 8000916:	2032      	movs	r0, #50	; 0x32
 8000918:	f001 ff8c 	bl	8002834 <osDelay>
  {
 800091c:	e7e3      	b.n	80008e6 <tMainTask+0x32>
 800091e:	bf00      	nop
 8000920:	08005988 	.word	0x08005988

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_MspInit+0x68>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_MspInit+0x68>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_MspInit+0x68>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_MspInit+0x68>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <HAL_MspInit+0x68>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x68>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	f06f 0001 	mvn.w	r0, #1
 800096e:	f000 fe92 	bl	8001696 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_MspInit+0x6c>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_MspInit+0x6c>)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	40010000 	.word	0x40010000

080009a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <HAL_CAN_MspInit+0x8c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d131      	bne.n	8000a24 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_CAN_MspInit+0x90>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <HAL_CAN_MspInit+0x90>)
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ca:	61d3      	str	r3, [r2, #28]
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_CAN_MspInit+0x90>)
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_CAN_MspInit+0x90>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <HAL_CAN_MspInit+0x90>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_CAN_MspInit+0x90>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4619      	mov	r1, r3
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <HAL_CAN_MspInit+0x94>)
 8000a06:	f000 fe6f 	bl	80016e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_CAN_MspInit+0x94>)
 8000a20:	f000 fe62 	bl	80016e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40006400 	.word	0x40006400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d131      	bne.n	8000abc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_UART_MspInit+0x90>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <HAL_UART_MspInit+0x90>)
 8000a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_UART_MspInit+0x90>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_UART_MspInit+0x90>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <HAL_UART_MspInit+0x90>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_UART_MspInit+0x90>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000a9e:	f000 fe23 	bl	80016e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_UART_MspInit+0x94>)
 8000ab8:	f000 fe16 	bl	80016e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010800 	.word	0x40010800

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8b1 	bl	8000c64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b02:	f003 faa3 	bl	800404c <xTaskGetSchedulerState>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d001      	beq.n	8000b10 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b0c:	f003 fffc 	bl	8004b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f004 fa3a 	bl	8004fbc <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20005000 	.word	0x20005000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	2000010c 	.word	0x2000010c
 8000b7c:	20001a70 	.word	0x20001a70

08000b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff fff8 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b92:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b94:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba8:	4c09      	ldr	r4, [pc, #36]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 fa07 	bl	8004fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fce5 	bl	8000588 <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bc8:	08005a88 	.word	0x08005a88
  ldr r2, =_sbss
 8000bcc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bd0:	20001a6c 	.word	0x20001a6c

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x28>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 fd49 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe9c 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fd53 	bl	80016ce <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 fd29 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000110 	.word	0x20000110

08000c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000110 	.word	0x20000110

08000c9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e0ed      	b.n	8000e8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fe70 	bl	80009a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd0:	f7ff ffda 	bl	8000c88 <HAL_GetTick>
 8000cd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cd6:	e012      	b.n	8000cfe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cd8:	f7ff ffd6 	bl	8000c88 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d90b      	bls.n	8000cfe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e0c5      	b.n	8000e8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0e5      	beq.n	8000cd8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0202 	bic.w	r2, r2, #2
 8000d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d1c:	f7ff ffb4 	bl	8000c88 <HAL_GetTick>
 8000d20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d22:	e012      	b.n	8000d4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d24:	f7ff ffb0 	bl	8000c88 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b0a      	cmp	r3, #10
 8000d30:	d90b      	bls.n	8000d4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2205      	movs	r2, #5
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e09f      	b.n	8000e8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e5      	bne.n	8000d24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7e1b      	ldrb	r3, [r3, #24]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d108      	bne.n	8000d72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e007      	b.n	8000d82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7e5b      	ldrb	r3, [r3, #25]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d108      	bne.n	8000d9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000daa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7e9b      	ldrb	r3, [r3, #26]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d108      	bne.n	8000dc6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0220 	orr.w	r2, r2, #32
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e007      	b.n	8000dd6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0220 	bic.w	r2, r2, #32
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7edb      	ldrb	r3, [r3, #27]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d108      	bne.n	8000df0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0210 	bic.w	r2, r2, #16
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e007      	b.n	8000e00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0210 	orr.w	r2, r2, #16
 8000dfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d108      	bne.n	8000e1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0208 	orr.w	r2, r2, #8
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e007      	b.n	8000e2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0208 	bic.w	r2, r2, #8
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7f5b      	ldrb	r3, [r3, #29]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d108      	bne.n	8000e44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0204 	orr.w	r2, r2, #4
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e007      	b.n	8000e54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0204 	bic.w	r2, r2, #4
 8000e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	ea42 0103 	orr.w	r1, r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	1e5a      	subs	r2, r3, #1
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b087      	sub	sp, #28
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000eaa:	7cfb      	ldrb	r3, [r7, #19]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d003      	beq.n	8000eb8 <HAL_CAN_ConfigFilter+0x26>
 8000eb0:	7cfb      	ldrb	r3, [r7, #19]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	f040 80aa 	bne.w	800100c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d123      	bne.n	8000f3a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	401a      	ands	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3248      	adds	r2, #72	; 0x48
 8000f1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f30:	6979      	ldr	r1, [r7, #20]
 8000f32:	3348      	adds	r3, #72	; 0x48
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d122      	bne.n	8000f88 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3248      	adds	r2, #72	; 0x48
 8000f68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f7e:	6979      	ldr	r1, [r7, #20]
 8000f80:	3348      	adds	r3, #72	; 0x48
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fa2:	e007      	b.n	8000fb4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d109      	bne.n	8000fd0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d107      	bne.n	8000ff8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ffe:	f023 0201 	bic.w	r2, r3, #1
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e006      	b.n	800101a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
  }
}
 800101a:	4618      	mov	r0, r3
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12e      	bne.n	8001096 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001050:	f7ff fe1a 	bl	8000c88 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001056:	e012      	b.n	800107e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001058:	f7ff fe16 	bl	8000c88 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d90b      	bls.n	800107e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e012      	b.n	80010a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e5      	bne.n	8001058 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e006      	b.n	80010a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
  }
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <HAL_CAN_AddTxMessage+0x2c>
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	f040 80ad 	bne.w	8001232 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10a      	bne.n	80010f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8095 	beq.w	8001222 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	0e1b      	lsrs	r3, r3, #24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10d      	bne.n	8001130 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800111e:	68f9      	ldr	r1, [r7, #12]
 8001120:	6809      	ldr	r1, [r1, #0]
 8001122:	431a      	orrs	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3318      	adds	r3, #24
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	440b      	add	r3, r1
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e00f      	b.n	8001150 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800113a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001144:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3318      	adds	r3, #24
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	440b      	add	r3, r1
 800114e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3318      	adds	r3, #24
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	440b      	add	r3, r1
 8001160:	3304      	adds	r3, #4
 8001162:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	7d1b      	ldrb	r3, [r3, #20]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d111      	bne.n	8001190 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3318      	adds	r3, #24
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	6811      	ldr	r1, [r2, #0]
 8001180:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3318      	adds	r3, #24
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	440b      	add	r3, r1
 800118c:	3304      	adds	r3, #4
 800118e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3307      	adds	r3, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	061a      	lsls	r2, r3, #24
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3306      	adds	r3, #6
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3305      	adds	r3, #5
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	4313      	orrs	r3, r2
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	3204      	adds	r2, #4
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	4610      	mov	r0, r2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6811      	ldr	r1, [r2, #0]
 80011b8:	ea43 0200 	orr.w	r2, r3, r0
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	440b      	add	r3, r1
 80011c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3303      	adds	r3, #3
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	061a      	lsls	r2, r3, #24
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3302      	adds	r3, #2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	041b      	lsls	r3, r3, #16
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	4313      	orrs	r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	7812      	ldrb	r2, [r2, #0]
 80011e8:	4610      	mov	r0, r2
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	6811      	ldr	r1, [r2, #0]
 80011ee:	ea43 0200 	orr.w	r2, r3, r0
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	440b      	add	r3, r1
 80011f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3318      	adds	r3, #24
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	6811      	ldr	r1, [r2, #0]
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3318      	adds	r3, #24
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	440b      	add	r3, r1
 800121c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e00e      	b.n	8001240 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e006      	b.n	8001240 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
  }
}
 8001240:	4618      	mov	r0, r3
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d002      	beq.n	800126c <HAL_CAN_IsTxMessagePending+0x22>
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d10b      	bne.n	8001284 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	069b      	lsls	r3, r3, #26
 8001276:	401a      	ands	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	069b      	lsls	r3, r3, #26
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001280:	2301      	movs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001284:	68fb      	ldr	r3, [r7, #12]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d003      	beq.n	80012b4 <HAL_CAN_GetRxMessage+0x24>
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	f040 8103 	bne.w	80014ba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10e      	bne.n	80012d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d116      	bne.n	80012f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0f7      	b.n	80014c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d107      	bne.n	80012f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0e8      	b.n	80014c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	331b      	adds	r3, #27
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0204 	and.w	r2, r3, #4
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10c      	bne.n	800132e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	331b      	adds	r3, #27
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	4413      	add	r3, r2
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0d5b      	lsrs	r3, r3, #21
 8001324:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e00b      	b.n	8001346 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	331b      	adds	r3, #27
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	331b      	adds	r3, #27
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0202 	and.w	r2, r3, #2
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	331b      	adds	r3, #27
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	3304      	adds	r3, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2208      	movs	r2, #8
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	e00b      	b.n	8001394 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	331b      	adds	r3, #27
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	3304      	adds	r3, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 020f 	and.w	r2, r3, #15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	331b      	adds	r3, #27
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	3304      	adds	r3, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	331b      	adds	r3, #27
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	3304      	adds	r3, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0a1a      	lsrs	r2, r3, #8
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0c1a      	lsrs	r2, r3, #16
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3302      	adds	r3, #2
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	0e1a      	lsrs	r2, r3, #24
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3303      	adds	r3, #3
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3304      	adds	r3, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0a1a      	lsrs	r2, r3, #8
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3305      	adds	r3, #5
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0c1a      	lsrs	r2, r3, #16
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3306      	adds	r3, #6
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0e1a      	lsrs	r2, r3, #24
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3307      	adds	r3, #7
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d108      	bne.n	80014a6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0220 	orr.w	r2, r2, #32
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	e007      	b.n	80014b6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e006      	b.n	80014c8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
  }
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d002      	beq.n	80014f4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d10f      	bne.n	8001514 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e005      	b.n	8001514 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff90 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff49 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff5e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff90 	bl	80015d8 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5f 	bl	8001584 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffb0 	bl	800163c <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b08b      	sub	sp, #44	; 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e169      	b.n	80019d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016fc:	2201      	movs	r2, #1
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8158 	bne.w	80019ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a9a      	ldr	r2, [pc, #616]	; (8001988 <HAL_GPIO_Init+0x2a0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d05e      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001724:	4a98      	ldr	r2, [pc, #608]	; (8001988 <HAL_GPIO_Init+0x2a0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d875      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800172a:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_GPIO_Init+0x2a4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d058      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001730:	4a96      	ldr	r2, [pc, #600]	; (800198c <HAL_GPIO_Init+0x2a4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d86f      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001736:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_GPIO_Init+0x2a8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d052      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 800173c:	4a94      	ldr	r2, [pc, #592]	; (8001990 <HAL_GPIO_Init+0x2a8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d869      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001742:	4a94      	ldr	r2, [pc, #592]	; (8001994 <HAL_GPIO_Init+0x2ac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d04c      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001748:	4a92      	ldr	r2, [pc, #584]	; (8001994 <HAL_GPIO_Init+0x2ac>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d863      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800174e:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_GPIO_Init+0x2b0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d046      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001754:	4a90      	ldr	r2, [pc, #576]	; (8001998 <HAL_GPIO_Init+0x2b0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d85d      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800175a:	2b12      	cmp	r3, #18
 800175c:	d82a      	bhi.n	80017b4 <HAL_GPIO_Init+0xcc>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d859      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HAL_GPIO_Init+0x80>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	080017e3 	.word	0x080017e3
 800176c:	080017bd 	.word	0x080017bd
 8001770:	080017cf 	.word	0x080017cf
 8001774:	08001811 	.word	0x08001811
 8001778:	08001817 	.word	0x08001817
 800177c:	08001817 	.word	0x08001817
 8001780:	08001817 	.word	0x08001817
 8001784:	08001817 	.word	0x08001817
 8001788:	08001817 	.word	0x08001817
 800178c:	08001817 	.word	0x08001817
 8001790:	08001817 	.word	0x08001817
 8001794:	08001817 	.word	0x08001817
 8001798:	08001817 	.word	0x08001817
 800179c:	08001817 	.word	0x08001817
 80017a0:	08001817 	.word	0x08001817
 80017a4:	08001817 	.word	0x08001817
 80017a8:	08001817 	.word	0x08001817
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017d9 	.word	0x080017d9
 80017b4:	4a79      	ldr	r2, [pc, #484]	; (800199c <HAL_GPIO_Init+0x2b4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ba:	e02c      	b.n	8001816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e029      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	3304      	adds	r3, #4
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e024      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	3308      	adds	r3, #8
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e01f      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	330c      	adds	r3, #12
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e01a      	b.n	8001818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ea:	2304      	movs	r3, #4
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e013      	b.n	8001818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	611a      	str	r2, [r3, #16]
          break;
 8001802:	e009      	b.n	8001818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	615a      	str	r2, [r3, #20]
          break;
 800180e:	e003      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x130>
          break;
 8001816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d801      	bhi.n	8001822 <HAL_GPIO_Init+0x13a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	e001      	b.n	8001826 <HAL_GPIO_Init+0x13e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d802      	bhi.n	8001834 <HAL_GPIO_Init+0x14c>
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x152>
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	3b08      	subs	r3, #8
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	210f      	movs	r1, #15
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	6a39      	ldr	r1, [r7, #32]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80b1 	beq.w	80019ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2bc>)
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a40      	ldr	r2, [pc, #256]	; (80019a8 <HAL_GPIO_Init+0x2c0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1ec>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3f      	ldr	r2, [pc, #252]	; (80019ac <HAL_GPIO_Init+0x2c4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1e8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3e      	ldr	r2, [pc, #248]	; (80019b0 <HAL_GPIO_Init+0x2c8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1e4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3d      	ldr	r2, [pc, #244]	; (80019b4 <HAL_GPIO_Init+0x2cc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1e0>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018d4:	2300      	movs	r3, #0
 80018d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e6:	492f      	ldr	r1, [pc, #188]	; (80019a4 <HAL_GPIO_Init+0x2bc>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	492c      	ldr	r1, [pc, #176]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4928      	ldr	r1, [pc, #160]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4922      	ldr	r1, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	491e      	ldr	r1, [pc, #120]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4918      	ldr	r1, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	4914      	ldr	r1, [pc, #80]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001968:	4013      	ands	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d021      	beq.n	80019bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	490e      	ldr	r1, [pc, #56]	; (80019b8 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e021      	b.n	80019ca <HAL_GPIO_Init+0x2e2>
 8001986:	bf00      	nop
 8001988:	10320000 	.word	0x10320000
 800198c:	10310000 	.word	0x10310000
 8001990:	10220000 	.word	0x10220000
 8001994:	10210000 	.word	0x10210000
 8001998:	10120000 	.word	0x10120000
 800199c:	10110000 	.word	0x10110000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40010800 	.word	0x40010800
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40011400 	.word	0x40011400
 80019b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_GPIO_Init+0x304>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <HAL_GPIO_Init+0x304>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f ae8e 	bne.w	80016fc <HAL_GPIO_Init+0x14>
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	372c      	adds	r7, #44	; 0x2c
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a00:	787b      	ldrb	r3, [r7, #1]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4013      	ands	r3, r2
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43d9      	mvns	r1, r3
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	400b      	ands	r3, r1
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	611a      	str	r2, [r3, #16]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e272      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8087 	beq.w	8001b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d00c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a80:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d112      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5e>
 8001a8c:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d10b      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d06c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x12c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d168      	bne.n	8001b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e24c      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x76>
 8001abc:	4b80      	ldr	r3, [pc, #512]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7f      	ldr	r2, [pc, #508]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e02e      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4b7b      	ldr	r3, [pc, #492]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7a      	ldr	r2, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0xbc>
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a71      	ldr	r2, [pc, #452]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001b10:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a6a      	ldr	r2, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a67      	ldr	r2, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f8aa 	bl	8000c88 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff f8a6 	bl	8000c88 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e200      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0xe4>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f896 	bl	8000c88 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff f892 	bl	8000c88 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1ec      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x10c>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x18c>
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x176>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1c0      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4939      	ldr	r1, [pc, #228]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff f84b 	bl	8000c88 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f847 	bl	8000c88 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1a1      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4927      	ldr	r1, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f82a 	bl	8000c88 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff f826 	bl	8000c88 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e180      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d03a      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d019      	beq.n	8001c9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff f80a 	bl	8000c88 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff f806 	bl	8000c88 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e160      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 face 	bl	8002238 <RCC_Delay>
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7fe fff0 	bl	8000c88 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	e00f      	b.n	8001ccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7fe ffec 	bl	8000c88 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d908      	bls.n	8001ccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e146      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	42420000 	.word	0x42420000
 8001cc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	4b92      	ldr	r3, [pc, #584]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e9      	bne.n	8001cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80a6 	beq.w	8001e32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a87      	ldr	r2, [pc, #540]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b85      	ldr	r3, [pc, #532]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d118      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7e      	ldr	r2, [pc, #504]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe ffad 	bl	8000c88 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	f7fe ffa9 	bl	8000c88 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e103      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x4c8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x312>
 8001d58:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	e02d      	b.n	8001dc2 <HAL_RCC_OscConfig+0x36e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x334>
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a69      	ldr	r2, [pc, #420]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a66      	ldr	r2, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	e01c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x36e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d10c      	bne.n	8001daa <HAL_RCC_OscConfig+0x356>
 8001d90:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e00b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x36e>
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a5a      	ldr	r2, [pc, #360]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d015      	beq.n	8001df6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7fe ff5d 	bl	8000c88 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7fe ff59 	bl	8000c88 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0b1      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ee      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x37e>
 8001df4:	e014      	b.n	8001e20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7fe ff47 	bl	8000c88 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe ff43 	bl	8000c88 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e09b      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ee      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a3b      	ldr	r2, [pc, #236]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e3c:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d061      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d146      	bne.n	8001ede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7fe ff17 	bl	8000c88 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe ff13 	bl	8000c88 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e06d      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d108      	bne.n	8001e98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4921      	ldr	r1, [pc, #132]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a19      	ldr	r1, [r3, #32]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	491b      	ldr	r1, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fee7 	bl	8000c88 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7fe fee3 	bl	8000c88 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e03d      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46a>
 8001edc:	e035      	b.n	8001f4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fed0 	bl	8000c88 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe fecc 	bl	8000c88 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e026      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x498>
 8001f0a:	e01e      	b.n	8001f4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e019      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x500>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d0      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d910      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4965      	ldr	r1, [pc, #404]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0b8      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	494d      	ldr	r1, [pc, #308]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d040      	beq.n	8002078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d115      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e073      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06b      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4936      	ldr	r1, [pc, #216]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7fe fe1e 	bl	8000c88 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7fe fe1a 	bl	8000c88 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e053      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d210      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 0207 	bic.w	r2, r3, #7
 800208e:	4922      	ldr	r1, [pc, #136]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e032      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4916      	ldr	r1, [pc, #88]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490e      	ldr	r1, [pc, #56]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 f821 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1cc>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1d0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fd7c 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
 8002120:	08005a20 	.word	0x08005a20
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d002      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x30>
 8002156:	2b08      	cmp	r3, #8
 8002158:	d003      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x36>
 800215a:	e027      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	613b      	str	r3, [r7, #16]
      break;
 8002160:	e027      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800216c:	5cd3      	ldrb	r3, [r2, r3]
 800216e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	0c5b      	lsrs	r3, r3, #17
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800218e:	fb03 f202 	mul.w	r2, r3, r2
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	fbb2 f3f3 	udiv	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e004      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	613b      	str	r3, [r7, #16]
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ae:	613b      	str	r3, [r7, #16]
      break;
 80021b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b2:	693b      	ldr	r3, [r7, #16]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	007a1200 	.word	0x007a1200
 80021c8:	08005a38 	.word	0x08005a38
 80021cc:	08005a48 	.word	0x08005a48
 80021d0:	003d0900 	.word	0x003d0900

080021d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000000 	.word	0x20000000

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ec:	f7ff fff2 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08005a30 	.word	0x08005a30

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002214:	f7ff ffde 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0adb      	lsrs	r3, r3, #11
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08005a30 	.word	0x08005a30

08002238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <RCC_Delay+0x34>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <RCC_Delay+0x38>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0a5b      	lsrs	r3, r3, #9
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002254:	bf00      	nop
  }
  while (Delay --);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	60fa      	str	r2, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <RCC_Delay+0x1c>
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000000 	.word	0x20000000
 8002270:	10624dd3 	.word	0x10624dd3

08002274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e042      	b.n	800230c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fbcc 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	; 0x24
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f91d 	bl	80024f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b20      	cmp	r3, #32
 8002332:	d16d      	bne.n	8002410 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_UART_Transmit+0x2c>
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e066      	b.n	8002412 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2221      	movs	r2, #33	; 0x21
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002352:	f7fe fc99 	bl	8000c88 <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236c:	d108      	bne.n	8002380 <HAL_UART_Transmit+0x6c>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e003      	b.n	8002388 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002388:	e02a      	b.n	80023e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f840 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e036      	b.n	8002412 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	3302      	adds	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e007      	b.n	80023d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1cf      	bne.n	800238a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f810 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b090      	sub	sp, #64	; 0x40
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	e050      	b.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d04c      	beq.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <UART_WaitOnFlagUntilTimeout+0x30>
 800243a:	f7fe fc25 	bl	8000c88 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002446:	429a      	cmp	r2, r3
 8002448:	d241      	bcs.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800246a:	637a      	str	r2, [r7, #52]	; 0x34
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002472:	e841 2300 	strex	r3, r2, [r1]
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e5      	bne.n	800244a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3314      	adds	r3, #20
 8002484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	e853 3f00 	ldrex	r3, [r3]
 800248c:	613b      	str	r3, [r7, #16]
   return(result);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	63bb      	str	r3, [r7, #56]	; 0x38
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3314      	adds	r3, #20
 800249c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800249e:	623a      	str	r2, [r7, #32]
 80024a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a2:	69f9      	ldr	r1, [r7, #28]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	e841 2300 	strex	r3, r2, [r1]
 80024aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1e5      	bne.n	800247e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e00f      	b.n	80024ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	429a      	cmp	r2, r3
 80024dc:	bf0c      	ite	eq
 80024de:	2301      	moveq	r3, #1
 80024e0:	2300      	movne	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d09f      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3740      	adds	r7, #64	; 0x40
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002532:	f023 030c 	bic.w	r3, r3, #12
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	430b      	orrs	r3, r1
 800253e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2c      	ldr	r2, [pc, #176]	; (800260c <UART_SetConfig+0x114>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d103      	bne.n	8002568 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002560:	f7ff fe56 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	e002      	b.n	800256e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002568:	f7ff fe3e 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 800256c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <UART_SetConfig+0x118>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	0119      	lsls	r1, r3, #4
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	009a      	lsls	r2, r3, #2
 8002598:	441a      	add	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <UART_SetConfig+0x118>)
 80025a6:	fba3 0302 	umull	r0, r3, r3, r2
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2064      	movs	r0, #100	; 0x64
 80025ae:	fb00 f303 	mul.w	r3, r0, r3
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	3332      	adds	r3, #50	; 0x32
 80025b8:	4a15      	ldr	r2, [pc, #84]	; (8002610 <UART_SetConfig+0x118>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c4:	4419      	add	r1, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009a      	lsls	r2, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <UART_SetConfig+0x118>)
 80025de:	fba3 0302 	umull	r0, r3, r3, r2
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2064      	movs	r0, #100	; 0x64
 80025e6:	fb00 f303 	mul.w	r3, r0, r3
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	3332      	adds	r3, #50	; 0x32
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <UART_SetConfig+0x118>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	440a      	add	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40013800 	.word	0x40013800
 8002610:	51eb851f 	.word	0x51eb851f

08002614 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800261a:	f3ef 8305 	mrs	r3, IPSR
 800261e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002620:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10f      	bne.n	8002646 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002626:	f3ef 8310 	mrs	r3, PRIMASK
 800262a:	607b      	str	r3, [r7, #4]
  return(result);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <osKernelInitialize+0x32>
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <osKernelInitialize+0x60>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d109      	bne.n	800264e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800263a:	f3ef 8311 	mrs	r3, BASEPRI
 800263e:	603b      	str	r3, [r7, #0]
  return(result);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002646:	f06f 0305 	mvn.w	r3, #5
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e00c      	b.n	8002668 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <osKernelInitialize+0x60>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <osKernelInitialize+0x60>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e002      	b.n	8002668 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000114 	.word	0x20000114

08002678 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800267e:	f3ef 8305 	mrs	r3, IPSR
 8002682:	60bb      	str	r3, [r7, #8]
  return(result);
 8002684:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268a:	f3ef 8310 	mrs	r3, PRIMASK
 800268e:	607b      	str	r3, [r7, #4]
  return(result);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <osKernelStart+0x32>
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <osKernelStart+0x64>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d109      	bne.n	80026b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800269e:	f3ef 8311 	mrs	r3, BASEPRI
 80026a2:	603b      	str	r3, [r7, #0]
  return(result);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80026aa:	f06f 0305 	mvn.w	r3, #5
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e00e      	b.n	80026d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <osKernelStart+0x64>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <osKernelStart+0x64>)
 80026bc:	2202      	movs	r2, #2
 80026be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80026c0:	f001 f878 	bl	80037b4 <vTaskStartScheduler>
      stat = osOK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e002      	b.n	80026d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026d0:	68fb      	ldr	r3, [r7, #12]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000114 	.word	0x20000114

080026e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b092      	sub	sp, #72	; 0x48
 80026e4:	af04      	add	r7, sp, #16
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026f0:	f3ef 8305 	mrs	r3, IPSR
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 8094 	bne.w	8002826 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002702:	623b      	str	r3, [r7, #32]
  return(result);
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 808d 	bne.w	8002826 <osThreadNew+0x146>
 800270c:	4b48      	ldr	r3, [pc, #288]	; (8002830 <osThreadNew+0x150>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d106      	bne.n	8002722 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002714:	f3ef 8311 	mrs	r3, BASEPRI
 8002718:	61fb      	str	r3, [r7, #28]
  return(result);
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 8082 	bne.w	8002826 <osThreadNew+0x146>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d07e      	beq.n	8002826 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800272c:	2318      	movs	r3, #24
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002730:	2300      	movs	r3, #0
 8002732:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002734:	f107 031b 	add.w	r3, r7, #27
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d045      	beq.n	80027d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <osThreadNew+0x74>
        name = attr->name;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <osThreadNew+0x9a>
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	2b38      	cmp	r3, #56	; 0x38
 800276c:	d805      	bhi.n	800277a <osThreadNew+0x9a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <osThreadNew+0x9e>
        return (NULL);
 800277a:	2300      	movs	r3, #0
 800277c:	e054      	b.n	8002828 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <osThreadNew+0xd4>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b5b      	cmp	r3, #91	; 0x5b
 800279c:	d90a      	bls.n	80027b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <osThreadNew+0xd4>
        mem = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b2:	e010      	b.n	80027d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10c      	bne.n	80027d6 <osThreadNew+0xf6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <osThreadNew+0xf6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <osThreadNew+0xf6>
          mem = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d0:	e001      	b.n	80027d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d110      	bne.n	80027fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027e4:	9202      	str	r2, [sp, #8]
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fe12 	bl	800341c <xTaskCreateStatic>
 80027f8:	4603      	mov	r3, r0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e013      	b.n	8002826 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d110      	bne.n	8002826 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	b29a      	uxth	r2, r3
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fe5c 	bl	80034d4 <xTaskCreate>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <osThreadNew+0x146>
          hTask = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002826:	697b      	ldr	r3, [r7, #20]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3738      	adds	r7, #56	; 0x38
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000114 	.word	0x20000114

08002834 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800283c:	f3ef 8305 	mrs	r3, IPSR
 8002840:	613b      	str	r3, [r7, #16]
  return(result);
 8002842:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10f      	bne.n	8002868 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002848:	f3ef 8310 	mrs	r3, PRIMASK
 800284c:	60fb      	str	r3, [r7, #12]
  return(result);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <osDelay+0x34>
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <osDelay+0x58>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d109      	bne.n	8002870 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800285c:	f3ef 8311 	mrs	r3, BASEPRI
 8002860:	60bb      	str	r3, [r7, #8]
  return(result);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <osDelay+0x3c>
    stat = osErrorISR;
 8002868:	f06f 0305 	mvn.w	r3, #5
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e007      	b.n	8002880 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <osDelay+0x4c>
      vTaskDelay(ticks);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 ff66 	bl	800374c <vTaskDelay>
    }
  }

  return (stat);
 8002880:	697b      	ldr	r3, [r7, #20]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000114 	.word	0x20000114

08002890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <vApplicationGetIdleTaskMemory+0x28>)
 80028a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <vApplicationGetIdleTaskMemory+0x2c>)
 80028a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	601a      	str	r2, [r3, #0]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000118 	.word	0x20000118
 80028bc:	20000174 	.word	0x20000174

080028c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a07      	ldr	r2, [pc, #28]	; (80028ec <vApplicationGetTimerTaskMemory+0x2c>)
 80028d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <vApplicationGetTimerTaskMemory+0x30>)
 80028d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000374 	.word	0x20000374
 80028f0:	200003d0 	.word	0x200003d0

080028f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0208 	add.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 0208 	add.w	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f103 0208 	add.w	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d103      	bne.n	80029b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e00c      	b.n	80029ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3308      	adds	r3, #8
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e002      	b.n	80029be <vListInsert+0x2e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d2f6      	bcs.n	80029b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6852      	ldr	r2, [r2, #4]
 8002a20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d103      	bne.n	8002a34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
	...

08002a54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a7e:	f001 ffc5 	bl	8004a0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	68f9      	ldr	r1, [r7, #12]
 8002a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	441a      	add	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	441a      	add	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01a      	beq.n	8002b12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3310      	adds	r3, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 f8f1 	bl	8003cc8 <xTaskRemoveFromEventList>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <xQueueGenericReset+0xcc>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	e009      	b.n	8002b12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3310      	adds	r3, #16
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fef6 	bl	80028f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3324      	adds	r3, #36	; 0x24
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fef1 	bl	80028f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b12:	f001 ffab 	bl	8004a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	e000ed04 	.word	0xe000ed04

08002b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <xQueueGenericCreateStatic+0x52>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <xQueueGenericCreateStatic+0x56>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueGenericCreateStatic+0x58>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	623b      	str	r3, [r7, #32]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <xQueueGenericCreateStatic+0x7e>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGenericCreateStatic+0x82>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericCreateStatic+0x84>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61fb      	str	r3, [r7, #28]
}
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bc2:	2350      	movs	r3, #80	; 0x50
 8002bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b50      	cmp	r3, #80	; 0x50
 8002bca:	d00a      	beq.n	8002be2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	61bb      	str	r3, [r7, #24]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bf4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f805 	bl	8002c12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3730      	adds	r7, #48	; 0x30
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e002      	b.n	8002c34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c40:	2101      	movs	r1, #1
 8002c42:	69b8      	ldr	r0, [r7, #24]
 8002c44:	f7ff ff06 	bl	8002a54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c66:	2300      	movs	r3, #0
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGenericSend+0x32>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <xQueueGenericSend+0x40>
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <xQueueGenericSend+0x44>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <xQueueGenericSend+0x46>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <xQueueGenericSend+0x60>
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d103      	bne.n	8002cc6 <xQueueGenericSend+0x6e>
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <xQueueGenericSend+0x72>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueGenericSend+0x74>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	623b      	str	r3, [r7, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ce6:	f001 f9b1 	bl	800404c <xTaskGetSchedulerState>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <xQueueGenericSend+0x9e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <xQueueGenericSend+0xa2>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <xQueueGenericSend+0xa4>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	61fb      	str	r3, [r7, #28]
}
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d16:	f001 fe79 	bl	8004a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <xQueueGenericSend+0xd4>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d129      	bne.n	8002d80 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d32:	f000 fa07 	bl	8003144 <prvCopyDataToQueue>
 8002d36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	3324      	adds	r3, #36	; 0x24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 ffbf 	bl	8003cc8 <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d50:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <xQueueGenericSend+0x1f8>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	e00a      	b.n	8002d78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <xQueueGenericSend+0x1f8>)
 8002d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d78:	f001 fe78 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e063      	b.n	8002e48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d86:	f001 fe71 	bl	8004a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e05c      	b.n	8002e48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fff9 	bl	8003d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002da2:	f001 fe63 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da6:	f000 fd6b 	bl	8003880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002daa:	f001 fe2f 	bl	8004a0c <vPortEnterCritical>
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d103      	bne.n	8002dc4 <xQueueGenericSend+0x16c>
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d103      	bne.n	8002dda <xQueueGenericSend+0x182>
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dda:	f001 fe47 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dde:	1d3a      	adds	r2, r7, #4
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 ffe8 	bl	8003dbc <xTaskCheckForTimeOut>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d124      	bne.n	8002e3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df4:	f000 fa9e 	bl	8003334 <prvIsQueueFull>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	3310      	adds	r3, #16
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 ff0e 	bl	8003c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e0e:	f000 fa29 	bl	8003264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e12:	f000 fd43 	bl	800389c <xTaskResumeAll>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f af7c 	bne.w	8002d16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <xQueueGenericSend+0x1f8>)
 8002e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	e772      	b.n	8002d16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e32:	f000 fa17 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e36:	f000 fd31 	bl	800389c <xTaskResumeAll>
 8002e3a:	e76c      	b.n	8002d16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3e:	f000 fa11 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e42:	f000 fd2b 	bl	800389c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e46:	2300      	movs	r3, #0
		}
	}
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3738      	adds	r7, #56	; 0x38
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08e      	sub	sp, #56	; 0x38
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e7e:	bf00      	nop
 8002e80:	e7fe      	b.n	8002e80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <xQueueGenericSendFromISR+0x3c>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <xQueueGenericSendFromISR+0x40>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <xQueueGenericSendFromISR+0x42>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	623b      	str	r3, [r7, #32]
}
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d103      	bne.n	8002ebe <xQueueGenericSendFromISR+0x6a>
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <xQueueGenericSendFromISR+0x6e>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <xQueueGenericSendFromISR+0x70>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	61fb      	str	r3, [r7, #28]
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ede:	f001 fe57 	bl	8004b90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ee2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	61ba      	str	r2, [r7, #24]
 8002ef8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002efa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <xQueueGenericSendFromISR+0xbc>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d12c      	bne.n	8002f6a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f20:	f000 f910 	bl	8003144 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d112      	bne.n	8002f54 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d016      	beq.n	8002f64 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	3324      	adds	r3, #36	; 0x24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fec4 	bl	8003cc8 <xTaskRemoveFromEventList>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f58:	3301      	adds	r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	b25a      	sxtb	r2, r3
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f64:	2301      	movs	r3, #1
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f68:	e001      	b.n	8002f6e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3738      	adds	r7, #56	; 0x38
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	; 0x30
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <xQueueReceive+0x30>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	623b      	str	r3, [r7, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <xQueueReceive+0x3e>
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <xQueueReceive+0x42>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <xQueueReceive+0x44>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <xQueueReceive+0x5e>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	61fb      	str	r3, [r7, #28]
}
 8002fde:	bf00      	nop
 8002fe0:	e7fe      	b.n	8002fe0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fe2:	f001 f833 	bl	800404c <xTaskGetSchedulerState>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <xQueueReceive+0x6e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <xQueueReceive+0x72>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <xQueueReceive+0x74>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <xQueueReceive+0x8e>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	61bb      	str	r3, [r7, #24]
}
 800300e:	bf00      	nop
 8003010:	e7fe      	b.n	8003010 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003012:	f001 fcfb 	bl	8004a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01f      	beq.n	8003062 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003026:	f000 f8f7 	bl	8003218 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	1e5a      	subs	r2, r3, #1
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00f      	beq.n	800305a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	3310      	adds	r3, #16
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fe42 	bl	8003cc8 <xTaskRemoveFromEventList>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <xQueueReceive+0x1bc>)
 800304c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800305a:	f001 fd07 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 800305e:	2301      	movs	r3, #1
 8003060:	e069      	b.n	8003136 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003068:	f001 fd00 	bl	8004a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800306c:	2300      	movs	r3, #0
 800306e:	e062      	b.n	8003136 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003076:	f107 0310 	add.w	r3, r7, #16
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fe88 	bl	8003d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003080:	2301      	movs	r3, #1
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003084:	f001 fcf2 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003088:	f000 fbfa 	bl	8003880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800308c:	f001 fcbe 	bl	8004a0c <vPortEnterCritical>
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003096:	b25b      	sxtb	r3, r3
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d103      	bne.n	80030a6 <xQueueReceive+0x122>
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d103      	bne.n	80030bc <xQueueReceive+0x138>
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030bc:	f001 fcd6 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c0:	1d3a      	adds	r2, r7, #4
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fe77 	bl	8003dbc <xTaskCheckForTimeOut>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d123      	bne.n	800311c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d6:	f000 f917 	bl	8003308 <prvIsQueueEmpty>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	3324      	adds	r3, #36	; 0x24
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fd9d 	bl	8003c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f0:	f000 f8b8 	bl	8003264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030f4:	f000 fbd2 	bl	800389c <xTaskResumeAll>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d189      	bne.n	8003012 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <xQueueReceive+0x1bc>)
 8003100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	e780      	b.n	8003012 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003112:	f000 f8a7 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003116:	f000 fbc1 	bl	800389c <xTaskResumeAll>
 800311a:	e77a      	b.n	8003012 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800311c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800311e:	f000 f8a1 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003122:	f000 fbbb 	bl	800389c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003128:	f000 f8ee 	bl	8003308 <prvIsQueueEmpty>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	f43f af6f 	beq.w	8003012 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003134:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003136:	4618      	mov	r0, r3
 8003138:	3730      	adds	r7, #48	; 0x30
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d14d      	bne.n	8003206 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 ff8a 	bl	8004088 <xTaskPriorityDisinherit>
 8003174:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e043      	b.n	8003206 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d119      	bne.n	80031b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6898      	ldr	r0, [r3, #8]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	461a      	mov	r2, r3
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	f001 ff4e 	bl	8005030 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d32b      	bcc.n	8003206 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e026      	b.n	8003206 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68d8      	ldr	r0, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	461a      	mov	r2, r3
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	f001 ff34 	bl	8005030 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	425b      	negs	r3, r3
 80031d2:	441a      	add	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d207      	bcs.n	80031f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	425b      	negs	r3, r3
 80031ee:	441a      	add	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d105      	bne.n	8003206 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	3b01      	subs	r3, #1
 8003204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800320e:	697b      	ldr	r3, [r7, #20]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	441a      	add	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d303      	bcc.n	800324c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	461a      	mov	r2, r3
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f001 feea 	bl	8005030 <memcpy>
	}
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800326c:	f001 fbce 	bl	8004a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003278:	e011      	b.n	800329e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3324      	adds	r3, #36	; 0x24
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fd1e 	bl	8003cc8 <xTaskRemoveFromEventList>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003292:	f000 fdf5 	bl	8003e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	3b01      	subs	r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dce9      	bgt.n	800327a <prvUnlockQueue+0x16>
 80032a6:	e000      	b.n	80032aa <prvUnlockQueue+0x46>
					break;
 80032a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	22ff      	movs	r2, #255	; 0xff
 80032ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032b2:	f001 fbdb 	bl	8004a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032b6:	f001 fba9 	bl	8004a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032c2:	e011      	b.n	80032e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3310      	adds	r3, #16
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fcf9 	bl	8003cc8 <xTaskRemoveFromEventList>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032dc:	f000 fdd0 	bl	8003e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032e0:	7bbb      	ldrb	r3, [r7, #14]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	dce9      	bgt.n	80032c4 <prvUnlockQueue+0x60>
 80032f0:	e000      	b.n	80032f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032fc:	f001 fbb6 	bl	8004a6c <vPortExitCritical>
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003310:	f001 fb7c 	bl	8004a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800331c:	2301      	movs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e001      	b.n	8003326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003326:	f001 fba1 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800333c:	f001 fb66 	bl	8004a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	429a      	cmp	r2, r3
 800334a:	d102      	bne.n	8003352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e001      	b.n	8003356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003356:	f001 fb89 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e014      	b.n	800339e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003374:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <vQueueAddToRegistry+0x4c>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003380:	490b      	ldr	r1, [pc, #44]	; (80033b0 <vQueueAddToRegistry+0x4c>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <vQueueAddToRegistry+0x4c>)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003396:	e006      	b.n	80033a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b07      	cmp	r3, #7
 80033a2:	d9e7      	bls.n	8003374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	200007d0 	.word	0x200007d0

080033b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033c4:	f001 fb22 	bl	8004a0c <vPortEnterCritical>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d103      	bne.n	80033de <vQueueWaitForMessageRestricted+0x2a>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033e4:	b25b      	sxtb	r3, r3
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d103      	bne.n	80033f4 <vQueueWaitForMessageRestricted+0x40>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033f4:	f001 fb3a 	bl	8004a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d106      	bne.n	800340e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3324      	adds	r3, #36	; 0x24
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fc31 	bl	8003c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800340e:	6978      	ldr	r0, [r7, #20]
 8003410:	f7ff ff28 	bl	8003264 <prvUnlockQueue>
	}
 8003414:	bf00      	nop
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	; 0x38
 8003420:	af04      	add	r7, sp, #16
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	623b      	str	r3, [r7, #32]
}
 8003442:	bf00      	nop
 8003444:	e7fe      	b.n	8003444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <xTaskCreateStatic+0x46>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	61fb      	str	r3, [r7, #28]
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003462:	235c      	movs	r3, #92	; 0x5c
 8003464:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b5c      	cmp	r3, #92	; 0x5c
 800346a:	d00a      	beq.n	8003482 <xTaskCreateStatic+0x66>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	61bb      	str	r3, [r7, #24]
}
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01e      	beq.n	80034c6 <xTaskCreateStatic+0xaa>
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01b      	beq.n	80034c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003496:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034a0:	2300      	movs	r3, #0
 80034a2:	9303      	str	r3, [sp, #12]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	9302      	str	r3, [sp, #8]
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f850 	bl	800355e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034c0:	f000 f8d4 	bl	800366c <prvAddNewTaskToReadyList>
 80034c4:	e001      	b.n	80034ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034ca:	697b      	ldr	r3, [r7, #20]
	}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3728      	adds	r7, #40	; 0x28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af04      	add	r7, sp, #16
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fb8f 	bl	8004c0c <pvPortMalloc>
 80034ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00e      	beq.n	8003514 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034f6:	205c      	movs	r0, #92	; 0x5c
 80034f8:	f001 fb88 	bl	8004c0c <pvPortMalloc>
 80034fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
 800350a:	e005      	b.n	8003518 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800350c:	6978      	ldr	r0, [r7, #20]
 800350e:	f001 fc41 	bl	8004d94 <vPortFree>
 8003512:	e001      	b.n	8003518 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	2300      	movs	r3, #0
 800352a:	9303      	str	r3, [sp, #12]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f80e 	bl	800355e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003542:	69f8      	ldr	r0, [r7, #28]
 8003544:	f000 f892 	bl	800366c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e002      	b.n	8003554 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003554:	69bb      	ldr	r3, [r7, #24]
	}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b088      	sub	sp, #32
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	461a      	mov	r2, r3
 8003576:	21a5      	movs	r1, #165	; 0xa5
 8003578:	f001 fd68 	bl	800504c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003586:	3b01      	subs	r3, #1
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f023 0307 	bic.w	r3, r3, #7
 8003594:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	617b      	str	r3, [r7, #20]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e012      	b.n	80035e2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	7819      	ldrb	r1, [r3, #0]
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	3334      	adds	r3, #52	; 0x34
 80035cc:	460a      	mov	r2, r1
 80035ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	3301      	adds	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b0f      	cmp	r3, #15
 80035e6:	d9e9      	bls.n	80035bc <prvInitialiseNewTask+0x5e>
 80035e8:	e000      	b.n	80035ec <prvInitialiseNewTask+0x8e>
		{
			break;
 80035ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	2b37      	cmp	r3, #55	; 0x37
 80035f8:	d901      	bls.n	80035fe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035fa:	2337      	movs	r3, #55	; 0x37
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003608:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2200      	movs	r2, #0
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	3304      	adds	r3, #4
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f98c 	bl	8002932 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	3318      	adds	r3, #24
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f987 	bl	8002932 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003628:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003638:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	2200      	movs	r2, #0
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	69b8      	ldr	r0, [r7, #24]
 800364e:	f001 f8ef 	bl	8004830 <pxPortInitialiseStack>
 8003652:	4602      	mov	r2, r0
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003662:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003664:	bf00      	nop
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003674:	f001 f9ca 	bl	8004a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <prvAddNewTaskToReadyList+0xc4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	4a2c      	ldr	r2, [pc, #176]	; (8003730 <prvAddNewTaskToReadyList+0xc4>)
 8003680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <prvAddNewTaskToReadyList+0xc8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800368a:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <prvAddNewTaskToReadyList+0xc8>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <prvAddNewTaskToReadyList+0xc4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d110      	bne.n	80036ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003698:	f000 fc16 	bl	8003ec8 <prvInitialiseTaskLists>
 800369c:	e00d      	b.n	80036ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <prvAddNewTaskToReadyList+0xcc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036a6:	4b23      	ldr	r3, [pc, #140]	; (8003734 <prvAddNewTaskToReadyList+0xc8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d802      	bhi.n	80036ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036b4:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <prvAddNewTaskToReadyList+0xc8>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <prvAddNewTaskToReadyList+0xd0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3301      	adds	r3, #1
 80036c0:	4a1e      	ldr	r2, [pc, #120]	; (800373c <prvAddNewTaskToReadyList+0xd0>)
 80036c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <prvAddNewTaskToReadyList+0xd0>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <prvAddNewTaskToReadyList+0xd4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d903      	bls.n	80036e0 <prvAddNewTaskToReadyList+0x74>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <prvAddNewTaskToReadyList+0xd4>)
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <prvAddNewTaskToReadyList+0xd8>)
 80036ee:	441a      	add	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f7ff f927 	bl	800294a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036fc:	f001 f9b6 	bl	8004a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <prvAddNewTaskToReadyList+0xcc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <prvAddNewTaskToReadyList+0xc8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	429a      	cmp	r2, r3
 8003714:	d207      	bcs.n	8003726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <prvAddNewTaskToReadyList+0xdc>)
 8003718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000ce4 	.word	0x20000ce4
 8003734:	20000810 	.word	0x20000810
 8003738:	20000cf0 	.word	0x20000cf0
 800373c:	20000d00 	.word	0x20000d00
 8003740:	20000cec 	.word	0x20000cec
 8003744:	20000814 	.word	0x20000814
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d017      	beq.n	800378e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <vTaskDelay+0x60>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <vTaskDelay+0x30>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	60bb      	str	r3, [r7, #8]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800377c:	f000 f880 	bl	8003880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003780:	2100      	movs	r1, #0
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fcee 	bl	8004164 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003788:	f000 f888 	bl	800389c <xTaskResumeAll>
 800378c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <vTaskDelay+0x64>)
 8003796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000d0c 	.word	0x20000d0c
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037c2:	463a      	mov	r2, r7
 80037c4:	1d39      	adds	r1, r7, #4
 80037c6:	f107 0308 	add.w	r3, r7, #8
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff f860 	bl	8002890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	9202      	str	r2, [sp, #8]
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	2300      	movs	r3, #0
 80037e0:	460a      	mov	r2, r1
 80037e2:	4921      	ldr	r1, [pc, #132]	; (8003868 <vTaskStartScheduler+0xb4>)
 80037e4:	4821      	ldr	r0, [pc, #132]	; (800386c <vTaskStartScheduler+0xb8>)
 80037e6:	f7ff fe19 	bl	800341c <xTaskCreateStatic>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4a20      	ldr	r2, [pc, #128]	; (8003870 <vTaskStartScheduler+0xbc>)
 80037ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037f0:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <vTaskStartScheduler+0xbc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037f8:	2301      	movs	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e001      	b.n	8003802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003808:	f000 fd00 	bl	800420c <xTimerCreateTimerTask>
 800380c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d116      	bne.n	8003842 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	613b      	str	r3, [r7, #16]
}
 8003826:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <vTaskStartScheduler+0xc0>)
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <vTaskStartScheduler+0xc4>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <vTaskStartScheduler+0xc8>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800383c:	f001 f874 	bl	8004928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003840:	e00e      	b.n	8003860 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d10a      	bne.n	8003860 <vTaskStartScheduler+0xac>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	60fb      	str	r3, [r7, #12]
}
 800385c:	bf00      	nop
 800385e:	e7fe      	b.n	800385e <vTaskStartScheduler+0xaa>
}
 8003860:	bf00      	nop
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	0800599c 	.word	0x0800599c
 800386c:	08003e99 	.word	0x08003e99
 8003870:	20000d08 	.word	0x20000d08
 8003874:	20000d04 	.word	0x20000d04
 8003878:	20000cf0 	.word	0x20000cf0
 800387c:	20000ce8 	.word	0x20000ce8

08003880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <vTaskSuspendAll+0x18>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a03      	ldr	r2, [pc, #12]	; (8003898 <vTaskSuspendAll+0x18>)
 800388c:	6013      	str	r3, [r2, #0]
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000d0c 	.word	0x20000d0c

0800389c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038aa:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <xTaskResumeAll+0x118>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	603b      	str	r3, [r7, #0]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038c8:	f001 f8a0 	bl	8004a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <xTaskResumeAll+0x118>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	4a38      	ldr	r2, [pc, #224]	; (80039b4 <xTaskResumeAll+0x118>)
 80038d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <xTaskResumeAll+0x118>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d162      	bne.n	80039a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038de:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <xTaskResumeAll+0x11c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d05e      	beq.n	80039a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038e6:	e02f      	b.n	8003948 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <xTaskResumeAll+0x120>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f883 	bl	8002a00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f87e 	bl	8002a00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <xTaskResumeAll+0x124>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d903      	bls.n	8003918 <xTaskResumeAll+0x7c>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4a2a      	ldr	r2, [pc, #168]	; (80039c0 <xTaskResumeAll+0x124>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <xTaskResumeAll+0x128>)
 8003926:	441a      	add	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7ff f80b 	bl	800294a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <xTaskResumeAll+0x12c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <xTaskResumeAll+0x130>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003948:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <xTaskResumeAll+0x120>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1cb      	bne.n	80038e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003956:	f000 fb55 	bl	8004004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <xTaskResumeAll+0x134>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003966:	f000 f845 	bl	80039f4 <xTaskIncrementTick>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <xTaskResumeAll+0x130>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3b01      	subs	r3, #1
 800397a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f1      	bne.n	8003966 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <xTaskResumeAll+0x134>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <xTaskResumeAll+0x130>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <xTaskResumeAll+0x138>)
 8003996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a4:	f001 f862 	bl	8004a6c <vPortExitCritical>

	return xAlreadyYielded;
 80039a8:	68bb      	ldr	r3, [r7, #8]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000d0c 	.word	0x20000d0c
 80039b8:	20000ce4 	.word	0x20000ce4
 80039bc:	20000ca4 	.word	0x20000ca4
 80039c0:	20000cec 	.word	0x20000cec
 80039c4:	20000814 	.word	0x20000814
 80039c8:	20000810 	.word	0x20000810
 80039cc:	20000cf8 	.word	0x20000cf8
 80039d0:	20000cf4 	.word	0x20000cf4
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <xTaskGetTickCount+0x18>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039e4:	687b      	ldr	r3, [r7, #4]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	20000ce8 	.word	0x20000ce8

080039f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fe:	4b51      	ldr	r3, [pc, #324]	; (8003b44 <xTaskIncrementTick+0x150>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 808e 	bne.w	8003b24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a08:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <xTaskIncrementTick+0x154>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a10:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <xTaskIncrementTick+0x154>)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d120      	bne.n	8003a5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a1c:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <xTaskIncrementTick+0x48>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	603b      	str	r3, [r7, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskIncrementTick+0x46>
 8003a3c:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <xTaskIncrementTick+0x15c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a41      	ldr	r2, [pc, #260]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <xTaskIncrementTick+0x15c>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <xTaskIncrementTick+0x160>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	4a3f      	ldr	r2, [pc, #252]	; (8003b54 <xTaskIncrementTick+0x160>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	f000 fad3 	bl	8004004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <xTaskIncrementTick+0x164>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d34e      	bcc.n	8003b06 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a68:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <xTaskIncrementTick+0x82>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <xTaskIncrementTick+0x84>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <xTaskIncrementTick+0x164>)
 8003a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a82:	601a      	str	r2, [r3, #0]
					break;
 8003a84:	e03f      	b.n	8003b06 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d203      	bcs.n	8003aa6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a9e:	4a2e      	ldr	r2, [pc, #184]	; (8003b58 <xTaskIncrementTick+0x164>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6013      	str	r3, [r2, #0]
						break;
 8003aa4:	e02f      	b.n	8003b06 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe ffa8 	bl	8002a00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3318      	adds	r3, #24
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe ff9f 	bl	8002a00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <xTaskIncrementTick+0x168>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d903      	bls.n	8003ad6 <xTaskIncrementTick+0xe2>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <xTaskIncrementTick+0x168>)
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <xTaskIncrementTick+0x16c>)
 8003ae4:	441a      	add	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7fe ff2c 	bl	800294a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <xTaskIncrementTick+0x170>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d3b3      	bcc.n	8003a68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b04:	e7b0      	b.n	8003a68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b06:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <xTaskIncrementTick+0x170>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4914      	ldr	r1, [pc, #80]	; (8003b60 <xTaskIncrementTick+0x16c>)
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d907      	bls.n	8003b2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e004      	b.n	8003b2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <xTaskIncrementTick+0x174>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <xTaskIncrementTick+0x174>)
 8003b2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <xTaskIncrementTick+0x178>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b3a:	697b      	ldr	r3, [r7, #20]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000d0c 	.word	0x20000d0c
 8003b48:	20000ce8 	.word	0x20000ce8
 8003b4c:	20000c9c 	.word	0x20000c9c
 8003b50:	20000ca0 	.word	0x20000ca0
 8003b54:	20000cfc 	.word	0x20000cfc
 8003b58:	20000d04 	.word	0x20000d04
 8003b5c:	20000cec 	.word	0x20000cec
 8003b60:	20000814 	.word	0x20000814
 8003b64:	20000810 	.word	0x20000810
 8003b68:	20000cf4 	.word	0x20000cf4
 8003b6c:	20000cf8 	.word	0x20000cf8

08003b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b76:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <vTaskSwitchContext+0xa4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <vTaskSwitchContext+0xa8>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b84:	e041      	b.n	8003c0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <vTaskSwitchContext+0xa8>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b8c:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <vTaskSwitchContext+0xac>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e010      	b.n	8003bb6 <vTaskSwitchContext+0x46>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	607b      	str	r3, [r7, #4]
}
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <vTaskSwitchContext+0x3e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	491a      	ldr	r1, [pc, #104]	; (8003c20 <vTaskSwitchContext+0xb0>)
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0e4      	beq.n	8003b94 <vTaskSwitchContext+0x24>
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <vTaskSwitchContext+0xb0>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	3308      	adds	r3, #8
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d104      	bne.n	8003bfa <vTaskSwitchContext+0x8a>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <vTaskSwitchContext+0xb4>)
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <vTaskSwitchContext+0xac>)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6013      	str	r3, [r2, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	20000d0c 	.word	0x20000d0c
 8003c18:	20000cf8 	.word	0x20000cf8
 8003c1c:	20000cec 	.word	0x20000cec
 8003c20:	20000814 	.word	0x20000814
 8003c24:	20000810 	.word	0x20000810

08003c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60fb      	str	r3, [r7, #12]
}
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <vTaskPlaceOnEventList+0x44>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3318      	adds	r3, #24
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe fe9a 	bl	8002990 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f000 fa80 	bl	8004164 <prvAddCurrentTaskToDelayedList>
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000810 	.word	0x20000810

08003c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	617b      	str	r3, [r7, #20]
}
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3318      	adds	r3, #24
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7fe fe52 	bl	800294a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	68b8      	ldr	r0, [r7, #8]
 8003cb6:	f000 fa55 	bl	8004164 <prvAddCurrentTaskToDelayedList>
	}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000810 	.word	0x20000810

08003cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	60fb      	str	r3, [r7, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	3318      	adds	r3, #24
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fe81 	bl	8002a00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <xTaskRemoveFromEventList+0xb0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11d      	bne.n	8003d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fe78 	bl	8002a00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <xTaskRemoveFromEventList+0xb4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d903      	bls.n	8003d24 <xTaskRemoveFromEventList+0x5c>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <xTaskRemoveFromEventList+0xb4>)
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <xTaskRemoveFromEventList+0xb8>)
 8003d32:	441a      	add	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7fe fe05 	bl	800294a <vListInsertEnd>
 8003d40:	e005      	b.n	8003d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3318      	adds	r3, #24
 8003d46:	4619      	mov	r1, r3
 8003d48:	480e      	ldr	r0, [pc, #56]	; (8003d84 <xTaskRemoveFromEventList+0xbc>)
 8003d4a:	f7fe fdfe 	bl	800294a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <xTaskRemoveFromEventList+0xc0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d905      	bls.n	8003d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <xTaskRemoveFromEventList+0xc4>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e001      	b.n	8003d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003d6c:	697b      	ldr	r3, [r7, #20]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000d0c 	.word	0x20000d0c
 8003d7c:	20000cec 	.word	0x20000cec
 8003d80:	20000814 	.word	0x20000814
 8003d84:	20000ca4 	.word	0x20000ca4
 8003d88:	20000810 	.word	0x20000810
 8003d8c:	20000cf8 	.word	0x20000cf8

08003d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <vTaskInternalSetTimeOutState+0x24>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <vTaskInternalSetTimeOutState+0x28>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	605a      	str	r2, [r3, #4]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000cfc 	.word	0x20000cfc
 8003db8:	20000ce8 	.word	0x20000ce8

08003dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	613b      	str	r3, [r7, #16]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dfe:	f000 fe05 	bl	8004a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <xTaskCheckForTimeOut+0xbc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d102      	bne.n	8003e22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e023      	b.n	8003e6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <xTaskCheckForTimeOut+0xc0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d007      	beq.n	8003e3e <xTaskCheckForTimeOut+0x82>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e015      	b.n	8003e6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d20b      	bcs.n	8003e60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff9b 	bl	8003d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e004      	b.n	8003e6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e6a:	f000 fdff 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000ce8 	.word	0x20000ce8
 8003e7c:	20000cfc 	.word	0x20000cfc

08003e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <vTaskMissedYield+0x14>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000cf8 	.word	0x20000cf8

08003e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ea0:	f000 f852 	bl	8003f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <prvIdleTask+0x28>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d9f9      	bls.n	8003ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <prvIdleTask+0x2c>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ebc:	e7f0      	b.n	8003ea0 <prvIdleTask+0x8>
 8003ebe:	bf00      	nop
 8003ec0:	20000814 	.word	0x20000814
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	e00c      	b.n	8003eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <prvInitialiseTaskLists+0x60>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fd06 	bl	80028f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b37      	cmp	r3, #55	; 0x37
 8003ef2:	d9ef      	bls.n	8003ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ef4:	480d      	ldr	r0, [pc, #52]	; (8003f2c <prvInitialiseTaskLists+0x64>)
 8003ef6:	f7fe fcfd 	bl	80028f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003efa:	480d      	ldr	r0, [pc, #52]	; (8003f30 <prvInitialiseTaskLists+0x68>)
 8003efc:	f7fe fcfa 	bl	80028f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f00:	480c      	ldr	r0, [pc, #48]	; (8003f34 <prvInitialiseTaskLists+0x6c>)
 8003f02:	f7fe fcf7 	bl	80028f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f06:	480c      	ldr	r0, [pc, #48]	; (8003f38 <prvInitialiseTaskLists+0x70>)
 8003f08:	f7fe fcf4 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <prvInitialiseTaskLists+0x74>)
 8003f0e:	f7fe fcf1 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <prvInitialiseTaskLists+0x78>)
 8003f14:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <prvInitialiseTaskLists+0x64>)
 8003f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <prvInitialiseTaskLists+0x7c>)
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <prvInitialiseTaskLists+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000814 	.word	0x20000814
 8003f2c:	20000c74 	.word	0x20000c74
 8003f30:	20000c88 	.word	0x20000c88
 8003f34:	20000ca4 	.word	0x20000ca4
 8003f38:	20000cb8 	.word	0x20000cb8
 8003f3c:	20000cd0 	.word	0x20000cd0
 8003f40:	20000c9c 	.word	0x20000c9c
 8003f44:	20000ca0 	.word	0x20000ca0

08003f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f4e:	e019      	b.n	8003f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f50:	f000 fd5c 	bl	8004a0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f54:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <prvCheckTasksWaitingTermination+0x50>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fd4d 	bl	8002a00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <prvCheckTasksWaitingTermination+0x54>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <prvCheckTasksWaitingTermination+0x54>)
 8003f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <prvCheckTasksWaitingTermination+0x58>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <prvCheckTasksWaitingTermination+0x58>)
 8003f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f7a:	f000 fd77 	bl	8004a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f810 	bl	8003fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <prvCheckTasksWaitingTermination+0x58>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e1      	bne.n	8003f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000cb8 	.word	0x20000cb8
 8003f9c:	20000ce4 	.word	0x20000ce4
 8003fa0:	20000ccc 	.word	0x20000ccc

08003fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 feea 	bl	8004d94 <vPortFree>
				vPortFree( pxTCB );
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fee7 	bl	8004d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fc6:	e018      	b.n	8003ffa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d103      	bne.n	8003fda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fede 	bl	8004d94 <vPortFree>
	}
 8003fd8:	e00f      	b.n	8003ffa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d00a      	beq.n	8003ffa <prvDeleteTCB+0x56>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <prvDeleteTCB+0x54>
	}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400a:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <prvResetNextTaskUnblockTime+0x40>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <prvResetNextTaskUnblockTime+0x14>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <prvResetNextTaskUnblockTime+0x16>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <prvResetNextTaskUnblockTime+0x44>)
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004026:	e008      	b.n	800403a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <prvResetNextTaskUnblockTime+0x40>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4a04      	ldr	r2, [pc, #16]	; (8004048 <prvResetNextTaskUnblockTime+0x44>)
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	20000c9c 	.word	0x20000c9c
 8004048:	20000d04 	.word	0x20000d04

0800404c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <xTaskGetSchedulerState+0x34>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800405a:	2301      	movs	r3, #1
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	e008      	b.n	8004072 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004060:	4b08      	ldr	r3, [pc, #32]	; (8004084 <xTaskGetSchedulerState+0x38>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004068:	2302      	movs	r3, #2
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	e001      	b.n	8004072 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800406e:	2300      	movs	r3, #0
 8004070:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004072:	687b      	ldr	r3, [r7, #4]
	}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000cf0 	.word	0x20000cf0
 8004084:	20000d0c 	.word	0x20000d0c

08004088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d056      	beq.n	800414c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <xTaskPriorityDisinherit+0xd0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d00a      	beq.n	80040be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	60fb      	str	r3, [r7, #12]
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60bb      	str	r3, [r7, #8]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e0:	1e5a      	subs	r2, r3, #1
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d02c      	beq.n	800414c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d128      	bne.n	800414c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fc7e 	bl	8002a00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <xTaskPriorityDisinherit+0xd4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d903      	bls.n	800412c <xTaskPriorityDisinherit+0xa4>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	4a0c      	ldr	r2, [pc, #48]	; (800415c <xTaskPriorityDisinherit+0xd4>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <xTaskPriorityDisinherit+0xd8>)
 800413a:	441a      	add	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7fe fc01 	bl	800294a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800414c:	697b      	ldr	r3, [r7, #20]
	}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000810 	.word	0x20000810
 800415c:	20000cec 	.word	0x20000cec
 8004160:	20000814 	.word	0x20000814

08004164 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800416e:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004174:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fc40 	bl	8002a00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d10a      	bne.n	800419e <prvAddCurrentTaskToDelayedList+0x3a>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800418e:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4819      	ldr	r0, [pc, #100]	; (80041fc <prvAddCurrentTaskToDelayedList+0x98>)
 8004198:	f7fe fbd7 	bl	800294a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800419c:	e026      	b.n	80041ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041a6:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d209      	bcs.n	80041ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <prvAddCurrentTaskToDelayedList+0x9c>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7fe fbe4 	bl	8002990 <vListInsert>
}
 80041c8:	e010      	b.n	80041ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <prvAddCurrentTaskToDelayedList+0xa0>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fe fbda 	bl	8002990 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d202      	bcs.n	80041ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000ce8 	.word	0x20000ce8
 80041f8:	20000810 	.word	0x20000810
 80041fc:	20000cd0 	.word	0x20000cd0
 8004200:	20000ca0 	.word	0x20000ca0
 8004204:	20000c9c 	.word	0x20000c9c
 8004208:	20000d04 	.word	0x20000d04

0800420c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004216:	f000 facb 	bl	80047b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <xTimerCreateTimerTask+0x80>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d021      	beq.n	8004266 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800422a:	1d3a      	adds	r2, r7, #4
 800422c:	f107 0108 	add.w	r1, r7, #8
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fb43 	bl	80028c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	9202      	str	r2, [sp, #8]
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	2302      	movs	r3, #2
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2300      	movs	r3, #0
 800424a:	460a      	mov	r2, r1
 800424c:	4910      	ldr	r1, [pc, #64]	; (8004290 <xTimerCreateTimerTask+0x84>)
 800424e:	4811      	ldr	r0, [pc, #68]	; (8004294 <xTimerCreateTimerTask+0x88>)
 8004250:	f7ff f8e4 	bl	800341c <xTaskCreateStatic>
 8004254:	4603      	mov	r3, r0
 8004256:	4a10      	ldr	r2, [pc, #64]	; (8004298 <xTimerCreateTimerTask+0x8c>)
 8004258:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800425a:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <xTimerCreateTimerTask+0x8c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004262:	2301      	movs	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	613b      	str	r3, [r7, #16]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000d40 	.word	0x20000d40
 8004290:	080059a4 	.word	0x080059a4
 8004294:	080043b9 	.word	0x080043b9
 8004298:	20000d44 	.word	0x20000d44

0800429c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	623b      	str	r3, [r7, #32]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80042ca:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <xTimerGenericCommand+0x98>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d02a      	beq.n	8004328 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	dc18      	bgt.n	8004316 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042e4:	f7ff feb2 	bl	800404c <xTaskGetSchedulerState>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d109      	bne.n	8004302 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <xTimerGenericCommand+0x98>)
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	f107 0110 	add.w	r1, r7, #16
 80042f6:	2300      	movs	r3, #0
 80042f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fa:	f7fe fcad 	bl	8002c58 <xQueueGenericSend>
 80042fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004300:	e012      	b.n	8004328 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <xTimerGenericCommand+0x98>)
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	f107 0110 	add.w	r1, r7, #16
 800430a:	2300      	movs	r3, #0
 800430c:	2200      	movs	r2, #0
 800430e:	f7fe fca3 	bl	8002c58 <xQueueGenericSend>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24
 8004314:	e008      	b.n	8004328 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <xTimerGenericCommand+0x98>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f107 0110 	add.w	r1, r7, #16
 800431e:	2300      	movs	r3, #0
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	f7fe fd97 	bl	8002e54 <xQueueGenericSendFromISR>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800432a:	4618      	mov	r0, r3
 800432c:	3728      	adds	r7, #40	; 0x28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000d40 	.word	0x20000d40

08004338 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004342:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <prvProcessExpiredTimer+0x7c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3304      	adds	r3, #4
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe fb55 	bl	8002a00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d122      	bne.n	80043a4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	18d1      	adds	r1, r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	6978      	ldr	r0, [r7, #20]
 800436c:	f000 f8c8 	bl	8004500 <prvInsertTimerInActiveList>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004376:	2300      	movs	r3, #0
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2300      	movs	r3, #0
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	2100      	movs	r1, #0
 8004380:	6978      	ldr	r0, [r7, #20]
 8004382:	f7ff ff8b 	bl	800429c <xTimerGenericCommand>
 8004386:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60fb      	str	r3, [r7, #12]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	4798      	blx	r3
}
 80043ac:	bf00      	nop
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000d38 	.word	0x20000d38

080043b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f857 	bl	8004478 <prvGetNextExpireTime>
 80043ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4619      	mov	r1, r3
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f803 	bl	80043dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043d6:	f000 f8d5 	bl	8004584 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043da:	e7f1      	b.n	80043c0 <prvTimerTask+0x8>

080043dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043e6:	f7ff fa4b 	bl	8003880 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f866 	bl	80044c0 <prvSampleTimeNow>
 80043f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d130      	bne.n	800445e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <prvProcessTimerOrBlockTask+0x3c>
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	429a      	cmp	r2, r3
 8004408:	d806      	bhi.n	8004418 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800440a:	f7ff fa47 	bl	800389c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff91 	bl	8004338 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004416:	e024      	b.n	8004462 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <prvProcessTimerOrBlockTask+0x90>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <prvProcessTimerOrBlockTask+0x94>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	f7fe ffb9 	bl	80033b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004442:	f7ff fa2b 	bl	800389c <xTaskResumeAll>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <prvProcessTimerOrBlockTask+0x98>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
}
 800445c:	e001      	b.n	8004462 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800445e:	f7ff fa1d 	bl	800389c <xTaskResumeAll>
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000d3c 	.word	0x20000d3c
 8004470:	20000d40 	.word	0x20000d40
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004480:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <prvGetNextExpireTime+0x44>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <prvGetNextExpireTime+0x44>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e001      	b.n	80044ae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80044ae:	68fb      	ldr	r3, [r7, #12]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000d38 	.word	0x20000d38

080044c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80044c8:	f7ff fa86 	bl	80039d8 <xTaskGetTickCount>
 80044cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <prvSampleTimeNow+0x3c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d205      	bcs.n	80044e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044d8:	f000 f908 	bl	80046ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e002      	b.n	80044ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <prvSampleTimeNow+0x3c>)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044f0:	68fb      	ldr	r3, [r7, #12]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000d48 	.word	0x20000d48

08004500 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d812      	bhi.n	800454c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	1ad2      	subs	r2, r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004534:	2301      	movs	r3, #1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e01b      	b.n	8004572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <prvInsertTimerInActiveList+0x7c>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7fe fa23 	bl	8002990 <vListInsert>
 800454a:	e012      	b.n	8004572 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d206      	bcs.n	8004562 <prvInsertTimerInActiveList+0x62>
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d302      	bcc.n	8004562 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e007      	b.n	8004572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <prvInsertTimerInActiveList+0x80>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3304      	adds	r3, #4
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f7fe fa0f 	bl	8002990 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004572:	697b      	ldr	r3, [r7, #20]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000d3c 	.word	0x20000d3c
 8004580:	20000d38 	.word	0x20000d38

08004584 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	; 0x38
 8004588:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800458a:	e09d      	b.n	80046c8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	da18      	bge.n	80045c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	3304      	adds	r3, #4
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	61fb      	str	r3, [r7, #28]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ba:	6850      	ldr	r0, [r2, #4]
 80045bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045be:	6892      	ldr	r2, [r2, #8]
 80045c0:	4611      	mov	r1, r2
 80045c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	db7d      	blt.n	80046c6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	3304      	adds	r3, #4
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fa10 	bl	8002a00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045e0:	463b      	mov	r3, r7
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ff6c 	bl	80044c0 <prvSampleTimeNow>
 80045e8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	d86b      	bhi.n	80046c8 <prvProcessReceivedCommands+0x144>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <prvProcessReceivedCommands+0x74>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	08004621 	.word	0x08004621
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004621 	.word	0x08004621
 8004604:	080046c9 	.word	0x080046c9
 8004608:	0800467d 	.word	0x0800467d
 800460c:	080046b5 	.word	0x080046b5
 8004610:	08004621 	.word	0x08004621
 8004614:	08004621 	.word	0x08004621
 8004618:	080046c9 	.word	0x080046c9
 800461c:	0800467d 	.word	0x0800467d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	18d1      	adds	r1, r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462e:	f7ff ff67 	bl	8004500 <prvInsertTimerInActiveList>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d047      	beq.n	80046c8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d13f      	bne.n	80046c8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	441a      	add	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	2100      	movs	r1, #0
 8004658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800465a:	f7ff fe1f 	bl	800429c <xTimerGenericCommand>
 800465e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d130      	bne.n	80046c8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	61bb      	str	r3, [r7, #24]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	617b      	str	r3, [r7, #20]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	18d1      	adds	r1, r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ae:	f7ff ff27 	bl	8004500 <prvInsertTimerInActiveList>
					break;
 80046b2:	e009      	b.n	80046c8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80046be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c0:	f000 fb68 	bl	8004d94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046c4:	e000      	b.n	80046c8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80046c6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvProcessReceivedCommands+0x164>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	1d39      	adds	r1, r7, #4
 80046ce:	2200      	movs	r2, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe fc57 	bl	8002f84 <xQueueReceive>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f47f af57 	bne.w	800458c <prvProcessReceivedCommands+0x8>
	}
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	3730      	adds	r7, #48	; 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000d40 	.word	0x20000d40

080046ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046f2:	e045      	b.n	8004780 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046f4:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <prvSwitchTimerLists+0xbc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046fe:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <prvSwitchTimerLists+0xbc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7fe f977 	bl	8002a00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d12e      	bne.n	8004780 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	429a      	cmp	r2, r3
 8004732:	d90e      	bls.n	8004752 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004740:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <prvSwitchTimerLists+0xbc>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7fe f920 	bl	8002990 <vListInsert>
 8004750:	e016      	b.n	8004780 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004752:	2300      	movs	r3, #0
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	2300      	movs	r3, #0
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	2100      	movs	r1, #0
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff fd9d 	bl	800429c <xTimerGenericCommand>
 8004762:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <prvSwitchTimerLists+0x94>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	603b      	str	r3, [r7, #0]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <prvSwitchTimerLists+0xbc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1b4      	bne.n	80046f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <prvSwitchTimerLists+0xbc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <prvSwitchTimerLists+0xc0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <prvSwitchTimerLists+0xbc>)
 8004796:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <prvSwitchTimerLists+0xc0>)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000d38 	.word	0x20000d38
 80047ac:	20000d3c 	.word	0x20000d3c

080047b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047b6:	f000 f929 	bl	8004a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <prvCheckForValidListAndQueue+0x60>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d120      	bne.n	8004804 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047c2:	4814      	ldr	r0, [pc, #80]	; (8004814 <prvCheckForValidListAndQueue+0x64>)
 80047c4:	f7fe f896 	bl	80028f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047c8:	4813      	ldr	r0, [pc, #76]	; (8004818 <prvCheckForValidListAndQueue+0x68>)
 80047ca:	f7fe f893 	bl	80028f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <prvCheckForValidListAndQueue+0x6c>)
 80047d0:	4a10      	ldr	r2, [pc, #64]	; (8004814 <prvCheckForValidListAndQueue+0x64>)
 80047d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047d4:	4b12      	ldr	r3, [pc, #72]	; (8004820 <prvCheckForValidListAndQueue+0x70>)
 80047d6:	4a10      	ldr	r2, [pc, #64]	; (8004818 <prvCheckForValidListAndQueue+0x68>)
 80047d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047da:	2300      	movs	r3, #0
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <prvCheckForValidListAndQueue+0x74>)
 80047e0:	4a11      	ldr	r2, [pc, #68]	; (8004828 <prvCheckForValidListAndQueue+0x78>)
 80047e2:	2110      	movs	r1, #16
 80047e4:	200a      	movs	r0, #10
 80047e6:	f7fe f99d 	bl	8002b24 <xQueueGenericCreateStatic>
 80047ea:	4603      	mov	r3, r0
 80047ec:	4a08      	ldr	r2, [pc, #32]	; (8004810 <prvCheckForValidListAndQueue+0x60>)
 80047ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <prvCheckForValidListAndQueue+0x60>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <prvCheckForValidListAndQueue+0x60>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	490b      	ldr	r1, [pc, #44]	; (800482c <prvCheckForValidListAndQueue+0x7c>)
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fdb0 	bl	8003364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004804:	f000 f932 	bl	8004a6c <vPortExitCritical>
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000d40 	.word	0x20000d40
 8004814:	20000d10 	.word	0x20000d10
 8004818:	20000d24 	.word	0x20000d24
 800481c:	20000d38 	.word	0x20000d38
 8004820:	20000d3c 	.word	0x20000d3c
 8004824:	20000dec 	.word	0x20000dec
 8004828:	20000d4c 	.word	0x20000d4c
 800482c:	080059ac 	.word	0x080059ac

08004830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3b04      	subs	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3b04      	subs	r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b04      	subs	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004860:	4a08      	ldr	r2, [pc, #32]	; (8004884 <pxPortInitialiseStack+0x54>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b14      	subs	r3, #20
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b20      	subs	r3, #32
 8004876:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004878:	68fb      	ldr	r3, [r7, #12]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	08004889 	.word	0x08004889

08004888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <prvTaskExitError+0x54>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d00a      	beq.n	80048b2 <prvTaskExitError+0x2a>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	60fb      	str	r3, [r7, #12]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <prvTaskExitError+0x28>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	60bb      	str	r3, [r7, #8]
}
 80048c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048c6:	bf00      	nop
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0fc      	beq.n	80048c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000000c 	.word	0x2000000c

080048e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <pxCurrentTCBConst2>)
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048ea:	f380 8809 	msr	PSP, r0
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80048fe:	4770      	bx	lr

08004900 <pxCurrentTCBConst2>:
 8004900:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004908:	4806      	ldr	r0, [pc, #24]	; (8004924 <prvPortStartFirstTask+0x1c>)
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	6800      	ldr	r0, [r0, #0]
 800490e:	f380 8808 	msr	MSP, r0
 8004912:	b662      	cpsie	i
 8004914:	b661      	cpsie	f
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	df00      	svc	0
 8004920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004922:	bf00      	nop
 8004924:	e000ed08 	.word	0xe000ed08

08004928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <xPortStartScheduler+0xd0>)
 8004930:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <xPortStartScheduler+0xd4>)
 8004954:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004956:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004958:	2207      	movs	r2, #7
 800495a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495c:	e009      	b.n	8004972 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004966:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d0ef      	beq.n	800495e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	d00a      	beq.n	80049a0 <xPortStartScheduler+0x78>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049b2:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049d6:	f000 f8b9 	bl	8004b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <xPortStartScheduler+0xe0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049e0:	f7ff ff92 	bl	8004908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049e4:	f7ff f8c4 	bl	8003b70 <vTaskSwitchContext>
	prvTaskExitError();
 80049e8:	f7ff ff4e 	bl	8004888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000e400 	.word	0xe000e400
 80049fc:	20000e3c 	.word	0x20000e3c
 8004a00:	20000e40 	.word	0x20000e40
 8004a04:	e000ed20 	.word	0xe000ed20
 8004a08:	2000000c 	.word	0x2000000c

08004a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	607b      	str	r3, [r7, #4]
}
 8004a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10f      	bne.n	8004a58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <vPortEnterCritical+0x5c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	603b      	str	r3, [r7, #0]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vPortEnterCritical+0x4a>
	}
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <vPortExitCritical+0x24>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <vPortExitCritical+0x42>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f383 8811 	msr	BASEPRI, r3
}
 8004aac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	2000000c 	.word	0x2000000c
 8004abc:	00000000 	.word	0x00000000

08004ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ac0:	f3ef 8009 	mrs	r0, PSP
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <pxCurrentTCBConst>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ad0:	6010      	str	r0, [r2, #0]
 8004ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ada:	f380 8811 	msr	BASEPRI, r0
 8004ade:	f7ff f847 	bl	8003b70 <vTaskSwitchContext>
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8811 	msr	BASEPRI, r0
 8004aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6808      	ldr	r0, [r1, #0]
 8004af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004af6:	f380 8809 	msr	PSP, r0
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	4770      	bx	lr

08004b00 <pxCurrentTCBConst>:
 8004b00:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	607b      	str	r3, [r7, #4]
}
 8004b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b22:	f7fe ff67 	bl	80039f4 <xTaskIncrementTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <xPortSysTickHandler+0x40>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <vPortSetupTimerInterrupt+0x30>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <vPortSetupTimerInterrupt+0x38>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <vPortSetupTimerInterrupt+0x3c>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <vPortSetupTimerInterrupt+0x40>)
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b6e:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <vPortSetupTimerInterrupt+0x30>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e010 	.word	0xe000e010
 8004b80:	e000e018 	.word	0xe000e018
 8004b84:	20000000 	.word	0x20000000
 8004b88:	10624dd3 	.word	0x10624dd3
 8004b8c:	e000e014 	.word	0xe000e014

08004b90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b96:	f3ef 8305 	mrs	r3, IPSR
 8004b9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d914      	bls.n	8004bcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <vPortValidateInterruptPriority+0x6c>)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <vPortValidateInterruptPriority+0x70>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	7afa      	ldrb	r2, [r7, #11]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d20a      	bcs.n	8004bcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	607b      	str	r3, [r7, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <vPortValidateInterruptPriority+0x74>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <vPortValidateInterruptPriority+0x78>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d90a      	bls.n	8004bf2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	603b      	str	r3, [r7, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <vPortValidateInterruptPriority+0x60>
	}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	e000e3f0 	.word	0xe000e3f0
 8004c00:	20000e3c 	.word	0x20000e3c
 8004c04:	e000ed0c 	.word	0xe000ed0c
 8004c08:	20000e40 	.word	0x20000e40

08004c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c18:	f7fe fe32 	bl	8003880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c1c:	4b58      	ldr	r3, [pc, #352]	; (8004d80 <pvPortMalloc+0x174>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c24:	f000 f910 	bl	8004e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c28:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <pvPortMalloc+0x178>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 808e 	bne.w	8004d52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01d      	beq.n	8004c78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	3308      	adds	r3, #8
 8004c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <pvPortMalloc+0x6c>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	617b      	str	r3, [r7, #20]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d069      	beq.n	8004d52 <pvPortMalloc+0x146>
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <pvPortMalloc+0x17c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d864      	bhi.n	8004d52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c88:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <pvPortMalloc+0x180>)
 8004c8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <pvPortMalloc+0x180>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c92:	e004      	b.n	8004c9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d903      	bls.n	8004cb0 <pvPortMalloc+0xa4>
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f1      	bne.n	8004c94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cb0:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <pvPortMalloc+0x174>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d04b      	beq.n	8004d52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	4413      	add	r3, r2
 8004cc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d91f      	bls.n	8004d1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <pvPortMalloc+0xf8>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	613b      	str	r3, [r7, #16]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d16:	69b8      	ldr	r0, [r7, #24]
 8004d18:	f000 f8f8 	bl	8004f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d2a:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <pvPortMalloc+0x184>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d203      	bcs.n	8004d3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <pvPortMalloc+0x184>)
 8004d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <pvPortMalloc+0x178>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d52:	f7fe fda3 	bl	800389c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <pvPortMalloc+0x16a>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <pvPortMalloc+0x168>
	return pvReturn;
 8004d76:	69fb      	ldr	r3, [r7, #28]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20001a4c 	.word	0x20001a4c
 8004d84:	20001a58 	.word	0x20001a58
 8004d88:	20001a50 	.word	0x20001a50
 8004d8c:	20001a44 	.word	0x20001a44
 8004d90:	20001a54 	.word	0x20001a54

08004d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d048      	beq.n	8004e38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004da6:	2308      	movs	r3, #8
 8004da8:	425b      	negs	r3, r3
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <vPortFree+0xac>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <vPortFree+0x44>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60fb      	str	r3, [r7, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <vPortFree+0x62>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60bb      	str	r3, [r7, #8]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <vPortFree+0xac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d019      	beq.n	8004e38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortFree+0xac>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	401a      	ands	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e1c:	f7fe fd30 	bl	8003880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <vPortFree+0xb0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <vPortFree+0xb0>)
 8004e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e2e:	6938      	ldr	r0, [r7, #16]
 8004e30:	f000 f86c 	bl	8004f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e34:	f7fe fd32 	bl	800389c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20001a58 	.word	0x20001a58
 8004e44:	20001a50 	.word	0x20001a50

08004e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <prvHeapInit+0xac>)
 8004e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3307      	adds	r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <prvHeapInit+0xac>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <prvHeapInit+0xb0>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <prvHeapInit+0xb0>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	4413      	add	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e94:	2208      	movs	r2, #8
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <prvHeapInit+0xb4>)
 8004ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <prvHeapInit+0xb4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <prvHeapInit+0xb4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	1ad2      	subs	r2, r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvHeapInit+0xb4>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <prvHeapInit+0xb8>)
 8004ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <prvHeapInit+0xbc>)
 8004ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <prvHeapInit+0xc0>)
 8004ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ee6:	601a      	str	r2, [r3, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000e44 	.word	0x20000e44
 8004ef8:	20001a44 	.word	0x20001a44
 8004efc:	20001a4c 	.word	0x20001a4c
 8004f00:	20001a54 	.word	0x20001a54
 8004f04:	20001a50 	.word	0x20001a50
 8004f08:	20001a58 	.word	0x20001a58

08004f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f14:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <prvInsertBlockIntoFreeList+0x14>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d8f7      	bhi.n	8004f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4413      	add	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d108      	bne.n	8004f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d118      	bne.n	8004f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvInsertBlockIntoFreeList+0xac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d00d      	beq.n	8004f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e008      	b.n	8004f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <prvInsertBlockIntoFreeList+0xac>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e003      	b.n	8004f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d002      	beq.n	8004faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	20001a44 	.word	0x20001a44
 8004fb8:	20001a4c 	.word	0x20001a4c

08004fbc <__errno>:
 8004fbc:	4b01      	ldr	r3, [pc, #4]	; (8004fc4 <__errno+0x8>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000010 	.word	0x20000010

08004fc8 <__libc_init_array>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	2600      	movs	r6, #0
 8004fcc:	4d0c      	ldr	r5, [pc, #48]	; (8005000 <__libc_init_array+0x38>)
 8004fce:	4c0d      	ldr	r4, [pc, #52]	; (8005004 <__libc_init_array+0x3c>)
 8004fd0:	1b64      	subs	r4, r4, r5
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	42a6      	cmp	r6, r4
 8004fd6:	d109      	bne.n	8004fec <__libc_init_array+0x24>
 8004fd8:	f000 fcac 	bl	8005934 <_init>
 8004fdc:	2600      	movs	r6, #0
 8004fde:	4d0a      	ldr	r5, [pc, #40]	; (8005008 <__libc_init_array+0x40>)
 8004fe0:	4c0a      	ldr	r4, [pc, #40]	; (800500c <__libc_init_array+0x44>)
 8004fe2:	1b64      	subs	r4, r4, r5
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	42a6      	cmp	r6, r4
 8004fe8:	d105      	bne.n	8004ff6 <__libc_init_array+0x2e>
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff0:	4798      	blx	r3
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7ee      	b.n	8004fd4 <__libc_init_array+0xc>
 8004ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffa:	4798      	blx	r3
 8004ffc:	3601      	adds	r6, #1
 8004ffe:	e7f2      	b.n	8004fe6 <__libc_init_array+0x1e>
 8005000:	08005a80 	.word	0x08005a80
 8005004:	08005a80 	.word	0x08005a80
 8005008:	08005a80 	.word	0x08005a80
 800500c:	08005a84 	.word	0x08005a84

08005010 <malloc>:
 8005010:	4b02      	ldr	r3, [pc, #8]	; (800501c <malloc+0xc>)
 8005012:	4601      	mov	r1, r0
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	f000 b889 	b.w	800512c <_malloc_r>
 800501a:	bf00      	nop
 800501c:	20000010 	.word	0x20000010

08005020 <free>:
 8005020:	4b02      	ldr	r3, [pc, #8]	; (800502c <free+0xc>)
 8005022:	4601      	mov	r1, r0
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	f000 b819 	b.w	800505c <_free_r>
 800502a:	bf00      	nop
 800502c:	20000010 	.word	0x20000010

08005030 <memcpy>:
 8005030:	440a      	add	r2, r1
 8005032:	4291      	cmp	r1, r2
 8005034:	f100 33ff 	add.w	r3, r0, #4294967295
 8005038:	d100      	bne.n	800503c <memcpy+0xc>
 800503a:	4770      	bx	lr
 800503c:	b510      	push	{r4, lr}
 800503e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005042:	4291      	cmp	r1, r2
 8005044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005048:	d1f9      	bne.n	800503e <memcpy+0xe>
 800504a:	bd10      	pop	{r4, pc}

0800504c <memset>:
 800504c:	4603      	mov	r3, r0
 800504e:	4402      	add	r2, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	d100      	bne.n	8005056 <memset+0xa>
 8005054:	4770      	bx	lr
 8005056:	f803 1b01 	strb.w	r1, [r3], #1
 800505a:	e7f9      	b.n	8005050 <memset+0x4>

0800505c <_free_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4605      	mov	r5, r0
 8005060:	2900      	cmp	r1, #0
 8005062:	d040      	beq.n	80050e6 <_free_r+0x8a>
 8005064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005068:	1f0c      	subs	r4, r1, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	bfb8      	it	lt
 800506e:	18e4      	addlt	r4, r4, r3
 8005070:	f000 f900 	bl	8005274 <__malloc_lock>
 8005074:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <_free_r+0x8c>)
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	b933      	cbnz	r3, 8005088 <_free_r+0x2c>
 800507a:	6063      	str	r3, [r4, #4]
 800507c:	6014      	str	r4, [r2, #0]
 800507e:	4628      	mov	r0, r5
 8005080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005084:	f000 b8fc 	b.w	8005280 <__malloc_unlock>
 8005088:	42a3      	cmp	r3, r4
 800508a:	d908      	bls.n	800509e <_free_r+0x42>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	1821      	adds	r1, r4, r0
 8005090:	428b      	cmp	r3, r1
 8005092:	bf01      	itttt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	1809      	addeq	r1, r1, r0
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	e7ed      	b.n	800507a <_free_r+0x1e>
 800509e:	461a      	mov	r2, r3
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	b10b      	cbz	r3, 80050a8 <_free_r+0x4c>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d9fa      	bls.n	800509e <_free_r+0x42>
 80050a8:	6811      	ldr	r1, [r2, #0]
 80050aa:	1850      	adds	r0, r2, r1
 80050ac:	42a0      	cmp	r0, r4
 80050ae:	d10b      	bne.n	80050c8 <_free_r+0x6c>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	4401      	add	r1, r0
 80050b4:	1850      	adds	r0, r2, r1
 80050b6:	4283      	cmp	r3, r0
 80050b8:	6011      	str	r1, [r2, #0]
 80050ba:	d1e0      	bne.n	800507e <_free_r+0x22>
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4401      	add	r1, r0
 80050c2:	6011      	str	r1, [r2, #0]
 80050c4:	6053      	str	r3, [r2, #4]
 80050c6:	e7da      	b.n	800507e <_free_r+0x22>
 80050c8:	d902      	bls.n	80050d0 <_free_r+0x74>
 80050ca:	230c      	movs	r3, #12
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	e7d6      	b.n	800507e <_free_r+0x22>
 80050d0:	6820      	ldr	r0, [r4, #0]
 80050d2:	1821      	adds	r1, r4, r0
 80050d4:	428b      	cmp	r3, r1
 80050d6:	bf01      	itttt	eq
 80050d8:	6819      	ldreq	r1, [r3, #0]
 80050da:	685b      	ldreq	r3, [r3, #4]
 80050dc:	1809      	addeq	r1, r1, r0
 80050de:	6021      	streq	r1, [r4, #0]
 80050e0:	6063      	str	r3, [r4, #4]
 80050e2:	6054      	str	r4, [r2, #4]
 80050e4:	e7cb      	b.n	800507e <_free_r+0x22>
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20001a5c 	.word	0x20001a5c

080050ec <sbrk_aligned>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4e0e      	ldr	r6, [pc, #56]	; (8005128 <sbrk_aligned+0x3c>)
 80050f0:	460c      	mov	r4, r1
 80050f2:	6831      	ldr	r1, [r6, #0]
 80050f4:	4605      	mov	r5, r0
 80050f6:	b911      	cbnz	r1, 80050fe <sbrk_aligned+0x12>
 80050f8:	f000 f88c 	bl	8005214 <_sbrk_r>
 80050fc:	6030      	str	r0, [r6, #0]
 80050fe:	4621      	mov	r1, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 f887 	bl	8005214 <_sbrk_r>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d00a      	beq.n	8005120 <sbrk_aligned+0x34>
 800510a:	1cc4      	adds	r4, r0, #3
 800510c:	f024 0403 	bic.w	r4, r4, #3
 8005110:	42a0      	cmp	r0, r4
 8005112:	d007      	beq.n	8005124 <sbrk_aligned+0x38>
 8005114:	1a21      	subs	r1, r4, r0
 8005116:	4628      	mov	r0, r5
 8005118:	f000 f87c 	bl	8005214 <_sbrk_r>
 800511c:	3001      	adds	r0, #1
 800511e:	d101      	bne.n	8005124 <sbrk_aligned+0x38>
 8005120:	f04f 34ff 	mov.w	r4, #4294967295
 8005124:	4620      	mov	r0, r4
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	20001a60 	.word	0x20001a60

0800512c <_malloc_r>:
 800512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005130:	1ccd      	adds	r5, r1, #3
 8005132:	f025 0503 	bic.w	r5, r5, #3
 8005136:	3508      	adds	r5, #8
 8005138:	2d0c      	cmp	r5, #12
 800513a:	bf38      	it	cc
 800513c:	250c      	movcc	r5, #12
 800513e:	2d00      	cmp	r5, #0
 8005140:	4607      	mov	r7, r0
 8005142:	db01      	blt.n	8005148 <_malloc_r+0x1c>
 8005144:	42a9      	cmp	r1, r5
 8005146:	d905      	bls.n	8005154 <_malloc_r+0x28>
 8005148:	230c      	movs	r3, #12
 800514a:	2600      	movs	r6, #0
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4630      	mov	r0, r6
 8005150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005154:	4e2e      	ldr	r6, [pc, #184]	; (8005210 <_malloc_r+0xe4>)
 8005156:	f000 f88d 	bl	8005274 <__malloc_lock>
 800515a:	6833      	ldr	r3, [r6, #0]
 800515c:	461c      	mov	r4, r3
 800515e:	bb34      	cbnz	r4, 80051ae <_malloc_r+0x82>
 8005160:	4629      	mov	r1, r5
 8005162:	4638      	mov	r0, r7
 8005164:	f7ff ffc2 	bl	80050ec <sbrk_aligned>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	4604      	mov	r4, r0
 800516c:	d14d      	bne.n	800520a <_malloc_r+0xde>
 800516e:	6834      	ldr	r4, [r6, #0]
 8005170:	4626      	mov	r6, r4
 8005172:	2e00      	cmp	r6, #0
 8005174:	d140      	bne.n	80051f8 <_malloc_r+0xcc>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	4631      	mov	r1, r6
 800517a:	4638      	mov	r0, r7
 800517c:	eb04 0803 	add.w	r8, r4, r3
 8005180:	f000 f848 	bl	8005214 <_sbrk_r>
 8005184:	4580      	cmp	r8, r0
 8005186:	d13a      	bne.n	80051fe <_malloc_r+0xd2>
 8005188:	6821      	ldr	r1, [r4, #0]
 800518a:	3503      	adds	r5, #3
 800518c:	1a6d      	subs	r5, r5, r1
 800518e:	f025 0503 	bic.w	r5, r5, #3
 8005192:	3508      	adds	r5, #8
 8005194:	2d0c      	cmp	r5, #12
 8005196:	bf38      	it	cc
 8005198:	250c      	movcc	r5, #12
 800519a:	4638      	mov	r0, r7
 800519c:	4629      	mov	r1, r5
 800519e:	f7ff ffa5 	bl	80050ec <sbrk_aligned>
 80051a2:	3001      	adds	r0, #1
 80051a4:	d02b      	beq.n	80051fe <_malloc_r+0xd2>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	442b      	add	r3, r5
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	e00e      	b.n	80051cc <_malloc_r+0xa0>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	1b52      	subs	r2, r2, r5
 80051b2:	d41e      	bmi.n	80051f2 <_malloc_r+0xc6>
 80051b4:	2a0b      	cmp	r2, #11
 80051b6:	d916      	bls.n	80051e6 <_malloc_r+0xba>
 80051b8:	1961      	adds	r1, r4, r5
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	6025      	str	r5, [r4, #0]
 80051be:	bf18      	it	ne
 80051c0:	6059      	strne	r1, [r3, #4]
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	bf08      	it	eq
 80051c6:	6031      	streq	r1, [r6, #0]
 80051c8:	5162      	str	r2, [r4, r5]
 80051ca:	604b      	str	r3, [r1, #4]
 80051cc:	4638      	mov	r0, r7
 80051ce:	f104 060b 	add.w	r6, r4, #11
 80051d2:	f000 f855 	bl	8005280 <__malloc_unlock>
 80051d6:	f026 0607 	bic.w	r6, r6, #7
 80051da:	1d23      	adds	r3, r4, #4
 80051dc:	1af2      	subs	r2, r6, r3
 80051de:	d0b6      	beq.n	800514e <_malloc_r+0x22>
 80051e0:	1b9b      	subs	r3, r3, r6
 80051e2:	50a3      	str	r3, [r4, r2]
 80051e4:	e7b3      	b.n	800514e <_malloc_r+0x22>
 80051e6:	6862      	ldr	r2, [r4, #4]
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	bf0c      	ite	eq
 80051ec:	6032      	streq	r2, [r6, #0]
 80051ee:	605a      	strne	r2, [r3, #4]
 80051f0:	e7ec      	b.n	80051cc <_malloc_r+0xa0>
 80051f2:	4623      	mov	r3, r4
 80051f4:	6864      	ldr	r4, [r4, #4]
 80051f6:	e7b2      	b.n	800515e <_malloc_r+0x32>
 80051f8:	4634      	mov	r4, r6
 80051fa:	6876      	ldr	r6, [r6, #4]
 80051fc:	e7b9      	b.n	8005172 <_malloc_r+0x46>
 80051fe:	230c      	movs	r3, #12
 8005200:	4638      	mov	r0, r7
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	f000 f83c 	bl	8005280 <__malloc_unlock>
 8005208:	e7a1      	b.n	800514e <_malloc_r+0x22>
 800520a:	6025      	str	r5, [r4, #0]
 800520c:	e7de      	b.n	80051cc <_malloc_r+0xa0>
 800520e:	bf00      	nop
 8005210:	20001a5c 	.word	0x20001a5c

08005214 <_sbrk_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	2300      	movs	r3, #0
 8005218:	4d05      	ldr	r5, [pc, #20]	; (8005230 <_sbrk_r+0x1c>)
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fb fc78 	bl	8000b14 <_sbrk>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_sbrk_r+0x1a>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_sbrk_r+0x1a>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20001a64 	.word	0x20001a64

08005234 <siprintf>:
 8005234:	b40e      	push	{r1, r2, r3}
 8005236:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800523a:	b500      	push	{lr}
 800523c:	b09c      	sub	sp, #112	; 0x70
 800523e:	ab1d      	add	r3, sp, #116	; 0x74
 8005240:	9002      	str	r0, [sp, #8]
 8005242:	9006      	str	r0, [sp, #24]
 8005244:	9107      	str	r1, [sp, #28]
 8005246:	9104      	str	r1, [sp, #16]
 8005248:	4808      	ldr	r0, [pc, #32]	; (800526c <siprintf+0x38>)
 800524a:	4909      	ldr	r1, [pc, #36]	; (8005270 <siprintf+0x3c>)
 800524c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005250:	9105      	str	r1, [sp, #20]
 8005252:	6800      	ldr	r0, [r0, #0]
 8005254:	a902      	add	r1, sp, #8
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	f000 f874 	bl	8005344 <_svfiprintf_r>
 800525c:	2200      	movs	r2, #0
 800525e:	9b02      	ldr	r3, [sp, #8]
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	b01c      	add	sp, #112	; 0x70
 8005264:	f85d eb04 	ldr.w	lr, [sp], #4
 8005268:	b003      	add	sp, #12
 800526a:	4770      	bx	lr
 800526c:	20000010 	.word	0x20000010
 8005270:	ffff0208 	.word	0xffff0208

08005274 <__malloc_lock>:
 8005274:	4801      	ldr	r0, [pc, #4]	; (800527c <__malloc_lock+0x8>)
 8005276:	f000 bafb 	b.w	8005870 <__retarget_lock_acquire_recursive>
 800527a:	bf00      	nop
 800527c:	20001a68 	.word	0x20001a68

08005280 <__malloc_unlock>:
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <__malloc_unlock+0x8>)
 8005282:	f000 baf6 	b.w	8005872 <__retarget_lock_release_recursive>
 8005286:	bf00      	nop
 8005288:	20001a68 	.word	0x20001a68

0800528c <__ssputs_r>:
 800528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	688e      	ldr	r6, [r1, #8]
 8005292:	4682      	mov	sl, r0
 8005294:	429e      	cmp	r6, r3
 8005296:	460c      	mov	r4, r1
 8005298:	4690      	mov	r8, r2
 800529a:	461f      	mov	r7, r3
 800529c:	d838      	bhi.n	8005310 <__ssputs_r+0x84>
 800529e:	898a      	ldrh	r2, [r1, #12]
 80052a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a4:	d032      	beq.n	800530c <__ssputs_r+0x80>
 80052a6:	6825      	ldr	r5, [r4, #0]
 80052a8:	6909      	ldr	r1, [r1, #16]
 80052aa:	3301      	adds	r3, #1
 80052ac:	eba5 0901 	sub.w	r9, r5, r1
 80052b0:	6965      	ldr	r5, [r4, #20]
 80052b2:	444b      	add	r3, r9
 80052b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052bc:	106d      	asrs	r5, r5, #1
 80052be:	429d      	cmp	r5, r3
 80052c0:	bf38      	it	cc
 80052c2:	461d      	movcc	r5, r3
 80052c4:	0553      	lsls	r3, r2, #21
 80052c6:	d531      	bpl.n	800532c <__ssputs_r+0xa0>
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7ff ff2f 	bl	800512c <_malloc_r>
 80052ce:	4606      	mov	r6, r0
 80052d0:	b950      	cbnz	r0, 80052e8 <__ssputs_r+0x5c>
 80052d2:	230c      	movs	r3, #12
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	f8ca 3000 	str.w	r3, [sl]
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e8:	464a      	mov	r2, r9
 80052ea:	6921      	ldr	r1, [r4, #16]
 80052ec:	f7ff fea0 	bl	8005030 <memcpy>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	6126      	str	r6, [r4, #16]
 80052fe:	444e      	add	r6, r9
 8005300:	6026      	str	r6, [r4, #0]
 8005302:	463e      	mov	r6, r7
 8005304:	6165      	str	r5, [r4, #20]
 8005306:	eba5 0509 	sub.w	r5, r5, r9
 800530a:	60a5      	str	r5, [r4, #8]
 800530c:	42be      	cmp	r6, r7
 800530e:	d900      	bls.n	8005312 <__ssputs_r+0x86>
 8005310:	463e      	mov	r6, r7
 8005312:	4632      	mov	r2, r6
 8005314:	4641      	mov	r1, r8
 8005316:	6820      	ldr	r0, [r4, #0]
 8005318:	f000 faba 	bl	8005890 <memmove>
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	2000      	movs	r0, #0
 8005320:	1b9b      	subs	r3, r3, r6
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	4433      	add	r3, r6
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	e7db      	b.n	80052e4 <__ssputs_r+0x58>
 800532c:	462a      	mov	r2, r5
 800532e:	f000 fac9 	bl	80058c4 <_realloc_r>
 8005332:	4606      	mov	r6, r0
 8005334:	2800      	cmp	r0, #0
 8005336:	d1e1      	bne.n	80052fc <__ssputs_r+0x70>
 8005338:	4650      	mov	r0, sl
 800533a:	6921      	ldr	r1, [r4, #16]
 800533c:	f7ff fe8e 	bl	800505c <_free_r>
 8005340:	e7c7      	b.n	80052d2 <__ssputs_r+0x46>
	...

08005344 <_svfiprintf_r>:
 8005344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005348:	4698      	mov	r8, r3
 800534a:	898b      	ldrh	r3, [r1, #12]
 800534c:	4607      	mov	r7, r0
 800534e:	061b      	lsls	r3, r3, #24
 8005350:	460d      	mov	r5, r1
 8005352:	4614      	mov	r4, r2
 8005354:	b09d      	sub	sp, #116	; 0x74
 8005356:	d50e      	bpl.n	8005376 <_svfiprintf_r+0x32>
 8005358:	690b      	ldr	r3, [r1, #16]
 800535a:	b963      	cbnz	r3, 8005376 <_svfiprintf_r+0x32>
 800535c:	2140      	movs	r1, #64	; 0x40
 800535e:	f7ff fee5 	bl	800512c <_malloc_r>
 8005362:	6028      	str	r0, [r5, #0]
 8005364:	6128      	str	r0, [r5, #16]
 8005366:	b920      	cbnz	r0, 8005372 <_svfiprintf_r+0x2e>
 8005368:	230c      	movs	r3, #12
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	f04f 30ff 	mov.w	r0, #4294967295
 8005370:	e0d1      	b.n	8005516 <_svfiprintf_r+0x1d2>
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	616b      	str	r3, [r5, #20]
 8005376:	2300      	movs	r3, #0
 8005378:	9309      	str	r3, [sp, #36]	; 0x24
 800537a:	2320      	movs	r3, #32
 800537c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005380:	2330      	movs	r3, #48	; 0x30
 8005382:	f04f 0901 	mov.w	r9, #1
 8005386:	f8cd 800c 	str.w	r8, [sp, #12]
 800538a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005530 <_svfiprintf_r+0x1ec>
 800538e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005392:	4623      	mov	r3, r4
 8005394:	469a      	mov	sl, r3
 8005396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800539a:	b10a      	cbz	r2, 80053a0 <_svfiprintf_r+0x5c>
 800539c:	2a25      	cmp	r2, #37	; 0x25
 800539e:	d1f9      	bne.n	8005394 <_svfiprintf_r+0x50>
 80053a0:	ebba 0b04 	subs.w	fp, sl, r4
 80053a4:	d00b      	beq.n	80053be <_svfiprintf_r+0x7a>
 80053a6:	465b      	mov	r3, fp
 80053a8:	4622      	mov	r2, r4
 80053aa:	4629      	mov	r1, r5
 80053ac:	4638      	mov	r0, r7
 80053ae:	f7ff ff6d 	bl	800528c <__ssputs_r>
 80053b2:	3001      	adds	r0, #1
 80053b4:	f000 80aa 	beq.w	800550c <_svfiprintf_r+0x1c8>
 80053b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ba:	445a      	add	r2, fp
 80053bc:	9209      	str	r2, [sp, #36]	; 0x24
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80a2 	beq.w	800550c <_svfiprintf_r+0x1c8>
 80053c8:	2300      	movs	r3, #0
 80053ca:	f04f 32ff 	mov.w	r2, #4294967295
 80053ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053d2:	f10a 0a01 	add.w	sl, sl, #1
 80053d6:	9304      	str	r3, [sp, #16]
 80053d8:	9307      	str	r3, [sp, #28]
 80053da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053de:	931a      	str	r3, [sp, #104]	; 0x68
 80053e0:	4654      	mov	r4, sl
 80053e2:	2205      	movs	r2, #5
 80053e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e8:	4851      	ldr	r0, [pc, #324]	; (8005530 <_svfiprintf_r+0x1ec>)
 80053ea:	f000 fa43 	bl	8005874 <memchr>
 80053ee:	9a04      	ldr	r2, [sp, #16]
 80053f0:	b9d8      	cbnz	r0, 800542a <_svfiprintf_r+0xe6>
 80053f2:	06d0      	lsls	r0, r2, #27
 80053f4:	bf44      	itt	mi
 80053f6:	2320      	movmi	r3, #32
 80053f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fc:	0711      	lsls	r1, r2, #28
 80053fe:	bf44      	itt	mi
 8005400:	232b      	movmi	r3, #43	; 0x2b
 8005402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005406:	f89a 3000 	ldrb.w	r3, [sl]
 800540a:	2b2a      	cmp	r3, #42	; 0x2a
 800540c:	d015      	beq.n	800543a <_svfiprintf_r+0xf6>
 800540e:	4654      	mov	r4, sl
 8005410:	2000      	movs	r0, #0
 8005412:	f04f 0c0a 	mov.w	ip, #10
 8005416:	9a07      	ldr	r2, [sp, #28]
 8005418:	4621      	mov	r1, r4
 800541a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800541e:	3b30      	subs	r3, #48	; 0x30
 8005420:	2b09      	cmp	r3, #9
 8005422:	d94e      	bls.n	80054c2 <_svfiprintf_r+0x17e>
 8005424:	b1b0      	cbz	r0, 8005454 <_svfiprintf_r+0x110>
 8005426:	9207      	str	r2, [sp, #28]
 8005428:	e014      	b.n	8005454 <_svfiprintf_r+0x110>
 800542a:	eba0 0308 	sub.w	r3, r0, r8
 800542e:	fa09 f303 	lsl.w	r3, r9, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	46a2      	mov	sl, r4
 8005436:	9304      	str	r3, [sp, #16]
 8005438:	e7d2      	b.n	80053e0 <_svfiprintf_r+0x9c>
 800543a:	9b03      	ldr	r3, [sp, #12]
 800543c:	1d19      	adds	r1, r3, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	9103      	str	r1, [sp, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	bfbb      	ittet	lt
 8005446:	425b      	neglt	r3, r3
 8005448:	f042 0202 	orrlt.w	r2, r2, #2
 800544c:	9307      	strge	r3, [sp, #28]
 800544e:	9307      	strlt	r3, [sp, #28]
 8005450:	bfb8      	it	lt
 8005452:	9204      	strlt	r2, [sp, #16]
 8005454:	7823      	ldrb	r3, [r4, #0]
 8005456:	2b2e      	cmp	r3, #46	; 0x2e
 8005458:	d10c      	bne.n	8005474 <_svfiprintf_r+0x130>
 800545a:	7863      	ldrb	r3, [r4, #1]
 800545c:	2b2a      	cmp	r3, #42	; 0x2a
 800545e:	d135      	bne.n	80054cc <_svfiprintf_r+0x188>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	3402      	adds	r4, #2
 8005464:	1d1a      	adds	r2, r3, #4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	9203      	str	r2, [sp, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	bfb8      	it	lt
 800546e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005534 <_svfiprintf_r+0x1f0>
 8005478:	2203      	movs	r2, #3
 800547a:	4650      	mov	r0, sl
 800547c:	7821      	ldrb	r1, [r4, #0]
 800547e:	f000 f9f9 	bl	8005874 <memchr>
 8005482:	b140      	cbz	r0, 8005496 <_svfiprintf_r+0x152>
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	eba0 000a 	sub.w	r0, r0, sl
 800548a:	fa03 f000 	lsl.w	r0, r3, r0
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	3401      	adds	r4, #1
 8005492:	4303      	orrs	r3, r0
 8005494:	9304      	str	r3, [sp, #16]
 8005496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800549a:	2206      	movs	r2, #6
 800549c:	4826      	ldr	r0, [pc, #152]	; (8005538 <_svfiprintf_r+0x1f4>)
 800549e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054a2:	f000 f9e7 	bl	8005874 <memchr>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d038      	beq.n	800551c <_svfiprintf_r+0x1d8>
 80054aa:	4b24      	ldr	r3, [pc, #144]	; (800553c <_svfiprintf_r+0x1f8>)
 80054ac:	bb1b      	cbnz	r3, 80054f6 <_svfiprintf_r+0x1b2>
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	3307      	adds	r3, #7
 80054b2:	f023 0307 	bic.w	r3, r3, #7
 80054b6:	3308      	adds	r3, #8
 80054b8:	9303      	str	r3, [sp, #12]
 80054ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054bc:	4433      	add	r3, r6
 80054be:	9309      	str	r3, [sp, #36]	; 0x24
 80054c0:	e767      	b.n	8005392 <_svfiprintf_r+0x4e>
 80054c2:	460c      	mov	r4, r1
 80054c4:	2001      	movs	r0, #1
 80054c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ca:	e7a5      	b.n	8005418 <_svfiprintf_r+0xd4>
 80054cc:	2300      	movs	r3, #0
 80054ce:	f04f 0c0a 	mov.w	ip, #10
 80054d2:	4619      	mov	r1, r3
 80054d4:	3401      	adds	r4, #1
 80054d6:	9305      	str	r3, [sp, #20]
 80054d8:	4620      	mov	r0, r4
 80054da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054de:	3a30      	subs	r2, #48	; 0x30
 80054e0:	2a09      	cmp	r2, #9
 80054e2:	d903      	bls.n	80054ec <_svfiprintf_r+0x1a8>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0c5      	beq.n	8005474 <_svfiprintf_r+0x130>
 80054e8:	9105      	str	r1, [sp, #20]
 80054ea:	e7c3      	b.n	8005474 <_svfiprintf_r+0x130>
 80054ec:	4604      	mov	r4, r0
 80054ee:	2301      	movs	r3, #1
 80054f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f4:	e7f0      	b.n	80054d8 <_svfiprintf_r+0x194>
 80054f6:	ab03      	add	r3, sp, #12
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	462a      	mov	r2, r5
 80054fc:	4638      	mov	r0, r7
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <_svfiprintf_r+0x1fc>)
 8005500:	a904      	add	r1, sp, #16
 8005502:	f3af 8000 	nop.w
 8005506:	1c42      	adds	r2, r0, #1
 8005508:	4606      	mov	r6, r0
 800550a:	d1d6      	bne.n	80054ba <_svfiprintf_r+0x176>
 800550c:	89ab      	ldrh	r3, [r5, #12]
 800550e:	065b      	lsls	r3, r3, #25
 8005510:	f53f af2c 	bmi.w	800536c <_svfiprintf_r+0x28>
 8005514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005516:	b01d      	add	sp, #116	; 0x74
 8005518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551c:	ab03      	add	r3, sp, #12
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	462a      	mov	r2, r5
 8005522:	4638      	mov	r0, r7
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_svfiprintf_r+0x1fc>)
 8005526:	a904      	add	r1, sp, #16
 8005528:	f000 f87c 	bl	8005624 <_printf_i>
 800552c:	e7eb      	b.n	8005506 <_svfiprintf_r+0x1c2>
 800552e:	bf00      	nop
 8005530:	08005a4a 	.word	0x08005a4a
 8005534:	08005a50 	.word	0x08005a50
 8005538:	08005a54 	.word	0x08005a54
 800553c:	00000000 	.word	0x00000000
 8005540:	0800528d 	.word	0x0800528d

08005544 <_printf_common>:
 8005544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	4616      	mov	r6, r2
 800554a:	4699      	mov	r9, r3
 800554c:	688a      	ldr	r2, [r1, #8]
 800554e:	690b      	ldr	r3, [r1, #16]
 8005550:	4607      	mov	r7, r0
 8005552:	4293      	cmp	r3, r2
 8005554:	bfb8      	it	lt
 8005556:	4613      	movlt	r3, r2
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800555e:	460c      	mov	r4, r1
 8005560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005564:	b10a      	cbz	r2, 800556a <_printf_common+0x26>
 8005566:	3301      	adds	r3, #1
 8005568:	6033      	str	r3, [r6, #0]
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	0699      	lsls	r1, r3, #26
 800556e:	bf42      	ittt	mi
 8005570:	6833      	ldrmi	r3, [r6, #0]
 8005572:	3302      	addmi	r3, #2
 8005574:	6033      	strmi	r3, [r6, #0]
 8005576:	6825      	ldr	r5, [r4, #0]
 8005578:	f015 0506 	ands.w	r5, r5, #6
 800557c:	d106      	bne.n	800558c <_printf_common+0x48>
 800557e:	f104 0a19 	add.w	sl, r4, #25
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	6832      	ldr	r2, [r6, #0]
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	42ab      	cmp	r3, r5
 800558a:	dc28      	bgt.n	80055de <_printf_common+0x9a>
 800558c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005590:	1e13      	subs	r3, r2, #0
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	bf18      	it	ne
 8005596:	2301      	movne	r3, #1
 8005598:	0692      	lsls	r2, r2, #26
 800559a:	d42d      	bmi.n	80055f8 <_printf_common+0xb4>
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a4:	47c0      	blx	r8
 80055a6:	3001      	adds	r0, #1
 80055a8:	d020      	beq.n	80055ec <_printf_common+0xa8>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	68e5      	ldr	r5, [r4, #12]
 80055ae:	f003 0306 	and.w	r3, r3, #6
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	bf18      	it	ne
 80055b6:	2500      	movne	r5, #0
 80055b8:	6832      	ldr	r2, [r6, #0]
 80055ba:	f04f 0600 	mov.w	r6, #0
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	bf08      	it	eq
 80055c2:	1aad      	subeq	r5, r5, r2
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	bf08      	it	eq
 80055c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055cc:	4293      	cmp	r3, r2
 80055ce:	bfc4      	itt	gt
 80055d0:	1a9b      	subgt	r3, r3, r2
 80055d2:	18ed      	addgt	r5, r5, r3
 80055d4:	341a      	adds	r4, #26
 80055d6:	42b5      	cmp	r5, r6
 80055d8:	d11a      	bne.n	8005610 <_printf_common+0xcc>
 80055da:	2000      	movs	r0, #0
 80055dc:	e008      	b.n	80055f0 <_printf_common+0xac>
 80055de:	2301      	movs	r3, #1
 80055e0:	4652      	mov	r2, sl
 80055e2:	4649      	mov	r1, r9
 80055e4:	4638      	mov	r0, r7
 80055e6:	47c0      	blx	r8
 80055e8:	3001      	adds	r0, #1
 80055ea:	d103      	bne.n	80055f4 <_printf_common+0xb0>
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f4:	3501      	adds	r5, #1
 80055f6:	e7c4      	b.n	8005582 <_printf_common+0x3e>
 80055f8:	2030      	movs	r0, #48	; 0x30
 80055fa:	18e1      	adds	r1, r4, r3
 80055fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005606:	4422      	add	r2, r4
 8005608:	3302      	adds	r3, #2
 800560a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800560e:	e7c5      	b.n	800559c <_printf_common+0x58>
 8005610:	2301      	movs	r3, #1
 8005612:	4622      	mov	r2, r4
 8005614:	4649      	mov	r1, r9
 8005616:	4638      	mov	r0, r7
 8005618:	47c0      	blx	r8
 800561a:	3001      	adds	r0, #1
 800561c:	d0e6      	beq.n	80055ec <_printf_common+0xa8>
 800561e:	3601      	adds	r6, #1
 8005620:	e7d9      	b.n	80055d6 <_printf_common+0x92>
	...

08005624 <_printf_i>:
 8005624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	7e0f      	ldrb	r7, [r1, #24]
 800562a:	4691      	mov	r9, r2
 800562c:	2f78      	cmp	r7, #120	; 0x78
 800562e:	4680      	mov	r8, r0
 8005630:	460c      	mov	r4, r1
 8005632:	469a      	mov	sl, r3
 8005634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800563a:	d807      	bhi.n	800564c <_printf_i+0x28>
 800563c:	2f62      	cmp	r7, #98	; 0x62
 800563e:	d80a      	bhi.n	8005656 <_printf_i+0x32>
 8005640:	2f00      	cmp	r7, #0
 8005642:	f000 80d9 	beq.w	80057f8 <_printf_i+0x1d4>
 8005646:	2f58      	cmp	r7, #88	; 0x58
 8005648:	f000 80a4 	beq.w	8005794 <_printf_i+0x170>
 800564c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005654:	e03a      	b.n	80056cc <_printf_i+0xa8>
 8005656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800565a:	2b15      	cmp	r3, #21
 800565c:	d8f6      	bhi.n	800564c <_printf_i+0x28>
 800565e:	a101      	add	r1, pc, #4	; (adr r1, 8005664 <_printf_i+0x40>)
 8005660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056d1 	.word	0x080056d1
 800566c:	0800564d 	.word	0x0800564d
 8005670:	0800564d 	.word	0x0800564d
 8005674:	0800564d 	.word	0x0800564d
 8005678:	0800564d 	.word	0x0800564d
 800567c:	080056d1 	.word	0x080056d1
 8005680:	0800564d 	.word	0x0800564d
 8005684:	0800564d 	.word	0x0800564d
 8005688:	0800564d 	.word	0x0800564d
 800568c:	0800564d 	.word	0x0800564d
 8005690:	080057df 	.word	0x080057df
 8005694:	08005701 	.word	0x08005701
 8005698:	080057c1 	.word	0x080057c1
 800569c:	0800564d 	.word	0x0800564d
 80056a0:	0800564d 	.word	0x0800564d
 80056a4:	08005801 	.word	0x08005801
 80056a8:	0800564d 	.word	0x0800564d
 80056ac:	08005701 	.word	0x08005701
 80056b0:	0800564d 	.word	0x0800564d
 80056b4:	0800564d 	.word	0x0800564d
 80056b8:	080057c9 	.word	0x080057c9
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	1d1a      	adds	r2, r3, #4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	602a      	str	r2, [r5, #0]
 80056c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0a4      	b.n	800581a <_printf_i+0x1f6>
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	6829      	ldr	r1, [r5, #0]
 80056d4:	0606      	lsls	r6, r0, #24
 80056d6:	f101 0304 	add.w	r3, r1, #4
 80056da:	d50a      	bpl.n	80056f2 <_printf_i+0xce>
 80056dc:	680e      	ldr	r6, [r1, #0]
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	2e00      	cmp	r6, #0
 80056e2:	da03      	bge.n	80056ec <_printf_i+0xc8>
 80056e4:	232d      	movs	r3, #45	; 0x2d
 80056e6:	4276      	negs	r6, r6
 80056e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ec:	230a      	movs	r3, #10
 80056ee:	485e      	ldr	r0, [pc, #376]	; (8005868 <_printf_i+0x244>)
 80056f0:	e019      	b.n	8005726 <_printf_i+0x102>
 80056f2:	680e      	ldr	r6, [r1, #0]
 80056f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	bf18      	it	ne
 80056fc:	b236      	sxthne	r6, r6
 80056fe:	e7ef      	b.n	80056e0 <_printf_i+0xbc>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	6820      	ldr	r0, [r4, #0]
 8005704:	1d19      	adds	r1, r3, #4
 8005706:	6029      	str	r1, [r5, #0]
 8005708:	0601      	lsls	r1, r0, #24
 800570a:	d501      	bpl.n	8005710 <_printf_i+0xec>
 800570c:	681e      	ldr	r6, [r3, #0]
 800570e:	e002      	b.n	8005716 <_printf_i+0xf2>
 8005710:	0646      	lsls	r6, r0, #25
 8005712:	d5fb      	bpl.n	800570c <_printf_i+0xe8>
 8005714:	881e      	ldrh	r6, [r3, #0]
 8005716:	2f6f      	cmp	r7, #111	; 0x6f
 8005718:	bf0c      	ite	eq
 800571a:	2308      	moveq	r3, #8
 800571c:	230a      	movne	r3, #10
 800571e:	4852      	ldr	r0, [pc, #328]	; (8005868 <_printf_i+0x244>)
 8005720:	2100      	movs	r1, #0
 8005722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005726:	6865      	ldr	r5, [r4, #4]
 8005728:	2d00      	cmp	r5, #0
 800572a:	bfa8      	it	ge
 800572c:	6821      	ldrge	r1, [r4, #0]
 800572e:	60a5      	str	r5, [r4, #8]
 8005730:	bfa4      	itt	ge
 8005732:	f021 0104 	bicge.w	r1, r1, #4
 8005736:	6021      	strge	r1, [r4, #0]
 8005738:	b90e      	cbnz	r6, 800573e <_printf_i+0x11a>
 800573a:	2d00      	cmp	r5, #0
 800573c:	d04d      	beq.n	80057da <_printf_i+0x1b6>
 800573e:	4615      	mov	r5, r2
 8005740:	fbb6 f1f3 	udiv	r1, r6, r3
 8005744:	fb03 6711 	mls	r7, r3, r1, r6
 8005748:	5dc7      	ldrb	r7, [r0, r7]
 800574a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800574e:	4637      	mov	r7, r6
 8005750:	42bb      	cmp	r3, r7
 8005752:	460e      	mov	r6, r1
 8005754:	d9f4      	bls.n	8005740 <_printf_i+0x11c>
 8005756:	2b08      	cmp	r3, #8
 8005758:	d10b      	bne.n	8005772 <_printf_i+0x14e>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	07de      	lsls	r6, r3, #31
 800575e:	d508      	bpl.n	8005772 <_printf_i+0x14e>
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	6861      	ldr	r1, [r4, #4]
 8005764:	4299      	cmp	r1, r3
 8005766:	bfde      	ittt	le
 8005768:	2330      	movle	r3, #48	; 0x30
 800576a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800576e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005772:	1b52      	subs	r2, r2, r5
 8005774:	6122      	str	r2, [r4, #16]
 8005776:	464b      	mov	r3, r9
 8005778:	4621      	mov	r1, r4
 800577a:	4640      	mov	r0, r8
 800577c:	f8cd a000 	str.w	sl, [sp]
 8005780:	aa03      	add	r2, sp, #12
 8005782:	f7ff fedf 	bl	8005544 <_printf_common>
 8005786:	3001      	adds	r0, #1
 8005788:	d14c      	bne.n	8005824 <_printf_i+0x200>
 800578a:	f04f 30ff 	mov.w	r0, #4294967295
 800578e:	b004      	add	sp, #16
 8005790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005794:	4834      	ldr	r0, [pc, #208]	; (8005868 <_printf_i+0x244>)
 8005796:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800579a:	6829      	ldr	r1, [r5, #0]
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	f851 6b04 	ldr.w	r6, [r1], #4
 80057a2:	6029      	str	r1, [r5, #0]
 80057a4:	061d      	lsls	r5, r3, #24
 80057a6:	d514      	bpl.n	80057d2 <_printf_i+0x1ae>
 80057a8:	07df      	lsls	r7, r3, #31
 80057aa:	bf44      	itt	mi
 80057ac:	f043 0320 	orrmi.w	r3, r3, #32
 80057b0:	6023      	strmi	r3, [r4, #0]
 80057b2:	b91e      	cbnz	r6, 80057bc <_printf_i+0x198>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f023 0320 	bic.w	r3, r3, #32
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	2310      	movs	r3, #16
 80057be:	e7af      	b.n	8005720 <_printf_i+0xfc>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	f043 0320 	orr.w	r3, r3, #32
 80057c6:	6023      	str	r3, [r4, #0]
 80057c8:	2378      	movs	r3, #120	; 0x78
 80057ca:	4828      	ldr	r0, [pc, #160]	; (800586c <_printf_i+0x248>)
 80057cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057d0:	e7e3      	b.n	800579a <_printf_i+0x176>
 80057d2:	0659      	lsls	r1, r3, #25
 80057d4:	bf48      	it	mi
 80057d6:	b2b6      	uxthmi	r6, r6
 80057d8:	e7e6      	b.n	80057a8 <_printf_i+0x184>
 80057da:	4615      	mov	r5, r2
 80057dc:	e7bb      	b.n	8005756 <_printf_i+0x132>
 80057de:	682b      	ldr	r3, [r5, #0]
 80057e0:	6826      	ldr	r6, [r4, #0]
 80057e2:	1d18      	adds	r0, r3, #4
 80057e4:	6961      	ldr	r1, [r4, #20]
 80057e6:	6028      	str	r0, [r5, #0]
 80057e8:	0635      	lsls	r5, r6, #24
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	d501      	bpl.n	80057f2 <_printf_i+0x1ce>
 80057ee:	6019      	str	r1, [r3, #0]
 80057f0:	e002      	b.n	80057f8 <_printf_i+0x1d4>
 80057f2:	0670      	lsls	r0, r6, #25
 80057f4:	d5fb      	bpl.n	80057ee <_printf_i+0x1ca>
 80057f6:	8019      	strh	r1, [r3, #0]
 80057f8:	2300      	movs	r3, #0
 80057fa:	4615      	mov	r5, r2
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	e7ba      	b.n	8005776 <_printf_i+0x152>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	2100      	movs	r1, #0
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	681d      	ldr	r5, [r3, #0]
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	4628      	mov	r0, r5
 800580e:	f000 f831 	bl	8005874 <memchr>
 8005812:	b108      	cbz	r0, 8005818 <_printf_i+0x1f4>
 8005814:	1b40      	subs	r0, r0, r5
 8005816:	6060      	str	r0, [r4, #4]
 8005818:	6863      	ldr	r3, [r4, #4]
 800581a:	6123      	str	r3, [r4, #16]
 800581c:	2300      	movs	r3, #0
 800581e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005822:	e7a8      	b.n	8005776 <_printf_i+0x152>
 8005824:	462a      	mov	r2, r5
 8005826:	4649      	mov	r1, r9
 8005828:	4640      	mov	r0, r8
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	47d0      	blx	sl
 800582e:	3001      	adds	r0, #1
 8005830:	d0ab      	beq.n	800578a <_printf_i+0x166>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	079b      	lsls	r3, r3, #30
 8005836:	d413      	bmi.n	8005860 <_printf_i+0x23c>
 8005838:	68e0      	ldr	r0, [r4, #12]
 800583a:	9b03      	ldr	r3, [sp, #12]
 800583c:	4298      	cmp	r0, r3
 800583e:	bfb8      	it	lt
 8005840:	4618      	movlt	r0, r3
 8005842:	e7a4      	b.n	800578e <_printf_i+0x16a>
 8005844:	2301      	movs	r3, #1
 8005846:	4632      	mov	r2, r6
 8005848:	4649      	mov	r1, r9
 800584a:	4640      	mov	r0, r8
 800584c:	47d0      	blx	sl
 800584e:	3001      	adds	r0, #1
 8005850:	d09b      	beq.n	800578a <_printf_i+0x166>
 8005852:	3501      	adds	r5, #1
 8005854:	68e3      	ldr	r3, [r4, #12]
 8005856:	9903      	ldr	r1, [sp, #12]
 8005858:	1a5b      	subs	r3, r3, r1
 800585a:	42ab      	cmp	r3, r5
 800585c:	dcf2      	bgt.n	8005844 <_printf_i+0x220>
 800585e:	e7eb      	b.n	8005838 <_printf_i+0x214>
 8005860:	2500      	movs	r5, #0
 8005862:	f104 0619 	add.w	r6, r4, #25
 8005866:	e7f5      	b.n	8005854 <_printf_i+0x230>
 8005868:	08005a5b 	.word	0x08005a5b
 800586c:	08005a6c 	.word	0x08005a6c

08005870 <__retarget_lock_acquire_recursive>:
 8005870:	4770      	bx	lr

08005872 <__retarget_lock_release_recursive>:
 8005872:	4770      	bx	lr

08005874 <memchr>:
 8005874:	4603      	mov	r3, r0
 8005876:	b510      	push	{r4, lr}
 8005878:	b2c9      	uxtb	r1, r1
 800587a:	4402      	add	r2, r0
 800587c:	4293      	cmp	r3, r2
 800587e:	4618      	mov	r0, r3
 8005880:	d101      	bne.n	8005886 <memchr+0x12>
 8005882:	2000      	movs	r0, #0
 8005884:	e003      	b.n	800588e <memchr+0x1a>
 8005886:	7804      	ldrb	r4, [r0, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	428c      	cmp	r4, r1
 800588c:	d1f6      	bne.n	800587c <memchr+0x8>
 800588e:	bd10      	pop	{r4, pc}

08005890 <memmove>:
 8005890:	4288      	cmp	r0, r1
 8005892:	b510      	push	{r4, lr}
 8005894:	eb01 0402 	add.w	r4, r1, r2
 8005898:	d902      	bls.n	80058a0 <memmove+0x10>
 800589a:	4284      	cmp	r4, r0
 800589c:	4623      	mov	r3, r4
 800589e:	d807      	bhi.n	80058b0 <memmove+0x20>
 80058a0:	1e43      	subs	r3, r0, #1
 80058a2:	42a1      	cmp	r1, r4
 80058a4:	d008      	beq.n	80058b8 <memmove+0x28>
 80058a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ae:	e7f8      	b.n	80058a2 <memmove+0x12>
 80058b0:	4601      	mov	r1, r0
 80058b2:	4402      	add	r2, r0
 80058b4:	428a      	cmp	r2, r1
 80058b6:	d100      	bne.n	80058ba <memmove+0x2a>
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058c2:	e7f7      	b.n	80058b4 <memmove+0x24>

080058c4 <_realloc_r>:
 80058c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c8:	4680      	mov	r8, r0
 80058ca:	4614      	mov	r4, r2
 80058cc:	460e      	mov	r6, r1
 80058ce:	b921      	cbnz	r1, 80058da <_realloc_r+0x16>
 80058d0:	4611      	mov	r1, r2
 80058d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	f7ff bc29 	b.w	800512c <_malloc_r>
 80058da:	b92a      	cbnz	r2, 80058e8 <_realloc_r+0x24>
 80058dc:	f7ff fbbe 	bl	800505c <_free_r>
 80058e0:	4625      	mov	r5, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	f000 f81b 	bl	8005922 <_malloc_usable_size_r>
 80058ec:	4284      	cmp	r4, r0
 80058ee:	4607      	mov	r7, r0
 80058f0:	d802      	bhi.n	80058f8 <_realloc_r+0x34>
 80058f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058f6:	d812      	bhi.n	800591e <_realloc_r+0x5a>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4640      	mov	r0, r8
 80058fc:	f7ff fc16 	bl	800512c <_malloc_r>
 8005900:	4605      	mov	r5, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d0ed      	beq.n	80058e2 <_realloc_r+0x1e>
 8005906:	42bc      	cmp	r4, r7
 8005908:	4622      	mov	r2, r4
 800590a:	4631      	mov	r1, r6
 800590c:	bf28      	it	cs
 800590e:	463a      	movcs	r2, r7
 8005910:	f7ff fb8e 	bl	8005030 <memcpy>
 8005914:	4631      	mov	r1, r6
 8005916:	4640      	mov	r0, r8
 8005918:	f7ff fba0 	bl	800505c <_free_r>
 800591c:	e7e1      	b.n	80058e2 <_realloc_r+0x1e>
 800591e:	4635      	mov	r5, r6
 8005920:	e7df      	b.n	80058e2 <_realloc_r+0x1e>

08005922 <_malloc_usable_size_r>:
 8005922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005926:	1f18      	subs	r0, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	bfbc      	itt	lt
 800592c:	580b      	ldrlt	r3, [r1, r0]
 800592e:	18c0      	addlt	r0, r0, r3
 8005930:	4770      	bx	lr
	...

08005934 <_init>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr

08005940 <_fini>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr
