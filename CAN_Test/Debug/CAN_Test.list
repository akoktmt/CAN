
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058dc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b28  08005b28  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b28  08005b28  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  20000074  08005ba4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a74  08005ba4  00021a74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130cf  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bed  00000000  00000000  0003316c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00035d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00036c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b77  00000000  00000000  00037a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011293  00000000  00000000  000505ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee2a  00000000  00000000  00061882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f06ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c4  00000000  00000000  000f06fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080059d4 	.word	0x080059d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080059d4 	.word	0x080059d4

08000150 <CAN_Init>:
#include "canframe.h"
#include "stm32f1xx_hal_can.h"
//extern CAN_HandleTypeDef hcan;
extern UART_HandleTypeDef huart1;
uint8_t CAN_Init(CAN_HandlerStruct* canhandler, CAN_HandleTypeDef* hcan, uint16_t ID)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	4613      	mov	r3, r2
 800015c:	80fb      	strh	r3, [r7, #6]
	canhandler->hcan = hcan;
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	68ba      	ldr	r2, [r7, #8]
 8000162:	601a      	str	r2, [r3, #0]
	canhandler->SenderID = ID;
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	88fa      	ldrh	r2, [r7, #6]
 8000168:	809a      	strh	r2, [r3, #4]
	canhandler->fillterbank = 0;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	2200      	movs	r2, #0
 800016e:	80da      	strh	r2, [r3, #6]
	return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	3714      	adds	r7, #20
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <CAN_Send_Dataframe>:
uint8_t CAN_Send_Dataframe(CAN_HandlerStruct* canhandler,CANConfigIDTxtypedef* pIDtype, uint8_t *Data, uint32_t Datalength)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b094      	sub	sp, #80	; 0x50
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
 8000188:	603b      	str	r3, [r7, #0]
	CAN_TxHeaderTypeDef Txheader;
	/*Config Frame----------------------------------------------------------------*/
	Txheader.DLC=8;
 800018a:	2308      	movs	r3, #8
 800018c:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.RTR=CAN_RTR_DATA;
 800018e:	2300      	movs	r3, #0
 8000190:	623b      	str	r3, [r7, #32]
	Txheader.IDE=CAN_ID_STD;
 8000192:	2300      	movs	r3, #0
 8000194:	61fb      	str	r3, [r7, #28]
	/*Config ID-------------------------------------------------------------------*/
	uint32_t Txmailbox;
	uint16_t ID_NUM = 0x00;
 8000196:	2300      	movs	r3, #0
 8000198:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t Message_ID = pIDtype->MessageType;
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	881b      	ldrh	r3, [r3, #0]
 80001a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t Target_ID=pIDtype->TargetNode;
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	885b      	ldrh	r3, [r3, #2]
 80001a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint8_t Frame_type=FIRST_FRAME;
 80001ac:	2301      	movs	r3, #1
 80001ae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	ID_NUM |= Message_ID;
 80001b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80001bc:	4313      	orrs	r3, r2
 80001be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	ID_NUM =(ID_NUM <<4)|Target_ID;
 80001c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80001c6:	011b      	lsls	r3, r3, #4
 80001c8:	b21a      	sxth	r2, r3
 80001ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80001ce:	b21b      	sxth	r3, r3
 80001d0:	4313      	orrs	r3, r2
 80001d2:	b21b      	sxth	r3, r3
 80001d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	/*Implement send data----------------------------------------------------------*/
	uint8_t* frame = (uint8_t*)malloc(CAN_MAX_DATA_LENGTH);
 80001d8:	2008      	movs	r0, #8
 80001da:	f004 ff69 	bl	80050b0 <malloc>
 80001de:	4603      	mov	r3, r0
 80001e0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t frameIndex = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t length = Datalength;
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	633b      	str	r3, [r7, #48]	; 0x30
	int isFirstFrame = 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	647b      	str	r3, [r7, #68]	; 0x44
	int isLastFrame=0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	643b      	str	r3, [r7, #64]	; 0x40
	//uint32_t startTime = HAL_GetTick();
	/*Add SenderID vs Data length at first frame-----------------------------------*/
	for (int i = 0; i < Datalength; i++)
 80001f2:	2300      	movs	r3, #0
 80001f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80001f6:	e08c      	b.n	8000312 <CAN_Send_Dataframe+0x196>
	{
		uint8_t byte = Data[i];
 80001f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	4413      	add	r3, r2
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (isFirstFrame)
 8000204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000206:	2b00      	cmp	r3, #0
 8000208:	d014      	beq.n	8000234 <CAN_Send_Dataframe+0xb8>
		{
			frame[frameIndex] = pIDtype->SenderID;
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	88d9      	ldrh	r1, [r3, #6]
 800020e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000212:	4413      	add	r3, r2
 8000214:	b2ca      	uxtb	r2, r1
 8000216:	701a      	strb	r2, [r3, #0]
			frameIndex++;
 8000218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800021a:	3301      	adds	r3, #1
 800021c:	64bb      	str	r3, [r7, #72]	; 0x48
			frame[frameIndex] = length;
 800021e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000222:	4413      	add	r3, r2
 8000224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	701a      	strb	r2, [r3, #0]
			frameIndex++;
 800022a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800022c:	3301      	adds	r3, #1
 800022e:	64bb      	str	r3, [r7, #72]	; 0x48
			isFirstFrame = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	647b      	str	r3, [r7, #68]	; 0x44
		}
		/*Add byte into frame data----------------------------------------------------*/
		frame[frameIndex] = byte;
 8000234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000238:	4413      	add	r3, r2
 800023a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800023e:	701a      	strb	r2, [r3, #0]
		frameIndex++;
 8000240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000242:	3301      	adds	r3, #1
 8000244:	64bb      	str	r3, [r7, #72]	; 0x48
		/*Check if frame data is not fill, add FILL byte until frame full 8bytes------*/
		if (frameIndex == CAN_MAX_DATA_LENGTH || i == Datalength - 1)
 8000246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000248:	2b08      	cmp	r3, #8
 800024a:	d00d      	beq.n	8000268 <CAN_Send_Dataframe+0xec>
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	1e5a      	subs	r2, r3, #1
 8000250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000252:	429a      	cmp	r2, r3
 8000254:	d15a      	bne.n	800030c <CAN_Send_Dataframe+0x190>
		{
			while (frameIndex < CAN_MAX_DATA_LENGTH)
 8000256:	e007      	b.n	8000268 <CAN_Send_Dataframe+0xec>
			{
				frame[frameIndex] = FILL_VALUE;
 8000258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800025a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800025c:	4413      	add	r3, r2
 800025e:	2255      	movs	r2, #85	; 0x55
 8000260:	701a      	strb	r2, [r3, #0]
				frameIndex++;
 8000262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000264:	3301      	adds	r3, #1
 8000266:	64bb      	str	r3, [r7, #72]	; 0x48
			while (frameIndex < CAN_MAX_DATA_LENGTH)
 8000268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800026a:	2b07      	cmp	r3, #7
 800026c:	d9f4      	bls.n	8000258 <CAN_Send_Dataframe+0xdc>
			}
			/*Check last frame------------------------------------------------------*/
			if(i == Datalength - 1)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	1e5a      	subs	r2, r3, #1
 8000272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000274:	429a      	cmp	r2, r3
 8000276:	d106      	bne.n	8000286 <CAN_Send_Dataframe+0x10a>
			{
				isLastFrame=1;
 8000278:	2301      	movs	r3, #1
 800027a:	643b      	str	r3, [r7, #64]	; 0x40
				ID_NUM=(ID_NUM <<3)|END_FRAME;
 800027c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			}
			if(isLastFrame==0){
 8000286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000288:	2b00      	cmp	r3, #0
 800028a:	d10a      	bne.n	80002a2 <CAN_Send_Dataframe+0x126>
				ID_NUM =(ID_NUM <<3)|Frame_type;
 800028c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000290:	00db      	lsls	r3, r3, #3
 8000292:	b21a      	sxth	r2, r3
 8000294:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000298:	b21b      	sxth	r3, r3
 800029a:	4313      	orrs	r3, r2
 800029c:	b21b      	sxth	r3, r3
 800029e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			}
			Txheader.StdId=ID_NUM;
 80002a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80002a6:	617b      	str	r3, [r7, #20]
			/*send data--------------------------------------------------------------------*/
			if(HAL_CAN_AddTxMessage(canhandler->hcan,&Txheader,frame,&Txmailbox)!=HAL_OK)
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	6818      	ldr	r0, [r3, #0]
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	f107 0114 	add.w	r1, r7, #20
 80002b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80002b6:	f000 ff43 	bl	8001140 <HAL_CAN_AddTxMessage>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d007      	beq.n	80002d0 <CAN_Send_Dataframe+0x154>
			{
				Error_Handler();
 80002c0:	f000 fb7a 	bl	80009b8 <Error_Handler>
			}
			/*Check if a transmission request is pending on the selected TxMailboxes------*/
			while(HAL_CAN_IsTxMessagePending(canhandler->hcan,Txmailbox))
 80002c4:	e004      	b.n	80002d0 <CAN_Send_Dataframe+0x154>
				/*Decrease data frame and set frame turn 0 again------------------------------*/
				memset(frame, 0, CAN_MAX_DATA_LENGTH);
 80002c6:	2208      	movs	r2, #8
 80002c8:	2100      	movs	r1, #0
 80002ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80002cc:	f004 ff0e 	bl	80050ec <memset>
			while(HAL_CAN_IsTxMessagePending(canhandler->hcan,Txmailbox))
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	693a      	ldr	r2, [r7, #16]
 80002d6:	4611      	mov	r1, r2
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 f800 	bl	80012de <HAL_CAN_IsTxMessagePending>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f0      	bne.n	80002c6 <CAN_Send_Dataframe+0x14a>
			frameIndex = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	64bb      	str	r3, [r7, #72]	; 0x48
			/*add SenderID for every 1st next frame---------------------------------------*/
			frame[0] = pIDtype->SenderID;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	88db      	ldrh	r3, [r3, #6]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002f0:	701a      	strb	r2, [r3, #0]
			frameIndex++;
 80002f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80002f4:	3301      	adds	r3, #1
 80002f6:	64bb      	str	r3, [r7, #72]	; 0x48
			ID_NUM=ID_NUM>>3;
 80002f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80002fc:	08db      	lsrs	r3, r3, #3
 80002fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			Frame_type++;
 8000302:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000306:	3301      	adds	r3, #1
 8000308:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for (int i = 0; i < Datalength; i++)
 800030c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800030e:	3301      	adds	r3, #1
 8000310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	429a      	cmp	r2, r3
 8000318:	f63f af6e 	bhi.w	80001f8 <CAN_Send_Dataframe+0x7c>
		}
	}
	free(frame);
 800031c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800031e:	f004 fecf 	bl	80050c0 <free>
	return HAL_OK;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	3750      	adds	r7, #80	; 0x50
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <CAN_Receive_Dataframe>:
//        buffer[*bufferIndex] = array[i];
//        (*bufferIndex)++;
//    }
//}
uint8_t CAN_Receive_Dataframe(CAN_HandlerStruct* canhandler,CANConfigIDRxtypedef* pIDtype,uint8_t *ReceiveData, uint32_t *ReceiveLength)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b092      	sub	sp, #72	; 0x48
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	603b      	str	r3, [r7, #0]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t frame[CAN_MAX_DATA_LENGTH] = {0};
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
	uint8_t isLastFrame = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t SenderId=0;
 8000348:	2300      	movs	r3, #0
 800034a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t LengthRecData=0;
 800034e:	2300      	movs	r3, #0
 8000350:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	CANConfigIDRxtypedef *Rec=(CANConfigIDRxtypedef*)malloc(CAN_MAX_DATA_LENGTH);
 8000354:	2008      	movs	r0, #8
 8000356:	f004 feab 	bl	80050b0 <malloc>
 800035a:	4603      	mov	r3, r0
 800035c:	63bb      	str	r3, [r7, #56]	; 0x38
	for (int i=0; i< 13; i++)
 800035e:	2300      	movs	r3, #0
 8000360:	643b      	str	r3, [r7, #64]	; 0x40
 8000362:	e01d      	b.n	80003a0 <CAN_Receive_Dataframe+0x74>
	{
		Rec[i].Index=0;
 8000364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000366:	228c      	movs	r2, #140	; 0x8c
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800036e:	4413      	add	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		Rec[i].ExpectedLength=0;
 8000376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000378:	228c      	movs	r2, #140	; 0x8c
 800037a:	fb02 f303 	mul.w	r3, r2, r3
 800037e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000380:	4413      	add	r3, r2
 8000382:	2200      	movs	r2, #0
 8000384:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		Rec[i].frameIndex=0;
 8000388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800038a:	228c      	movs	r2, #140	; 0x8c
 800038c:	fb02 f303 	mul.w	r3, r2, r3
 8000390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000392:	4413      	add	r3, r2
 8000394:	2200      	movs	r2, #0
 8000396:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	for (int i=0; i< 13; i++)
 800039a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800039c:	3301      	adds	r3, #1
 800039e:	643b      	str	r3, [r7, #64]	; 0x40
 80003a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003a2:	2b0c      	cmp	r3, #12
 80003a4:	ddde      	ble.n	8000364 <CAN_Receive_Dataframe+0x38>
	}
		while(!isLastFrame){
 80003a6:	e0ae      	b.n	8000506 <CAN_Receive_Dataframe+0x1da>
			while (HAL_CAN_GetRxFifoFillLevel(canhandler->hcan, CAN_RX_FIFO0) == 0);
 80003a8:	bf00      	nop
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 f8d8 	bl	8001566 <HAL_CAN_GetRxFifoFillLevel>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0f6      	beq.n	80003aa <CAN_Receive_Dataframe+0x7e>
			if (HAL_CAN_GetRxMessage(canhandler->hcan, CAN_RX_FIFO0, &RxHeader, frame) != HAL_OK)
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	6818      	ldr	r0, [r3, #0]
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	f107 0218 	add.w	r2, r7, #24
 80003c8:	2100      	movs	r1, #0
 80003ca:	f000 ffab 	bl	8001324 <HAL_CAN_GetRxMessage>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <CAN_Receive_Dataframe+0xac>
			{
				Error_Handler();
 80003d4:	f000 faf0 	bl	80009b8 <Error_Handler>
			}
			SenderId=frame[0];
 80003d8:	7c3b      	ldrb	r3, [r7, #16]
 80003da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			uint16_t ID_NUM = RxHeader.StdId;
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	86fb      	strh	r3, [r7, #54]	; 0x36
			pIDtype -> Frametype = ID_NUM & 0x07;
 80003e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003e4:	f003 0307 	and.w	r3, r3, #7
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	809a      	strh	r2, [r3, #4]
			pIDtype -> TargetNode = (ID_NUM >> 3) & 0x0F;
 80003ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	f003 030f 	and.w	r3, r3, #15
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	805a      	strh	r2, [r3, #2]
			pIDtype ->  MessageType= (ID_NUM >> 7) & 0x0F;
 80003fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000400:	09db      	lsrs	r3, r3, #7
 8000402:	b29b      	uxth	r3, r3
 8000404:	f003 030f 	and.w	r3, r3, #15
 8000408:	b29a      	uxth	r2, r3
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	801a      	strh	r2, [r3, #0]
			switch (pIDtype->Frametype) {
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	889b      	ldrh	r3, [r3, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d016      	beq.n	8000444 <CAN_Receive_Dataframe+0x118>
 8000416:	2b01      	cmp	r3, #1
 8000418:	d122      	bne.n	8000460 <CAN_Receive_Dataframe+0x134>
			  case FIRST_FRAME:
			    Rec[SenderId].ExpectedLength = frame[1];
 800041a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800041e:	228c      	movs	r2, #140	; 0x8c
 8000420:	fb02 f303 	mul.w	r3, r2, r3
 8000424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000426:	4413      	add	r3, r2
 8000428:	7c7a      	ldrb	r2, [r7, #17]
 800042a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			    Rec[SenderId].frameIndex = 2;
 800042e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000432:	228c      	movs	r2, #140	; 0x8c
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800043a:	4413      	add	r3, r2
 800043c:	2202      	movs	r2, #2
 800043e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			    break;
 8000442:	e018      	b.n	8000476 <CAN_Receive_Dataframe+0x14a>
			  case END_FRAME:
			    Rec[SenderId].frameIndex = 1;
 8000444:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000448:	228c      	movs	r2, #140	; 0x8c
 800044a:	fb02 f303 	mul.w	r3, r2, r3
 800044e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000450:	4413      	add	r3, r2
 8000452:	2201      	movs	r2, #1
 8000454:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			    isLastFrame = 1;
 8000458:	2301      	movs	r3, #1
 800045a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			    break;
 800045e:	e00a      	b.n	8000476 <CAN_Receive_Dataframe+0x14a>
			  default:
			    Rec[SenderId].frameIndex = 1;
 8000460:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000464:	228c      	movs	r2, #140	; 0x8c
 8000466:	fb02 f303 	mul.w	r3, r2, r3
 800046a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800046c:	4413      	add	r3, r2
 800046e:	2201      	movs	r2, #1
 8000470:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			    break;
 8000474:	bf00      	nop
			}
			for(;Rec[SenderId].frameIndex<CAN_MAX_DATA_LENGTH;Rec[SenderId].frameIndex++){
 8000476:	e03b      	b.n	80004f0 <CAN_Receive_Dataframe+0x1c4>
				Rec[SenderId].ReceivedBuffer[Rec[SenderId].Index]=frame[Rec[SenderId].frameIndex];
 8000478:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800047c:	228c      	movs	r2, #140	; 0x8c
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000484:	4413      	add	r3, r2
 8000486:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800048a:	4618      	mov	r0, r3
 800048c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000490:	228c      	movs	r2, #140	; 0x8c
 8000492:	fb02 f303 	mul.w	r3, r2, r3
 8000496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000498:	4413      	add	r3, r2
 800049a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800049e:	218c      	movs	r1, #140	; 0x8c
 80004a0:	fb01 f202 	mul.w	r2, r1, r2
 80004a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80004a6:	440a      	add	r2, r1
 80004a8:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
 80004ac:	4611      	mov	r1, r2
 80004ae:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80004b2:	443a      	add	r2, r7
 80004b4:	f812 2c38 	ldrb.w	r2, [r2, #-56]
 80004b8:	440b      	add	r3, r1
 80004ba:	719a      	strb	r2, [r3, #6]
				Rec[SenderId].Index++;
 80004bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004c0:	228c      	movs	r2, #140	; 0x8c
 80004c2:	fb02 f303 	mul.w	r3, r2, r3
 80004c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004c8:	4413      	add	r3, r2
 80004ca:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 80004ce:	3201      	adds	r2, #1
 80004d0:	b2d2      	uxtb	r2, r2
 80004d2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			for(;Rec[SenderId].frameIndex<CAN_MAX_DATA_LENGTH;Rec[SenderId].frameIndex++){
 80004d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004da:	228c      	movs	r2, #140	; 0x8c
 80004dc:	fb02 f303 	mul.w	r3, r2, r3
 80004e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004e2:	4413      	add	r3, r2
 80004e4:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80004e8:	3201      	adds	r2, #1
 80004ea:	b2d2      	uxtb	r2, r2
 80004ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80004f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004f4:	228c      	movs	r2, #140	; 0x8c
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004fc:	4413      	add	r3, r2
 80004fe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8000502:	2b07      	cmp	r3, #7
 8000504:	d9b8      	bls.n	8000478 <CAN_Receive_Dataframe+0x14c>
		while(!isLastFrame){
 8000506:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800050a:	2b00      	cmp	r3, #0
 800050c:	f43f af4c 	beq.w	80003a8 <CAN_Receive_Dataframe+0x7c>
			}
		}
	*ReceiveLength=Rec[SenderId].ExpectedLength;
 8000510:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000514:	228c      	movs	r2, #140	; 0x8c
 8000516:	fb02 f303 	mul.w	r3, r2, r3
 800051a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800051c:	4413      	add	r3, r2
 800051e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000522:	461a      	mov	r2, r3
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	601a      	str	r2, [r3, #0]
	memcpy(ReceiveData,Rec[SenderId].ReceivedBuffer,Rec[SenderId].ExpectedLength);
 8000528:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800052c:	228c      	movs	r2, #140	; 0x8c
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000534:	4413      	add	r3, r2
 8000536:	1d99      	adds	r1, r3, #6
 8000538:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800053c:	228c      	movs	r2, #140	; 0x8c
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000544:	4413      	add	r3, r2
 8000546:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800054a:	461a      	mov	r2, r3
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f004 fdbf 	bl	80050d0 <memcpy>
	memset(Rec[SenderId].ReceivedBuffer,0,Rec[SenderId].ExpectedLength);
 8000552:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000556:	228c      	movs	r2, #140	; 0x8c
 8000558:	fb02 f303 	mul.w	r3, r2, r3
 800055c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800055e:	4413      	add	r3, r2
 8000560:	1d98      	adds	r0, r3, #6
 8000562:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000566:	228c      	movs	r2, #140	; 0x8c
 8000568:	fb02 f303 	mul.w	r3, r2, r3
 800056c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800056e:	4413      	add	r3, r2
 8000570:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000574:	461a      	mov	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f004 fdb8 	bl	80050ec <memset>
	Rec[SenderId].Index=0;
 800057c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000580:	228c      	movs	r2, #140	; 0x8c
 8000582:	fb02 f303 	mul.w	r3, r2, r3
 8000586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000588:	4413      	add	r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	free(Rec);
 8000590:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000592:	f004 fd95 	bl	80050c0 <free>
	return HAL_OK;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3748      	adds	r7, #72	; 0x48
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <CAN_Config_filtering>:
	{
		return HAL_OK;
	}
}
uint32_t CAN_Config_filtering(CAN_HandlerStruct *Can, uint16_t NodeID)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	; 0x30
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank=Can->fillterbank++;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	88db      	ldrh	r3, [r3, #6]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	b291      	uxth	r1, r2
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	80d1      	strh	r1, [r2, #6]
 80005bc:	61fb      	str	r3, [r7, #28]
	if(Can->fillterbank > 14){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	88db      	ldrh	r3, [r3, #6]
 80005c2:	2b0e      	cmp	r3, #14
 80005c4:	d901      	bls.n	80005ca <CAN_Config_filtering+0x2a>
		Error_Handler();
 80005c6:	f000 f9f7 	bl	80009b8 <Error_Handler>
	}
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh=NodeID<<8;
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterIdLow= 0x0000;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh= 0x0F00;
 80005d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80005dc:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 80005e6:	2301      	movs	r3, #1
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(Can->hcan,&Can_filter_init)!=HAL_OK)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f107 0208 	add.w	r2, r7, #8
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fc96 	bl	8000f26 <HAL_CAN_ConfigFilter>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <CAN_Config_filtering+0x64>
	{
		Error_Handler();
 8000600:	f000 f9da 	bl	80009b8 <Error_Handler>
	}
	return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fb2a 	bl	8000c6c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f84e 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f8f2 	bl	8000804 <MX_GPIO_Init>
  MX_CAN_Init();
 8000620:	f000 f890 	bl	8000744 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000624:	f000 f8c4 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   CAN_Init(&MainCAN,&hcan,LIGHT_GPS);
 8000628:	2202      	movs	r2, #2
 800062a:	4918      	ldr	r1, [pc, #96]	; (800068c <main+0x7c>)
 800062c:	4818      	ldr	r0, [pc, #96]	; (8000690 <main+0x80>)
 800062e:	f7ff fd8f 	bl	8000150 <CAN_Init>
    CAN_Config_filtering(&MainCAN,ENGINE_CONTROL);
 8000632:	2101      	movs	r1, #1
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0x80>)
 8000636:	f7ff ffb3 	bl	80005a0 <CAN_Config_filtering>
    CAN_Config_filtering(&MainCAN,OBSTALCE1);
 800063a:	2108      	movs	r1, #8
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0x80>)
 800063e:	f7ff ffaf 	bl	80005a0 <CAN_Config_filtering>
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000642:	4812      	ldr	r0, [pc, #72]	; (800068c <main+0x7c>)
 8000644:	f000 fd38 	bl	80010b8 <HAL_CAN_Start>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <main+0x42>
  {
  	Error_Handler();
 800064e:	f000 f9b3 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000652:	f002 f829 	bl	80026a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mCANRec */
  mCANRecHandle = osThreadNew(tCANRec, NULL, &mCANRec_attributes);
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <main+0x84>)
 8000658:	2100      	movs	r1, #0
 800065a:	480f      	ldr	r0, [pc, #60]	; (8000698 <main+0x88>)
 800065c:	f002 f88a 	bl	8002774 <osThreadNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <main+0x8c>)
 8000664:	6013      	str	r3, [r2, #0]

  /* creation of mBlinkLed */
  mBlinkLedHandle = osThreadNew(tBlinkLed, NULL, &mBlinkLed_attributes);
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <main+0x90>)
 8000668:	2100      	movs	r1, #0
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <main+0x94>)
 800066c:	f002 f882 	bl	8002774 <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <main+0x98>)
 8000674:	6013      	str	r3, [r2, #0]

  /* creation of mMainTask */
  mMainTaskHandle = osThreadNew(tMainTask, NULL, &mMainTask_attributes);
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <main+0x9c>)
 8000678:	2100      	movs	r1, #0
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <main+0xa0>)
 800067c:	f002 f87a 	bl	8002774 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <main+0xa4>)
 8000684:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000686:	f002 f841 	bl	800270c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x7a>
 800068c:	20000090 	.word	0x20000090
 8000690:	2000010c 	.word	0x2000010c
 8000694:	08005a5c 	.word	0x08005a5c
 8000698:	0800089d 	.word	0x0800089d
 800069c:	20000100 	.word	0x20000100
 80006a0:	08005a80 	.word	0x08005a80
 80006a4:	0800092d 	.word	0x0800092d
 80006a8:	20000104 	.word	0x20000104
 80006ac:	08005aa4 	.word	0x08005aa4
 80006b0:	0800094d 	.word	0x0800094d
 80006b4:	20000108 	.word	0x20000108

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b090      	sub	sp, #64	; 0x40
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	2228      	movs	r2, #40	; 0x28
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fd10 	bl	80050ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f9f1 	bl	8001ae8 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800070c:	f000 f954 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fc5e 	bl	8001fec <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000736:	f000 f93f 	bl	80009b8 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3740      	adds	r7, #64	; 0x40
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_CAN_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_CAN_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_CAN_Init+0x64>)
 8000750:	2204      	movs	r2, #4
 8000752:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_CAN_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_CAN_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_CAN_Init+0x64>)
 8000762:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000766:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_CAN_Init+0x64>)
 800076a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800076e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_CAN_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_CAN_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_CAN_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_CAN_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_CAN_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_CAN_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_CAN_Init+0x64>)
 8000796:	f000 facb 	bl	8000d30 <HAL_CAN_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f90a 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000090 	.word	0x20000090
 80007ac:	40006400 	.word	0x40006400

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fd8e 	bl	8002308 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f8e1 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000b8 	.word	0x200000b8
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_GPIO_Init+0x90>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <MX_GPIO_Init+0x90>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_GPIO_Init+0x90>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0310 	and.w	r3, r3, #16
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_GPIO_Init+0x90>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MX_GPIO_Init+0x90>)
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_GPIO_Init+0x90>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_GPIO_Init+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a11      	ldr	r2, [pc, #68]	; (8000894 <MX_GPIO_Init+0x90>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_GPIO_Init+0x90>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_GPIO_Init+0x94>)
 8000868:	f001 f90c 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2302      	movs	r3, #2
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0x94>)
 8000886:	f000 ff79 	bl	800177c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	40011000 	.word	0x40011000

0800089c <tCANRec>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tCANRec */
void tCANRec(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0d6      	sub	sp, #344	; 0x158
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80008a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80008aa:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	uint8_t Receivedata[100]={0};
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80008b2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80008b6:	2260      	movs	r2, #96	; 0x60
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fc16 	bl	80050ec <memset>
	CANConfigIDRxtypedef test1;
	uint8_t rcvLen = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  /* Infinite loop */
  for(;;)
  {
	CAN_Receive_Dataframe(&MainCAN,&test1,Receivedata,&rcvLen);
 80008c6:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80008ca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80008ce:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80008d2:	4813      	ldr	r0, [pc, #76]	; (8000920 <tCANRec+0x84>)
 80008d4:	f7ff fd2a 	bl	800032c <CAN_Receive_Dataframe>
	char Print[88] = {0};
 80008d8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80008dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2254      	movs	r2, #84	; 0x54
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fbfe 	bl	80050ec <memset>
	uint8_t len = sprintf(Print, "Node 2 Rcv: %s len %d \r\n", Receivedata, rcvLen);
 80008f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80008f4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80008f8:	f107 0008 	add.w	r0, r7, #8
 80008fc:	4909      	ldr	r1, [pc, #36]	; (8000924 <tCANRec+0x88>)
 80008fe:	f004 fce9 	bl	80052d4 <siprintf>
 8000902:	4603      	mov	r3, r0
 8000904:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	HAL_UART_Transmit(&huart1,(uint8_t*)Print,len,HAL_MAX_DELAY);
 8000908:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800090c:	b29a      	uxth	r2, r3
 800090e:	f107 0108 	add.w	r1, r7, #8
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <tCANRec+0x8c>)
 8000918:	f001 fd46 	bl	80023a8 <HAL_UART_Transmit>
  {
 800091c:	e7d3      	b.n	80008c6 <tCANRec+0x2a>
 800091e:	bf00      	nop
 8000920:	2000010c 	.word	0x2000010c
 8000924:	08005a0c 	.word	0x08005a0c
 8000928:	200000b8 	.word	0x200000b8

0800092c <tBlinkLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tBlinkLed */
void tBlinkLed(void *argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tBlinkLed */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <tBlinkLed+0x1c>)
 800093a:	f001 f8bb 	bl	8001ab4 <HAL_GPIO_TogglePin>
    osDelay(500);
 800093e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000942:	f001 ffc1 	bl	80028c8 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000946:	e7f5      	b.n	8000934 <tBlinkLed+0x8>
 8000948:	40011000 	.word	0x40011000

0800094c <tMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tMainTask */
void tMainTask(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0a0      	sub	sp, #128	; 0x80
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tMainTask */

	  uint8_t sendData[100] = {0};
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	2260      	movs	r2, #96	; 0x60
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fbc3 	bl	80050ec <memset>
	  uint8_t len = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	  uint32_t cnt = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	67fb      	str	r3, [r7, #124]	; 0x7c

	  CANConfigIDTxtypedef test;
	  test.MessageType=ALL_NODE;
 8000970:	2300      	movs	r3, #0
 8000972:	81bb      	strh	r3, [r7, #12]
	  test.TargetNode=OBSTALCE1;
 8000974:	2308      	movs	r3, #8
 8000976:	81fb      	strh	r3, [r7, #14]
	  test.SenderID = LIGHT_GPS;
 8000978:	2302      	movs	r3, #2
 800097a:	827b      	strh	r3, [r7, #18]
  /* Infinite loop */
  for(;;)
  {
	  len = sprintf((char*)sendData, "From LIGHT_GPS to 2: %d\r\n",cnt++);
 800097c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000982:	f107 0014 	add.w	r0, r7, #20
 8000986:	461a      	mov	r2, r3
 8000988:	4909      	ldr	r1, [pc, #36]	; (80009b0 <tMainTask+0x64>)
 800098a:	f004 fca3 	bl	80052d4 <siprintf>
 800098e:	4603      	mov	r3, r0
 8000990:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	  CAN_Send_Dataframe(&MainCAN,&test,sendData,len+1);
 8000994:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000998:	3301      	adds	r3, #1
 800099a:	f107 0214 	add.w	r2, r7, #20
 800099e:	f107 010c 	add.w	r1, r7, #12
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <tMainTask+0x68>)
 80009a4:	f7ff fbea 	bl	800017c <CAN_Send_Dataframe>
	  osDelay(60);
 80009a8:	203c      	movs	r0, #60	; 0x3c
 80009aa:	f001 ff8d 	bl	80028c8 <osDelay>
	  len = sprintf((char*)sendData, "From LIGHT_GPS to 2: %d\r\n",cnt++);
 80009ae:	e7e5      	b.n	800097c <tMainTask+0x30>
 80009b0:	08005a28 	.word	0x08005a28
 80009b4:	2000010c 	.word	0x2000010c

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_MspInit+0x68>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_MspInit+0x68>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_MspInit+0x68>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_MspInit+0x68>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <HAL_MspInit+0x68>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x68>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 fe92 	bl	800172a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_MspInit+0x6c>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_MspInit+0x6c>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000

08000a34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <HAL_CAN_MspInit+0x8c>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d131      	bne.n	8000ab8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_CAN_MspInit+0x90>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <HAL_CAN_MspInit+0x90>)
 8000a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_CAN_MspInit+0x90>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_CAN_MspInit+0x90>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_CAN_MspInit+0x90>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_CAN_MspInit+0x90>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <HAL_CAN_MspInit+0x94>)
 8000a9a:	f000 fe6f 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <HAL_CAN_MspInit+0x94>)
 8000ab4:	f000 fe62 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40006400 	.word	0x40006400
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010800 	.word	0x40010800

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d131      	bne.n	8000b50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0x90>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <HAL_UART_MspInit+0x90>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x90>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x90>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_UART_MspInit+0x90>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_UART_MspInit+0x90>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <HAL_UART_MspInit+0x94>)
 8000b32:	f000 fe23 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_UART_MspInit+0x94>)
 8000b4c:	f000 fe16 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b92:	f000 f8b1 	bl	8000cf8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b96:	f003 faa3 	bl	80040e0 <xTaskGetSchedulerState>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d001      	beq.n	8000ba4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ba0:	f004 f802 	bl	8004ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f004 fa40 	bl	800505c <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20005000 	.word	0x20005000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000114 	.word	0x20000114
 8000c10:	20001a78 	.word	0x20001a78

08000c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c20:	f7ff fff8 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c26:	490c      	ldr	r1, [pc, #48]	; (8000c58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c28:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c3c:	4c09      	ldr	r4, [pc, #36]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f004 fa0d 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff fcdf 	bl	8000610 <main>
  bx lr
 8000c52:	4770      	bx	lr
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c5c:	08005b30 	.word	0x08005b30
  ldr r2, =_sbss
 8000c60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c64:	20001a74 	.word	0x20001a74

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x28>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 fd49 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe9c 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fd53 	bl	8001762 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 fd29 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x20>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000118 	.word	0x20000118

08000d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000118 	.word	0x20000118

08000d30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e0ed      	b.n	8000f1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fe70 	bl	8000a34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d64:	f7ff ffda 	bl	8000d1c <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d6a:	e012      	b.n	8000d92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d6c:	f7ff ffd6 	bl	8000d1c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d90b      	bls.n	8000d92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2205      	movs	r2, #5
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e0c5      	b.n	8000f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0e5      	beq.n	8000d6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0202 	bic.w	r2, r2, #2
 8000dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000db0:	f7ff ffb4 	bl	8000d1c <HAL_GetTick>
 8000db4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000db6:	e012      	b.n	8000dde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db8:	f7ff ffb0 	bl	8000d1c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b0a      	cmp	r3, #10
 8000dc4:	d90b      	bls.n	8000dde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2205      	movs	r2, #5
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e09f      	b.n	8000f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e5      	bne.n	8000db8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7e1b      	ldrb	r3, [r3, #24]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d108      	bne.n	8000e06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e007      	b.n	8000e16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7e5b      	ldrb	r3, [r3, #25]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d108      	bne.n	8000e30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e007      	b.n	8000e40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7e9b      	ldrb	r3, [r3, #26]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d108      	bne.n	8000e5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0220 	orr.w	r2, r2, #32
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e007      	b.n	8000e6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0220 	bic.w	r2, r2, #32
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7edb      	ldrb	r3, [r3, #27]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d108      	bne.n	8000e84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0210 	bic.w	r2, r2, #16
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0210 	orr.w	r2, r2, #16
 8000e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7f1b      	ldrb	r3, [r3, #28]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0208 	orr.w	r2, r2, #8
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e007      	b.n	8000ebe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0208 	bic.w	r2, r2, #8
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7f5b      	ldrb	r3, [r3, #29]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d108      	bne.n	8000ed8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0204 	orr.w	r2, r2, #4
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0204 	bic.w	r2, r2, #4
 8000ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	ea42 0103 	orr.w	r1, r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f3e:	7cfb      	ldrb	r3, [r7, #19]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d003      	beq.n	8000f4c <HAL_CAN_ConfigFilter+0x26>
 8000f44:	7cfb      	ldrb	r3, [r7, #19]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	f040 80aa 	bne.w	80010a0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	2201      	movs	r2, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d123      	bne.n	8000fce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	401a      	ands	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fa8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3248      	adds	r2, #72	; 0x48
 8000fae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc4:	6979      	ldr	r1, [r7, #20]
 8000fc6:	3348      	adds	r3, #72	; 0x48
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d122      	bne.n	800101c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ff6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3248      	adds	r2, #72	; 0x48
 8000ffc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001010:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001012:	6979      	ldr	r1, [r7, #20]
 8001014:	3348      	adds	r3, #72	; 0x48
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001036:	e007      	b.n	8001048 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001062:	e007      	b.n	8001074 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	431a      	orrs	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d107      	bne.n	800108c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001092:	f023 0201 	bic.w	r2, r3, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	e006      	b.n	80010ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d12e      	bne.n	800112a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2202      	movs	r2, #2
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010e4:	f7ff fe1a 	bl	8000d1c <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ea:	e012      	b.n	8001112 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ec:	f7ff fe16 	bl	8000d1c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b0a      	cmp	r3, #10
 80010f8:	d90b      	bls.n	8001112 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2205      	movs	r2, #5
 800110a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e012      	b.n	8001138 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e5      	bne.n	80010ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e006      	b.n	8001138 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
  }
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001154:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d003      	beq.n	800116c <HAL_CAN_AddTxMessage+0x2c>
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	2b02      	cmp	r3, #2
 8001168:	f040 80ad 	bne.w	80012c6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10a      	bne.n	800118c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8095 	beq.w	80012b6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	0e1b      	lsrs	r3, r3, #24
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10d      	bne.n	80011c4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011b2:	68f9      	ldr	r1, [r7, #12]
 80011b4:	6809      	ldr	r1, [r1, #0]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3318      	adds	r3, #24
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	440b      	add	r3, r1
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e00f      	b.n	80011e4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011d4:	68f9      	ldr	r1, [r7, #12]
 80011d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3318      	adds	r3, #24
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	440b      	add	r3, r1
 80011e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3318      	adds	r3, #24
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	440b      	add	r3, r1
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	7d1b      	ldrb	r3, [r3, #20]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d111      	bne.n	8001224 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3318      	adds	r3, #24
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	3304      	adds	r3, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6811      	ldr	r1, [r2, #0]
 8001214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3318      	adds	r3, #24
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	440b      	add	r3, r1
 8001220:	3304      	adds	r3, #4
 8001222:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3307      	adds	r3, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	061a      	lsls	r2, r3, #24
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3306      	adds	r3, #6
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	041b      	lsls	r3, r3, #16
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3305      	adds	r3, #5
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4313      	orrs	r3, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	3204      	adds	r2, #4
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	4610      	mov	r0, r2
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	6811      	ldr	r1, [r2, #0]
 800124c:	ea43 0200 	orr.w	r2, r3, r0
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	440b      	add	r3, r1
 8001256:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800125a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3303      	adds	r3, #3
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	061a      	lsls	r2, r3, #24
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3302      	adds	r3, #2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	4313      	orrs	r3, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	4610      	mov	r0, r2
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	ea43 0200 	orr.w	r2, r3, r0
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	440b      	add	r3, r1
 800128c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001290:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3318      	adds	r3, #24
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4413      	add	r3, r2
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	6811      	ldr	r1, [r2, #0]
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3318      	adds	r3, #24
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	440b      	add	r3, r1
 80012b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e00e      	b.n	80012d4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e006      	b.n	80012d4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
  }
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3724      	adds	r7, #36	; 0x24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d002      	beq.n	8001300 <HAL_CAN_IsTxMessagePending+0x22>
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d10b      	bne.n	8001318 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	069b      	lsls	r3, r3, #26
 800130a:	401a      	ands	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	069b      	lsls	r3, r3, #26
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001314:	2301      	movs	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001318:	68fb      	ldr	r3, [r7, #12]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001338:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d003      	beq.n	8001348 <HAL_CAN_GetRxMessage+0x24>
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b02      	cmp	r3, #2
 8001344:	f040 8103 	bne.w	800154e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10e      	bne.n	800136c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d116      	bne.n	800138a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0f7      	b.n	800155c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d107      	bne.n	800138a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0e8      	b.n	800155c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	331b      	adds	r3, #27
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4413      	add	r3, r2
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0204 	and.w	r2, r3, #4
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10c      	bne.n	80013c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	331b      	adds	r3, #27
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0d5b      	lsrs	r3, r3, #21
 80013b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e00b      	b.n	80013da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	331b      	adds	r3, #27
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	331b      	adds	r3, #27
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0202 	and.w	r2, r3, #2
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	331b      	adds	r3, #27
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	3304      	adds	r3, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2208      	movs	r2, #8
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	e00b      	b.n	8001428 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	331b      	adds	r3, #27
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	3304      	adds	r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 020f 	and.w	r2, r3, #15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	331b      	adds	r3, #27
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	3304      	adds	r3, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	b2da      	uxtb	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	331b      	adds	r3, #27
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	3304      	adds	r3, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0a1a      	lsrs	r2, r3, #8
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4413      	add	r3, r2
 8001492:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0c1a      	lsrs	r2, r3, #16
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0e1a      	lsrs	r2, r3, #24
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3303      	adds	r3, #3
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3304      	adds	r3, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0a1a      	lsrs	r2, r3, #8
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3305      	adds	r3, #5
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0c1a      	lsrs	r2, r3, #16
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	3306      	adds	r3, #6
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0e1a      	lsrs	r2, r3, #24
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3307      	adds	r3, #7
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d108      	bne.n	800153a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0220 	orr.w	r2, r2, #32
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	e007      	b.n	800154a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0220 	orr.w	r2, r2, #32
 8001548:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e006      	b.n	800155c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
  }
}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d002      	beq.n	8001588 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d10f      	bne.n	80015a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e005      	b.n	80015a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80015a8:	68fb      	ldr	r3, [r7, #12]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff90 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff49 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff5e 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffb0 	bl	80016d0 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e169      	b.n	8001a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8158 	bne.w	8001a5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a9a      	ldr	r2, [pc, #616]	; (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d05e      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017b8:	4a98      	ldr	r2, [pc, #608]	; (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d875      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017be:	4a98      	ldr	r2, [pc, #608]	; (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d058      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017c4:	4a96      	ldr	r2, [pc, #600]	; (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d86f      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ca:	4a96      	ldr	r2, [pc, #600]	; (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017d0:	4a94      	ldr	r2, [pc, #592]	; (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d869      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017d6:	4a94      	ldr	r2, [pc, #592]	; (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04c      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017dc:	4a92      	ldr	r2, [pc, #584]	; (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d863      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017e2:	4a92      	ldr	r2, [pc, #584]	; (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d046      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017e8:	4a90      	ldr	r2, [pc, #576]	; (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d85d      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d82a      	bhi.n	8001848 <HAL_GPIO_Init+0xcc>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d859      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_GPIO_Init+0x80>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001851 	.word	0x08001851
 8001804:	08001863 	.word	0x08001863
 8001808:	080018a5 	.word	0x080018a5
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	080018ab 	.word	0x080018ab
 800181c:	080018ab 	.word	0x080018ab
 8001820:	080018ab 	.word	0x080018ab
 8001824:	080018ab 	.word	0x080018ab
 8001828:	080018ab 	.word	0x080018ab
 800182c:	080018ab 	.word	0x080018ab
 8001830:	080018ab 	.word	0x080018ab
 8001834:	080018ab 	.word	0x080018ab
 8001838:	080018ab 	.word	0x080018ab
 800183c:	080018ab 	.word	0x080018ab
 8001840:	08001859 	.word	0x08001859
 8001844:	0800186d 	.word	0x0800186d
 8001848:	4a79      	ldr	r2, [pc, #484]	; (8001a30 <HAL_GPIO_Init+0x2b4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e02c      	b.n	80018aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e029      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e024      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3308      	adds	r3, #8
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e01f      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	330c      	adds	r3, #12
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e01a      	b.n	80018ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187e:	2304      	movs	r3, #4
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e013      	b.n	80018ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	611a      	str	r2, [r3, #16]
          break;
 8001896:	e009      	b.n	80018ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	615a      	str	r2, [r3, #20]
          break;
 80018a2:	e003      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x130>
          break;
 80018aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d801      	bhi.n	80018b6 <HAL_GPIO_Init+0x13a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_Init+0x13e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	d802      	bhi.n	80018c8 <HAL_GPIO_Init+0x14c>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x152>
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3b08      	subs	r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	210f      	movs	r1, #15
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80b1 	beq.w	8001a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x2b8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x2b8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001914:	4a48      	ldr	r2, [pc, #288]	; (8001a38 <HAL_GPIO_Init+0x2bc>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a40      	ldr	r2, [pc, #256]	; (8001a3c <HAL_GPIO_Init+0x2c0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d013      	beq.n	8001968 <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3f      	ldr	r2, [pc, #252]	; (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00d      	beq.n	8001964 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3e      	ldr	r2, [pc, #248]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x1e4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3d      	ldr	r2, [pc, #244]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_GPIO_Init+0x1e0>
 8001958:	2303      	movs	r3, #3
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 800195c:	2304      	movs	r3, #4
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001968:	2300      	movs	r3, #0
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197a:	492f      	ldr	r1, [pc, #188]	; (8001a38 <HAL_GPIO_Init+0x2bc>)
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	492c      	ldr	r1, [pc, #176]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4928      	ldr	r1, [pc, #160]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4922      	ldr	r1, [pc, #136]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	491e      	ldr	r1, [pc, #120]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4918      	ldr	r1, [pc, #96]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4914      	ldr	r1, [pc, #80]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d021      	beq.n	8001a50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	490e      	ldr	r1, [pc, #56]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e021      	b.n	8001a5e <HAL_GPIO_Init+0x2e2>
 8001a1a:	bf00      	nop
 8001a1c:	10320000 	.word	0x10320000
 8001a20:	10310000 	.word	0x10310000
 8001a24:	10220000 	.word	0x10220000
 8001a28:	10210000 	.word	0x10210000
 8001a2c:	10120000 	.word	0x10120000
 8001a30:	10110000 	.word	0x10110000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40011400 	.word	0x40011400
 8001a4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4909      	ldr	r1, [pc, #36]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f ae8e 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	372c      	adds	r7, #44	; 0x2c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40010400 	.word	0x40010400

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43d9      	mvns	r1, r3
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
	...

08001ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e272      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d00c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b14:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d112      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
 8001b20:	4b8c      	ldr	r3, [pc, #560]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d10b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	4b89      	ldr	r3, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x12c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d168      	bne.n	8001c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e24c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x76>
 8001b50:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a7f      	ldr	r2, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x98>
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a77      	ldr	r2, [pc, #476]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xbc>
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a71      	ldr	r2, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001ba4:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6a      	ldr	r2, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a67      	ldr	r2, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8aa 	bl	8000d1c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f8a6 	bl	8000d1c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e200      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe4>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff f896 	bl	8000d1c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff f892 	bl	8000d1c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1ec      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x10c>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d116      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e1c0      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4939      	ldr	r1, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	e03a      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff f84b 	bl	8000d1c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f847 	bl	8000d1c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1a1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4927      	ldr	r1, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f82a 	bl	8000d1c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7ff f826 	bl	8000d1c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e180      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03a      	beq.n	8001d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7ff f80a 	bl	8000d1c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff f806 	bl	8000d1c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e160      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 face 	bl	80022cc <RCC_Delay>
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7fe fff0 	bl	8000d1c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3e:	e00f      	b.n	8001d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7fe ffec 	bl	8000d1c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d908      	bls.n	8001d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e146      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	42420000 	.word	0x42420000
 8001d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b92      	ldr	r3, [pc, #584]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e9      	bne.n	8001d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a6 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b85      	ldr	r3, [pc, #532]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7e      	ldr	r2, [pc, #504]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe ffad 	bl	8000d1c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7fe ffa9 	bl	8000d1c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	; 0x64
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e103      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b75      	ldr	r3, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x312>
 8001dec:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a6e      	ldr	r2, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e02d      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x334>
 8001e02:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a69      	ldr	r2, [pc, #420]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a66      	ldr	r2, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	e01c      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x356>
 8001e24:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a5a      	ldr	r2, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b58      	ldr	r3, [pc, #352]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a57      	ldr	r2, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe ff5d 	bl	8000d1c <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7fe ff59 	bl	8000d1c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0b1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RCC_OscConfig+0x37e>
 8001e88:	e014      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe ff47 	bl	8000d1c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe ff43 	bl	8000d1c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e09b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d061      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d146      	bne.n	8001f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe ff17 	bl	8000d1c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe ff13 	bl	8000d1c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e06d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4921      	ldr	r1, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a19      	ldr	r1, [r3, #32]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fee7 	bl	8000d1c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fee3 	bl	8000d1c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46a>
 8001f70:	e035      	b.n	8001fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fed0 	bl	8000d1c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe fecc 	bl	8000d1c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e026      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x498>
 8001f9e:	e01e      	b.n	8001fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e019      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x500>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0d0      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d910      	bls.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0207 	bic.w	r2, r3, #7
 8002016:	4965      	ldr	r1, [pc, #404]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800206a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d040      	beq.n	800210c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d115      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e073      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06b      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4936      	ldr	r1, [pc, #216]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020dc:	f7fe fe1e 	bl	8000d1c <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe fe1a 	bl	8000d1c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e053      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d210      	bcs.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4922      	ldr	r1, [pc, #136]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e032      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4916      	ldr	r1, [pc, #88]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490e      	ldr	r1, [pc, #56]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f821 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800217e:	4602      	mov	r2, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800218c:	5ccb      	ldrb	r3, [r1, r3]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1d0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fd7c 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08005ac8 	.word	0x08005ac8
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ee:	e027      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	613b      	str	r3, [r7, #16]
      break;
 80021f4:	e027      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0c5b      	lsrs	r3, r3, #17
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e004      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	613b      	str	r3, [r7, #16]
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002242:	613b      	str	r3, [r7, #16]
      break;
 8002244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002246:	693b      	ldr	r3, [r7, #16]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200
 800225c:	08005ae0 	.word	0x08005ae0
 8002260:	08005af0 	.word	0x08005af0
 8002264:	003d0900 	.word	0x003d0900

08002268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <HAL_RCC_GetHCLKFreq+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000000 	.word	0x20000000

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002280:	f7ff fff2 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4903      	ldr	r1, [pc, #12]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	08005ad8 	.word	0x08005ad8

080022a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022a8:	f7ff ffde 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0adb      	lsrs	r3, r3, #11
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08005ad8 	.word	0x08005ad8

080022cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <RCC_Delay+0x34>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <RCC_Delay+0x38>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0a5b      	lsrs	r3, r3, #9
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e8:	bf00      	nop
  }
  while (Delay --);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	60fa      	str	r2, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <RCC_Delay+0x1c>
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000000 	.word	0x20000000
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e042      	b.n	80023a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fbcc 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	; 0x24
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800234a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f91d 	bl	800258c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d16d      	bne.n	80024a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_UART_Transmit+0x2c>
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e066      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fc99 	bl	8000d1c <HAL_GetTick>
 80023ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002400:	d108      	bne.n	8002414 <HAL_UART_Transmit+0x6c>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e003      	b.n	800241c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800241c:	e02a      	b.n	8002474 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f840 	bl	80024ae <UART_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e036      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10b      	bne.n	8002456 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800244c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	3302      	adds	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	e007      	b.n	8002466 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	3301      	adds	r3, #1
 8002464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1cf      	bne.n	800241e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	2140      	movs	r1, #64	; 0x40
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f810 	bl	80024ae <UART_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e006      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b090      	sub	sp, #64	; 0x40
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024be:	e050      	b.n	8002562 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d04c      	beq.n	8002562 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <UART_WaitOnFlagUntilTimeout+0x30>
 80024ce:	f7fe fc25 	bl	8000d1c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024da:	429a      	cmp	r2, r3
 80024dc:	d241      	bcs.n	8002562 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	330c      	adds	r3, #12
 80024fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e5      	bne.n	80024de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3314      	adds	r3, #20
 8002518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	e853 3f00 	ldrex	r3, [r3]
 8002520:	613b      	str	r3, [r7, #16]
   return(result);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	63bb      	str	r3, [r7, #56]	; 0x38
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3314      	adds	r3, #20
 8002530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002532:	623a      	str	r2, [r7, #32]
 8002534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	69f9      	ldr	r1, [r7, #28]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e5      	bne.n	8002512 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e00f      	b.n	8002582 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4013      	ands	r3, r2
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	429a      	cmp	r2, r3
 800257e:	d09f      	beq.n	80024c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3740      	adds	r7, #64	; 0x40
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025c6:	f023 030c 	bic.w	r3, r3, #12
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2c      	ldr	r2, [pc, #176]	; (80026a0 <UART_SetConfig+0x114>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d103      	bne.n	80025fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f4:	f7ff fe56 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	e002      	b.n	8002602 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025fc:	f7ff fe3e 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8002600:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <UART_SetConfig+0x118>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	0119      	lsls	r1, r3, #4
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009a      	lsls	r2, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fbb2 f2f3 	udiv	r2, r2, r3
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <UART_SetConfig+0x118>)
 800263a:	fba3 0302 	umull	r0, r3, r3, r2
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2064      	movs	r0, #100	; 0x64
 8002642:	fb00 f303 	mul.w	r3, r0, r3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	3332      	adds	r3, #50	; 0x32
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <UART_SetConfig+0x118>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	4419      	add	r1, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <UART_SetConfig+0x118>)
 8002672:	fba3 0302 	umull	r0, r3, r3, r2
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2064      	movs	r0, #100	; 0x64
 800267a:	fb00 f303 	mul.w	r3, r0, r3
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	3332      	adds	r3, #50	; 0x32
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <UART_SetConfig+0x118>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	f003 020f 	and.w	r2, r3, #15
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	440a      	add	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40013800 	.word	0x40013800
 80026a4:	51eb851f 	.word	0x51eb851f

080026a8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ae:	f3ef 8305 	mrs	r3, IPSR
 80026b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80026b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ba:	f3ef 8310 	mrs	r3, PRIMASK
 80026be:	607b      	str	r3, [r7, #4]
  return(result);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <osKernelInitialize+0x32>
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <osKernelInitialize+0x60>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d109      	bne.n	80026e2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026ce:	f3ef 8311 	mrs	r3, BASEPRI
 80026d2:	603b      	str	r3, [r7, #0]
  return(result);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80026da:	f06f 0305 	mvn.w	r3, #5
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e00c      	b.n	80026fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <osKernelInitialize+0x60>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <osKernelInitialize+0x60>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e002      	b.n	80026fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	2000011c 	.word	0x2000011c

0800270c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002712:	f3ef 8305 	mrs	r3, IPSR
 8002716:	60bb      	str	r3, [r7, #8]
  return(result);
 8002718:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271e:	f3ef 8310 	mrs	r3, PRIMASK
 8002722:	607b      	str	r3, [r7, #4]
  return(result);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <osKernelStart+0x32>
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <osKernelStart+0x64>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d109      	bne.n	8002746 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002732:	f3ef 8311 	mrs	r3, BASEPRI
 8002736:	603b      	str	r3, [r7, #0]
  return(result);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <osKernelStart+0x3a>
    stat = osErrorISR;
 800273e:	f06f 0305 	mvn.w	r3, #5
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e00e      	b.n	8002764 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <osKernelStart+0x64>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <osKernelStart+0x64>)
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002754:	f001 f878 	bl	8003848 <vTaskStartScheduler>
      stat = osOK;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e002      	b.n	8002764 <osKernelStart+0x58>
    } else {
      stat = osError;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002764:	68fb      	ldr	r3, [r7, #12]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000011c 	.word	0x2000011c

08002774 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b092      	sub	sp, #72	; 0x48
 8002778:	af04      	add	r7, sp, #16
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002784:	f3ef 8305 	mrs	r3, IPSR
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 8094 	bne.w	80028ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002792:	f3ef 8310 	mrs	r3, PRIMASK
 8002796:	623b      	str	r3, [r7, #32]
  return(result);
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 808d 	bne.w	80028ba <osThreadNew+0x146>
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <osThreadNew+0x150>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d106      	bne.n	80027b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027a8:	f3ef 8311 	mrs	r3, BASEPRI
 80027ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f040 8082 	bne.w	80028ba <osThreadNew+0x146>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d07e      	beq.n	80028ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80027c0:	2318      	movs	r3, #24
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80027c4:	2300      	movs	r3, #0
 80027c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80027c8:	f107 031b 	add.w	r3, r7, #27
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d045      	beq.n	8002866 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <osThreadNew+0x74>
        name = attr->name;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <osThreadNew+0x9a>
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	2b38      	cmp	r3, #56	; 0x38
 8002800:	d805      	bhi.n	800280e <osThreadNew+0x9a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <osThreadNew+0x9e>
        return (NULL);
 800280e:	2300      	movs	r3, #0
 8002810:	e054      	b.n	80028bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00e      	beq.n	8002848 <osThreadNew+0xd4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b5b      	cmp	r3, #91	; 0x5b
 8002830:	d90a      	bls.n	8002848 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <osThreadNew+0xd4>
        mem = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	e010      	b.n	800286a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10c      	bne.n	800286a <osThreadNew+0xf6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <osThreadNew+0xf6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <osThreadNew+0xf6>
          mem = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
 8002864:	e001      	b.n	800286a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	2b01      	cmp	r3, #1
 800286e:	d110      	bne.n	8002892 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002878:	9202      	str	r2, [sp, #8]
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002884:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fe12 	bl	80034b0 <xTaskCreateStatic>
 800288c:	4603      	mov	r3, r0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e013      	b.n	80028ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d110      	bne.n	80028ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	b29a      	uxth	r2, r3
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fe5c 	bl	8003568 <xTaskCreate>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <osThreadNew+0x146>
          hTask = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028ba:	697b      	ldr	r3, [r7, #20]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3738      	adds	r7, #56	; 0x38
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000011c 	.word	0x2000011c

080028c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028d0:	f3ef 8305 	mrs	r3, IPSR
 80028d4:	613b      	str	r3, [r7, #16]
  return(result);
 80028d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028dc:	f3ef 8310 	mrs	r3, PRIMASK
 80028e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <osDelay+0x34>
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <osDelay+0x58>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d109      	bne.n	8002904 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028f0:	f3ef 8311 	mrs	r3, BASEPRI
 80028f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <osDelay+0x3c>
    stat = osErrorISR;
 80028fc:	f06f 0305 	mvn.w	r3, #5
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e007      	b.n	8002914 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <osDelay+0x4c>
      vTaskDelay(ticks);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 ff66 	bl	80037e0 <vTaskDelay>
    }
  }

  return (stat);
 8002914:	697b      	ldr	r3, [r7, #20]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000011c 	.word	0x2000011c

08002924 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a06      	ldr	r2, [pc, #24]	; (800294c <vApplicationGetIdleTaskMemory+0x28>)
 8002934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4a05      	ldr	r2, [pc, #20]	; (8002950 <vApplicationGetIdleTaskMemory+0x2c>)
 800293a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	601a      	str	r2, [r3, #0]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	20000120 	.word	0x20000120
 8002950:	2000017c 	.word	0x2000017c

08002954 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <vApplicationGetTimerTaskMemory+0x2c>)
 8002964:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4a06      	ldr	r2, [pc, #24]	; (8002984 <vApplicationGetTimerTaskMemory+0x30>)
 800296a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	2000037c 	.word	0x2000037c
 8002984:	200003d8 	.word	0x200003d8

08002988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f103 0208 	add.w	r2, r3, #8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f103 0208 	add.w	r2, r3, #8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f103 0208 	add.w	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d103      	bne.n	8002a44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e00c      	b.n	8002a5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3308      	adds	r3, #8
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e002      	b.n	8002a52 <vListInsert+0x2e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d2f6      	bcs.n	8002a4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6892      	ldr	r2, [r2, #8]
 8002aaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6852      	ldr	r2, [r2, #4]
 8002ab4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d103      	bne.n	8002ac8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
	...

08002ae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b12:	f001 ffcb 	bl	8004aac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	441a      	add	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	3b01      	subs	r3, #1
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	441a      	add	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	22ff      	movs	r2, #255	; 0xff
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d114      	bne.n	8002b92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01a      	beq.n	8002ba6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3310      	adds	r3, #16
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 f8f1 	bl	8003d5c <xTaskRemoveFromEventList>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <xQueueGenericReset+0xcc>)
 8002b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	e009      	b.n	8002ba6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3310      	adds	r3, #16
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fef6 	bl	8002988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3324      	adds	r3, #36	; 0x24
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fef1 	bl	8002988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ba6:	f001 ffb1 	bl	8004b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002baa:	2301      	movs	r3, #1
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	e000ed04 	.word	0xe000ed04

08002bb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	; 0x38
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <xQueueGenericCreateStatic+0x52>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <xQueueGenericCreateStatic+0x56>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xQueueGenericCreateStatic+0x58>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	623b      	str	r3, [r7, #32]
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <xQueueGenericCreateStatic+0x7e>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <xQueueGenericCreateStatic+0x82>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <xQueueGenericCreateStatic+0x84>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	61fb      	str	r3, [r7, #28]
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c56:	2350      	movs	r3, #80	; 0x50
 8002c58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b50      	cmp	r3, #80	; 0x50
 8002c5e:	d00a      	beq.n	8002c76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61bb      	str	r3, [r7, #24]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00d      	beq.n	8002c9c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f805 	bl	8002ca6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3730      	adds	r7, #48	; 0x30
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e002      	b.n	8002cc8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	69b8      	ldr	r0, [r7, #24]
 8002cd8:	f7ff ff06 	bl	8002ae8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08e      	sub	sp, #56	; 0x38
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <xQueueGenericSend+0x32>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d103      	bne.n	8002d2c <xQueueGenericSend+0x40>
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <xQueueGenericSend+0x44>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <xQueueGenericSend+0x46>
 8002d30:	2300      	movs	r3, #0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <xQueueGenericSend+0x60>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d103      	bne.n	8002d5a <xQueueGenericSend+0x6e>
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <xQueueGenericSend+0x72>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueGenericSend+0x74>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueGenericSend+0x8e>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	623b      	str	r3, [r7, #32]
}
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d7a:	f001 f9b1 	bl	80040e0 <xTaskGetSchedulerState>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <xQueueGenericSend+0x9e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <xQueueGenericSend+0xa2>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericSend+0xa4>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueGenericSend+0xbe>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	61fb      	str	r3, [r7, #28]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002daa:	f001 fe7f 	bl	8004aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <xQueueGenericSend+0xd4>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d129      	bne.n	8002e14 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc6:	f000 fa07 	bl	80031d8 <prvCopyDataToQueue>
 8002dca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	3324      	adds	r3, #36	; 0x24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 ffbf 	bl	8003d5c <xTaskRemoveFromEventList>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002de4:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <xQueueGenericSend+0x1f8>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	e00a      	b.n	8002e0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <xQueueGenericSend+0x1f8>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e0c:	f001 fe7e 	bl	8004b0c <vPortExitCritical>
				return pdPASS;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e063      	b.n	8002edc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e1a:	f001 fe77 	bl	8004b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e05c      	b.n	8002edc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fff9 	bl	8003e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e36:	f001 fe69 	bl	8004b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e3a:	f000 fd6b 	bl	8003914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e3e:	f001 fe35 	bl	8004aac <vPortEnterCritical>
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d103      	bne.n	8002e58 <xQueueGenericSend+0x16c>
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d103      	bne.n	8002e6e <xQueueGenericSend+0x182>
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6e:	f001 fe4d 	bl	8004b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e72:	1d3a      	adds	r2, r7, #4
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 ffe8 	bl	8003e50 <xTaskCheckForTimeOut>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d124      	bne.n	8002ed0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e88:	f000 fa9e 	bl	80033c8 <prvIsQueueFull>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	3310      	adds	r3, #16
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 ff0e 	bl	8003cbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea2:	f000 fa29 	bl	80032f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ea6:	f000 fd43 	bl	8003930 <xTaskResumeAll>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f af7c 	bne.w	8002daa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <xQueueGenericSend+0x1f8>)
 8002eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	e772      	b.n	8002daa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec6:	f000 fa17 	bl	80032f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eca:	f000 fd31 	bl	8003930 <xTaskResumeAll>
 8002ece:	e76c      	b.n	8002daa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed2:	f000 fa11 	bl	80032f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ed6:	f000 fd2b 	bl	8003930 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002eda:	2300      	movs	r3, #0
		}
	}
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3738      	adds	r7, #56	; 0x38
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <xQueueGenericSendFromISR+0x3c>
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <xQueueGenericSendFromISR+0x40>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <xQueueGenericSendFromISR+0x42>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	623b      	str	r3, [r7, #32]
}
 8002f40:	bf00      	nop
 8002f42:	e7fe      	b.n	8002f42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d103      	bne.n	8002f52 <xQueueGenericSendFromISR+0x6a>
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <xQueueGenericSendFromISR+0x6e>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueGenericSendFromISR+0x70>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61fb      	str	r3, [r7, #28]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f72:	f001 fe5d 	bl	8004c30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f76:	f3ef 8211 	mrs	r2, BASEPRI
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	61ba      	str	r2, [r7, #24]
 8002f8c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <xQueueGenericSendFromISR+0xbc>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d12c      	bne.n	8002ffe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb4:	f000 f910 	bl	80031d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fb8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d112      	bne.n	8002fe8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	3324      	adds	r3, #36	; 0x24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fec4 	bl	8003d5c <xTaskRemoveFromEventList>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00e      	beq.n	8002ff8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e007      	b.n	8002ff8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fec:	3301      	adds	r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	b25a      	sxtb	r2, r3
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002ffc:	e001      	b.n	8003002 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800300c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003010:	4618      	mov	r0, r3
 8003012:	3738      	adds	r7, #56	; 0x38
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003024:	2300      	movs	r3, #0
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <xQueueReceive+0x30>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	623b      	str	r3, [r7, #32]
}
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <xQueueReceive+0x3e>
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <xQueueReceive+0x42>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <xQueueReceive+0x44>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <xQueueReceive+0x5e>
	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	61fb      	str	r3, [r7, #28]
}
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003076:	f001 f833 	bl	80040e0 <xTaskGetSchedulerState>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <xQueueReceive+0x6e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <xQueueReceive+0x72>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <xQueueReceive+0x74>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xQueueReceive+0x8e>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	61bb      	str	r3, [r7, #24]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80030a6:	f001 fd01 	bl	8004aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01f      	beq.n	80030f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ba:	f000 f8f7 	bl	80032ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	1e5a      	subs	r2, r3, #1
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00f      	beq.n	80030ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	3310      	adds	r3, #16
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fe42 	bl	8003d5c <xTaskRemoveFromEventList>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <xQueueReceive+0x1bc>)
 80030e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030ee:	f001 fd0d 	bl	8004b0c <vPortExitCritical>
				return pdPASS;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e069      	b.n	80031ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030fc:	f001 fd06 	bl	8004b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003100:	2300      	movs	r3, #0
 8003102:	e062      	b.n	80031ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fe88 	bl	8003e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003118:	f001 fcf8 	bl	8004b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800311c:	f000 fbfa 	bl	8003914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003120:	f001 fcc4 	bl	8004aac <vPortEnterCritical>
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800312a:	b25b      	sxtb	r3, r3
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d103      	bne.n	800313a <xQueueReceive+0x122>
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003140:	b25b      	sxtb	r3, r3
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d103      	bne.n	8003150 <xQueueReceive+0x138>
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003150:	f001 fcdc 	bl	8004b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003154:	1d3a      	adds	r2, r7, #4
 8003156:	f107 0310 	add.w	r3, r7, #16
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fe77 	bl	8003e50 <xTaskCheckForTimeOut>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d123      	bne.n	80031b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800316a:	f000 f917 	bl	800339c <prvIsQueueEmpty>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d017      	beq.n	80031a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	3324      	adds	r3, #36	; 0x24
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd9d 	bl	8003cbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003184:	f000 f8b8 	bl	80032f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003188:	f000 fbd2 	bl	8003930 <xTaskResumeAll>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d189      	bne.n	80030a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <xQueueReceive+0x1bc>)
 8003194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	e780      	b.n	80030a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a6:	f000 f8a7 	bl	80032f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031aa:	f000 fbc1 	bl	8003930 <xTaskResumeAll>
 80031ae:	e77a      	b.n	80030a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b2:	f000 f8a1 	bl	80032f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031b6:	f000 fbbb 	bl	8003930 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031bc:	f000 f8ee 	bl	800339c <prvIsQueueEmpty>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f43f af6f 	beq.w	80030a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3730      	adds	r7, #48	; 0x30
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d14d      	bne.n	800329a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 ff8a 	bl	800411c <xTaskPriorityDisinherit>
 8003208:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	e043      	b.n	800329a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d119      	bne.n	800324c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6898      	ldr	r0, [r3, #8]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	461a      	mov	r2, r3
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	f001 ff54 	bl	80050d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	d32b      	bcc.n	800329a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	e026      	b.n	800329a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68d8      	ldr	r0, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	461a      	mov	r2, r3
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	f001 ff3a 	bl	80050d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	425b      	negs	r3, r3
 8003266:	441a      	add	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d207      	bcs.n	8003288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	425b      	negs	r3, r3
 8003282:	441a      	add	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d105      	bne.n	800329a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	3b01      	subs	r3, #1
 8003298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032a2:	697b      	ldr	r3, [r7, #20]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	441a      	add	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d303      	bcc.n	80032e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68d9      	ldr	r1, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	461a      	mov	r2, r3
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f001 fef0 	bl	80050d0 <memcpy>
	}
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003300:	f001 fbd4 	bl	8004aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800330c:	e011      	b.n	8003332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3324      	adds	r3, #36	; 0x24
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd1e 	bl	8003d5c <xTaskRemoveFromEventList>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003326:	f000 fdf5 	bl	8003f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	3b01      	subs	r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	dce9      	bgt.n	800330e <prvUnlockQueue+0x16>
 800333a:	e000      	b.n	800333e <prvUnlockQueue+0x46>
					break;
 800333c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003346:	f001 fbe1 	bl	8004b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800334a:	f001 fbaf 	bl	8004aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003356:	e011      	b.n	800337c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3310      	adds	r3, #16
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fcf9 	bl	8003d5c <xTaskRemoveFromEventList>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003370:	f000 fdd0 	bl	8003f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	3b01      	subs	r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800337c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003380:	2b00      	cmp	r3, #0
 8003382:	dce9      	bgt.n	8003358 <prvUnlockQueue+0x60>
 8003384:	e000      	b.n	8003388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	22ff      	movs	r2, #255	; 0xff
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003390:	f001 fbbc 	bl	8004b0c <vPortExitCritical>
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033a4:	f001 fb82 	bl	8004aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e001      	b.n	80033ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ba:	f001 fba7 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d0:	f001 fb6c 	bl	8004aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d102      	bne.n	80033e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e001      	b.n	80033ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ea:	f001 fb8f 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e014      	b.n	8003432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003408:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <vQueueAddToRegistry+0x4c>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003414:	490b      	ldr	r1, [pc, #44]	; (8003444 <vQueueAddToRegistry+0x4c>)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <vQueueAddToRegistry+0x4c>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800342a:	e006      	b.n	800343a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b07      	cmp	r3, #7
 8003436:	d9e7      	bls.n	8003408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	200007d8 	.word	0x200007d8

08003448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003458:	f001 fb28 	bl	8004aac <vPortEnterCritical>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003462:	b25b      	sxtb	r3, r3
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d103      	bne.n	8003472 <vQueueWaitForMessageRestricted+0x2a>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003478:	b25b      	sxtb	r3, r3
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d103      	bne.n	8003488 <vQueueWaitForMessageRestricted+0x40>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003488:	f001 fb40 	bl	8004b0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3324      	adds	r3, #36	; 0x24
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fc31 	bl	8003d04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7ff ff28 	bl	80032f8 <prvUnlockQueue>
	}
 80034a8:	bf00      	nop
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08e      	sub	sp, #56	; 0x38
 80034b4:	af04      	add	r7, sp, #16
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <xTaskCreateStatic+0x2a>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	623b      	str	r3, [r7, #32]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	61fb      	str	r3, [r7, #28]
}
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034f6:	235c      	movs	r3, #92	; 0x5c
 80034f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b5c      	cmp	r3, #92	; 0x5c
 80034fe:	d00a      	beq.n	8003516 <xTaskCreateStatic+0x66>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	61bb      	str	r3, [r7, #24]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01e      	beq.n	800355a <xTaskCreateStatic+0xaa>
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01b      	beq.n	800355a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800352a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	9302      	str	r3, [sp, #8]
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f850 	bl	80035f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003554:	f000 f8d4 	bl	8003700 <prvAddNewTaskToReadyList>
 8003558:	e001      	b.n	800355e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800355e:	697b      	ldr	r3, [r7, #20]
	}
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	; 0x30
 800356c:	af04      	add	r7, sp, #16
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4618      	mov	r0, r3
 800357e:	f001 fb95 	bl	8004cac <pvPortMalloc>
 8003582:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00e      	beq.n	80035a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800358a:	205c      	movs	r0, #92	; 0x5c
 800358c:	f001 fb8e 	bl	8004cac <pvPortMalloc>
 8003590:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
 800359e:	e005      	b.n	80035ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f001 fc47 	bl	8004e34 <vPortFree>
 80035a6:	e001      	b.n	80035ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d017      	beq.n	80035e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	2300      	movs	r3, #0
 80035be:	9303      	str	r3, [sp, #12]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f80e 	bl	80035f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d6:	69f8      	ldr	r0, [r7, #28]
 80035d8:	f000 f892 	bl	8003700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035dc:	2301      	movs	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	e002      	b.n	80035e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035e8:	69bb      	ldr	r3, [r7, #24]
	}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3720      	adds	r7, #32
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b088      	sub	sp, #32
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	21a5      	movs	r1, #165	; 0xa5
 800360c:	f001 fd6e 	bl	80050ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800361a:	3b01      	subs	r3, #1
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f023 0307 	bic.w	r3, r3, #7
 8003628:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	617b      	str	r3, [r7, #20]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e012      	b.n	8003676 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	7819      	ldrb	r1, [r3, #0]
 8003658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	3334      	adds	r3, #52	; 0x34
 8003660:	460a      	mov	r2, r1
 8003662:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d9e9      	bls.n	8003650 <prvInitialiseNewTask+0x5e>
 800367c:	e000      	b.n	8003680 <prvInitialiseNewTask+0x8e>
		{
			break;
 800367e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	2b37      	cmp	r3, #55	; 0x37
 800368c:	d901      	bls.n	8003692 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800368e:	2337      	movs	r3, #55	; 0x37
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800369c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	2200      	movs	r2, #0
 80036a2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f98c 	bl	80029c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	3318      	adds	r3, #24
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f987 	bl	80029c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	2200      	movs	r2, #0
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	69b8      	ldr	r0, [r7, #24]
 80036e2:	f001 f8ef 	bl	80048c4 <pxPortInitialiseStack>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036f8:	bf00      	nop
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003708:	f001 f9d0 	bl	8004aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003716:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800371e:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <prvAddNewTaskToReadyList+0xc4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d110      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800372c:	f000 fc16 	bl	8003f5c <prvInitialiseTaskLists>
 8003730:	e00d      	b.n	800374e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	429a      	cmp	r2, r3
 8003746:	d802      	bhi.n	800374e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 8003756:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <prvAddNewTaskToReadyList+0xd0>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <prvAddNewTaskToReadyList+0xd4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d903      	bls.n	8003774 <prvAddNewTaskToReadyList+0x74>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <prvAddNewTaskToReadyList+0xd4>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <prvAddNewTaskToReadyList+0xd8>)
 8003782:	441a      	add	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7ff f927 	bl	80029de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003790:	f001 f9bc 	bl	8004b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <prvAddNewTaskToReadyList+0xcc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <prvAddNewTaskToReadyList+0xc8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d207      	bcs.n	80037ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <prvAddNewTaskToReadyList+0xdc>)
 80037ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000cec 	.word	0x20000cec
 80037c8:	20000818 	.word	0x20000818
 80037cc:	20000cf8 	.word	0x20000cf8
 80037d0:	20000d08 	.word	0x20000d08
 80037d4:	20000cf4 	.word	0x20000cf4
 80037d8:	2000081c 	.word	0x2000081c
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d017      	beq.n	8003822 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <vTaskDelay+0x60>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <vTaskDelay+0x30>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60bb      	str	r3, [r7, #8]
}
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003810:	f000 f880 	bl	8003914 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003814:	2100      	movs	r1, #0
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fcee 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800381c:	f000 f888 	bl	8003930 <xTaskResumeAll>
 8003820:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <vTaskDelay+0x64>)
 800382a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000d14 	.word	0x20000d14
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003856:	463a      	mov	r2, r7
 8003858:	1d39      	adds	r1, r7, #4
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff f860 	bl	8002924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003864:	6839      	ldr	r1, [r7, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	9202      	str	r2, [sp, #8]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	2300      	movs	r3, #0
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2300      	movs	r3, #0
 8003874:	460a      	mov	r2, r1
 8003876:	4921      	ldr	r1, [pc, #132]	; (80038fc <vTaskStartScheduler+0xb4>)
 8003878:	4821      	ldr	r0, [pc, #132]	; (8003900 <vTaskStartScheduler+0xb8>)
 800387a:	f7ff fe19 	bl	80034b0 <xTaskCreateStatic>
 800387e:	4603      	mov	r3, r0
 8003880:	4a20      	ldr	r2, [pc, #128]	; (8003904 <vTaskStartScheduler+0xbc>)
 8003882:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <vTaskStartScheduler+0xbc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e001      	b.n	8003896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d102      	bne.n	80038a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800389c:	f000 fd00 	bl	80042a0 <xTimerCreateTimerTask>
 80038a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d116      	bne.n	80038d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	613b      	str	r3, [r7, #16]
}
 80038ba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <vTaskStartScheduler+0xc0>)
 80038be:	f04f 32ff 	mov.w	r2, #4294967295
 80038c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <vTaskStartScheduler+0xc4>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <vTaskStartScheduler+0xc8>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038d0:	f001 f87a 	bl	80049c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038d4:	e00e      	b.n	80038f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d10a      	bne.n	80038f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60fb      	str	r3, [r7, #12]
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <vTaskStartScheduler+0xaa>
}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08005a44 	.word	0x08005a44
 8003900:	08003f2d 	.word	0x08003f2d
 8003904:	20000d10 	.word	0x20000d10
 8003908:	20000d0c 	.word	0x20000d0c
 800390c:	20000cf8 	.word	0x20000cf8
 8003910:	20000cf0 	.word	0x20000cf0

08003914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <vTaskSuspendAll+0x18>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a03      	ldr	r2, [pc, #12]	; (800392c <vTaskSuspendAll+0x18>)
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000d14 	.word	0x20000d14

08003930 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800393e:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <xTaskResumeAll+0x118>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <xTaskResumeAll+0x2c>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	603b      	str	r3, [r7, #0]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800395c:	f001 f8a6 	bl	8004aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <xTaskResumeAll+0x118>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3b01      	subs	r3, #1
 8003966:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <xTaskResumeAll+0x118>)
 8003968:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800396a:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <xTaskResumeAll+0x118>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d162      	bne.n	8003a38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <xTaskResumeAll+0x11c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d05e      	beq.n	8003a38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800397a:	e02f      	b.n	80039dc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <xTaskResumeAll+0x120>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3318      	adds	r3, #24
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f883 	bl	8002a94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3304      	adds	r3, #4
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f87e 	bl	8002a94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <xTaskResumeAll+0x124>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d903      	bls.n	80039ac <xTaskResumeAll+0x7c>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <xTaskResumeAll+0x124>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <xTaskResumeAll+0x128>)
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f7ff f80b 	bl	80029de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <xTaskResumeAll+0x12c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <xTaskResumeAll+0x130>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <xTaskResumeAll+0x120>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1cb      	bne.n	800397c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039ea:	f000 fb55 	bl	8004098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <xTaskResumeAll+0x134>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039fa:	f000 f845 	bl	8003a88 <xTaskIncrementTick>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <xTaskResumeAll+0x130>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f1      	bne.n	80039fa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <xTaskResumeAll+0x134>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a1c:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <xTaskResumeAll+0x130>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <xTaskResumeAll+0x138>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a38:	f001 f868 	bl	8004b0c <vPortExitCritical>

	return xAlreadyYielded;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000d14 	.word	0x20000d14
 8003a4c:	20000cec 	.word	0x20000cec
 8003a50:	20000cac 	.word	0x20000cac
 8003a54:	20000cf4 	.word	0x20000cf4
 8003a58:	2000081c 	.word	0x2000081c
 8003a5c:	20000818 	.word	0x20000818
 8003a60:	20000d00 	.word	0x20000d00
 8003a64:	20000cfc 	.word	0x20000cfc
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <xTaskGetTickCount+0x18>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a78:	687b      	ldr	r3, [r7, #4]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20000cf0 	.word	0x20000cf0

08003a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a92:	4b51      	ldr	r3, [pc, #324]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 808e 	bne.w	8003bb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a9c:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003aa4:	4a4d      	ldr	r2, [pc, #308]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d120      	bne.n	8003af2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	603b      	str	r3, [r7, #0]
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <xTaskIncrementTick+0x46>
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a41      	ldr	r2, [pc, #260]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	4a3f      	ldr	r2, [pc, #252]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	f000 fad3 	bl	8004098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <xTaskIncrementTick+0x164>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d34e      	bcc.n	8003b9a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xTaskIncrementTick+0x82>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xTaskIncrementTick+0x84>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b10:	4b36      	ldr	r3, [pc, #216]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b12:	f04f 32ff 	mov.w	r2, #4294967295
 8003b16:	601a      	str	r2, [r3, #0]
					break;
 8003b18:	e03f      	b.n	8003b9a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d203      	bcs.n	8003b3a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b32:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6013      	str	r3, [r2, #0]
						break;
 8003b38:	e02f      	b.n	8003b9a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe ffa8 	bl	8002a94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe ff9f 	bl	8002a94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d903      	bls.n	8003b6a <xTaskIncrementTick+0xe2>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <xTaskIncrementTick+0x16c>)
 8003b78:	441a      	add	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f7fe ff2c 	bl	80029de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <xTaskIncrementTick+0x170>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d3b3      	bcc.n	8003afc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b98:	e7b0      	b.n	8003afc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <xTaskIncrementTick+0x170>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	4914      	ldr	r1, [pc, #80]	; (8003bf4 <xTaskIncrementTick+0x16c>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d907      	bls.n	8003bc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e004      	b.n	8003bc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <xTaskIncrementTick+0x174>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <xTaskIncrementTick+0x174>)
 8003bc0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <xTaskIncrementTick+0x178>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000d14 	.word	0x20000d14
 8003bdc:	20000cf0 	.word	0x20000cf0
 8003be0:	20000ca4 	.word	0x20000ca4
 8003be4:	20000ca8 	.word	0x20000ca8
 8003be8:	20000d04 	.word	0x20000d04
 8003bec:	20000d0c 	.word	0x20000d0c
 8003bf0:	20000cf4 	.word	0x20000cf4
 8003bf4:	2000081c 	.word	0x2000081c
 8003bf8:	20000818 	.word	0x20000818
 8003bfc:	20000cfc 	.word	0x20000cfc
 8003c00:	20000d00 	.word	0x20000d00

08003c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c0a:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <vTaskSwitchContext+0xa4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c12:	4b26      	ldr	r3, [pc, #152]	; (8003cac <vTaskSwitchContext+0xa8>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c18:	e041      	b.n	8003c9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <vTaskSwitchContext+0xa8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <vTaskSwitchContext+0xac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e010      	b.n	8003c4a <vTaskSwitchContext+0x46>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	607b      	str	r3, [r7, #4]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <vTaskSwitchContext+0x3e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	491a      	ldr	r1, [pc, #104]	; (8003cb4 <vTaskSwitchContext+0xb0>)
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0e4      	beq.n	8003c28 <vTaskSwitchContext+0x24>
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <vTaskSwitchContext+0xb0>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d104      	bne.n	8003c8e <vTaskSwitchContext+0x8a>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <vTaskSwitchContext+0xb4>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <vTaskSwitchContext+0xac>)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6013      	str	r3, [r2, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	20000d14 	.word	0x20000d14
 8003cac:	20000d00 	.word	0x20000d00
 8003cb0:	20000cf4 	.word	0x20000cf4
 8003cb4:	2000081c 	.word	0x2000081c
 8003cb8:	20000818 	.word	0x20000818

08003cbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60fb      	str	r3, [r7, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <vTaskPlaceOnEventList+0x44>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe fe9a 	bl	8002a24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f000 fa80 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000818 	.word	0x20000818

08003d04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	617b      	str	r3, [r7, #20]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3318      	adds	r3, #24
 8003d32:	4619      	mov	r1, r3
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7fe fe52 	bl	80029de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68b8      	ldr	r0, [r7, #8]
 8003d4a:	f000 fa55 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
	}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000818 	.word	0x20000818

08003d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60fb      	str	r3, [r7, #12]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fe81 	bl	8002a94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <xTaskRemoveFromEventList+0xb0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11d      	bne.n	8003dd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fe78 	bl	8002a94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <xTaskRemoveFromEventList+0xb4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d903      	bls.n	8003db8 <xTaskRemoveFromEventList+0x5c>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <xTaskRemoveFromEventList+0xb4>)
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <xTaskRemoveFromEventList+0xb8>)
 8003dc6:	441a      	add	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7fe fe05 	bl	80029de <vListInsertEnd>
 8003dd4:	e005      	b.n	8003de2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3318      	adds	r3, #24
 8003dda:	4619      	mov	r1, r3
 8003ddc:	480e      	ldr	r0, [pc, #56]	; (8003e18 <xTaskRemoveFromEventList+0xbc>)
 8003dde:	f7fe fdfe 	bl	80029de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <xTaskRemoveFromEventList+0xc0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d905      	bls.n	8003dfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <xTaskRemoveFromEventList+0xc4>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e001      	b.n	8003e00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e00:	697b      	ldr	r3, [r7, #20]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000d14 	.word	0x20000d14
 8003e10:	20000cf4 	.word	0x20000cf4
 8003e14:	2000081c 	.word	0x2000081c
 8003e18:	20000cac 	.word	0x20000cac
 8003e1c:	20000818 	.word	0x20000818
 8003e20:	20000d00 	.word	0x20000d00

08003e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <vTaskInternalSetTimeOutState+0x24>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <vTaskInternalSetTimeOutState+0x28>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	605a      	str	r2, [r3, #4]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000d04 	.word	0x20000d04
 8003e4c:	20000cf0 	.word	0x20000cf0

08003e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e92:	f000 fe0b 	bl	8004aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <xTaskCheckForTimeOut+0xbc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d102      	bne.n	8003eb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	e023      	b.n	8003efe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <xTaskCheckForTimeOut+0xc0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d007      	beq.n	8003ed2 <xTaskCheckForTimeOut+0x82>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	e015      	b.n	8003efe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d20b      	bcs.n	8003ef4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff9b 	bl	8003e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e004      	b.n	8003efe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003efe:	f000 fe05 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 8003f02:	69fb      	ldr	r3, [r7, #28]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000cf0 	.word	0x20000cf0
 8003f10:	20000d04 	.word	0x20000d04

08003f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <vTaskMissedYield+0x14>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000d00 	.word	0x20000d00

08003f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f34:	f000 f852 	bl	8003fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <prvIdleTask+0x28>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d9f9      	bls.n	8003f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <prvIdleTask+0x2c>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f50:	e7f0      	b.n	8003f34 <prvIdleTask+0x8>
 8003f52:	bf00      	nop
 8003f54:	2000081c 	.word	0x2000081c
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	e00c      	b.n	8003f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <prvInitialiseTaskLists+0x60>)
 8003f74:	4413      	add	r3, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fd06 	bl	8002988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b37      	cmp	r3, #55	; 0x37
 8003f86:	d9ef      	bls.n	8003f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f88:	480d      	ldr	r0, [pc, #52]	; (8003fc0 <prvInitialiseTaskLists+0x64>)
 8003f8a:	f7fe fcfd 	bl	8002988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f8e:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <prvInitialiseTaskLists+0x68>)
 8003f90:	f7fe fcfa 	bl	8002988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f94:	480c      	ldr	r0, [pc, #48]	; (8003fc8 <prvInitialiseTaskLists+0x6c>)
 8003f96:	f7fe fcf7 	bl	8002988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f9a:	480c      	ldr	r0, [pc, #48]	; (8003fcc <prvInitialiseTaskLists+0x70>)
 8003f9c:	f7fe fcf4 	bl	8002988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fa0:	480b      	ldr	r0, [pc, #44]	; (8003fd0 <prvInitialiseTaskLists+0x74>)
 8003fa2:	f7fe fcf1 	bl	8002988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <prvInitialiseTaskLists+0x78>)
 8003fa8:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <prvInitialiseTaskLists+0x64>)
 8003faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <prvInitialiseTaskLists+0x7c>)
 8003fae:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <prvInitialiseTaskLists+0x68>)
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000081c 	.word	0x2000081c
 8003fc0:	20000c7c 	.word	0x20000c7c
 8003fc4:	20000c90 	.word	0x20000c90
 8003fc8:	20000cac 	.word	0x20000cac
 8003fcc:	20000cc0 	.word	0x20000cc0
 8003fd0:	20000cd8 	.word	0x20000cd8
 8003fd4:	20000ca4 	.word	0x20000ca4
 8003fd8:	20000ca8 	.word	0x20000ca8

08003fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe2:	e019      	b.n	8004018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fe4:	f000 fd62 	bl	8004aac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <prvCheckTasksWaitingTermination+0x50>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fd4d 	bl	8002a94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <prvCheckTasksWaitingTermination+0x54>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <prvCheckTasksWaitingTermination+0x54>)
 8004002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <prvCheckTasksWaitingTermination+0x58>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3b01      	subs	r3, #1
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <prvCheckTasksWaitingTermination+0x58>)
 800400c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800400e:	f000 fd7d 	bl	8004b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f810 	bl	8004038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <prvCheckTasksWaitingTermination+0x58>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e1      	bne.n	8003fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000cc0 	.word	0x20000cc0
 8004030:	20000cec 	.word	0x20000cec
 8004034:	20000cd4 	.word	0x20000cd4

08004038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004046:	2b00      	cmp	r3, #0
 8004048:	d108      	bne.n	800405c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fef0 	bl	8004e34 <vPortFree>
				vPortFree( pxTCB );
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 feed 	bl	8004e34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800405a:	e018      	b.n	800408e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004062:	2b01      	cmp	r3, #1
 8004064:	d103      	bne.n	800406e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fee4 	bl	8004e34 <vPortFree>
	}
 800406c:	e00f      	b.n	800408e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004074:	2b02      	cmp	r3, #2
 8004076:	d00a      	beq.n	800408e <prvDeleteTCB+0x56>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <prvDeleteTCB+0x54>
	}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <prvResetNextTaskUnblockTime+0x40>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <prvResetNextTaskUnblockTime+0x14>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <prvResetNextTaskUnblockTime+0x16>
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <prvResetNextTaskUnblockTime+0x44>)
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ba:	e008      	b.n	80040ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvResetNextTaskUnblockTime+0x40>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a04      	ldr	r2, [pc, #16]	; (80040dc <prvResetNextTaskUnblockTime+0x44>)
 80040cc:	6013      	str	r3, [r2, #0]
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	20000ca4 	.word	0x20000ca4
 80040dc:	20000d0c 	.word	0x20000d0c

080040e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <xTaskGetSchedulerState+0x34>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040ee:	2301      	movs	r3, #1
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e008      	b.n	8004106 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <xTaskGetSchedulerState+0x38>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040fc:	2302      	movs	r3, #2
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	e001      	b.n	8004106 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004106:	687b      	ldr	r3, [r7, #4]
	}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000cf8 	.word	0x20000cf8
 8004118:	20000d14 	.word	0x20000d14

0800411c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d056      	beq.n	80041e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <xTaskPriorityDisinherit+0xd0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	429a      	cmp	r2, r3
 800413a:	d00a      	beq.n	8004152 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	60bb      	str	r3, [r7, #8]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	429a      	cmp	r2, r3
 8004184:	d02c      	beq.n	80041e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	2b00      	cmp	r3, #0
 800418c:	d128      	bne.n	80041e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fc7e 	bl	8002a94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <xTaskPriorityDisinherit+0xd4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d903      	bls.n	80041c0 <xTaskPriorityDisinherit+0xa4>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <xTaskPriorityDisinherit+0xd4>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <xTaskPriorityDisinherit+0xd8>)
 80041ce:	441a      	add	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fe fc01 	bl	80029de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041e0:	697b      	ldr	r3, [r7, #20]
	}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000818 	.word	0x20000818
 80041f0:	20000cf4 	.word	0x20000cf4
 80041f4:	2000081c 	.word	0x2000081c

080041f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004202:	4b21      	ldr	r3, [pc, #132]	; (8004288 <prvAddCurrentTaskToDelayedList+0x90>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004208:	4b20      	ldr	r3, [pc, #128]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fc40 	bl	8002a94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d10a      	bne.n	8004232 <prvAddCurrentTaskToDelayedList+0x3a>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4819      	ldr	r0, [pc, #100]	; (8004290 <prvAddCurrentTaskToDelayedList+0x98>)
 800422c:	f7fe fbd7 	bl	80029de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004230:	e026      	b.n	8004280 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	429a      	cmp	r2, r3
 8004248:	d209      	bcs.n	800425e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <prvAddCurrentTaskToDelayedList+0x9c>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fe fbe4 	bl	8002a24 <vListInsert>
}
 800425c:	e010      	b.n	8004280 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7fe fbda 	bl	8002a24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d202      	bcs.n	8004280 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <prvAddCurrentTaskToDelayedList+0xa4>)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000cf0 	.word	0x20000cf0
 800428c:	20000818 	.word	0x20000818
 8004290:	20000cd8 	.word	0x20000cd8
 8004294:	20000ca8 	.word	0x20000ca8
 8004298:	20000ca4 	.word	0x20000ca4
 800429c:	20000d0c 	.word	0x20000d0c

080042a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042aa:	f000 facb 	bl	8004844 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <xTimerCreateTimerTask+0x80>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d021      	beq.n	80042fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042be:	1d3a      	adds	r2, r7, #4
 80042c0:	f107 0108 	add.w	r1, r7, #8
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe fb43 	bl	8002954 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	9202      	str	r2, [sp, #8]
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	2302      	movs	r3, #2
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	460a      	mov	r2, r1
 80042e0:	4910      	ldr	r1, [pc, #64]	; (8004324 <xTimerCreateTimerTask+0x84>)
 80042e2:	4811      	ldr	r0, [pc, #68]	; (8004328 <xTimerCreateTimerTask+0x88>)
 80042e4:	f7ff f8e4 	bl	80034b0 <xTaskCreateStatic>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4a10      	ldr	r2, [pc, #64]	; (800432c <xTimerCreateTimerTask+0x8c>)
 80042ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <xTimerCreateTimerTask+0x8c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042f6:	2301      	movs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	613b      	str	r3, [r7, #16]
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004316:	697b      	ldr	r3, [r7, #20]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000d48 	.word	0x20000d48
 8004324:	08005a4c 	.word	0x08005a4c
 8004328:	0800444d 	.word	0x0800444d
 800432c:	20000d4c 	.word	0x20000d4c

08004330 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	623b      	str	r3, [r7, #32]
}
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <xTimerGenericCommand+0x98>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d02a      	beq.n	80043bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b05      	cmp	r3, #5
 8004376:	dc18      	bgt.n	80043aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004378:	f7ff feb2 	bl	80040e0 <xTaskGetSchedulerState>
 800437c:	4603      	mov	r3, r0
 800437e:	2b02      	cmp	r3, #2
 8004380:	d109      	bne.n	8004396 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <xTimerGenericCommand+0x98>)
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	f107 0110 	add.w	r1, r7, #16
 800438a:	2300      	movs	r3, #0
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	f7fe fcad 	bl	8002cec <xQueueGenericSend>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24
 8004394:	e012      	b.n	80043bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <xTimerGenericCommand+0x98>)
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	f107 0110 	add.w	r1, r7, #16
 800439e:	2300      	movs	r3, #0
 80043a0:	2200      	movs	r2, #0
 80043a2:	f7fe fca3 	bl	8002cec <xQueueGenericSend>
 80043a6:	6278      	str	r0, [r7, #36]	; 0x24
 80043a8:	e008      	b.n	80043bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <xTimerGenericCommand+0x98>)
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	f107 0110 	add.w	r1, r7, #16
 80043b2:	2300      	movs	r3, #0
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	f7fe fd97 	bl	8002ee8 <xQueueGenericSendFromISR>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3728      	adds	r7, #40	; 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000d48 	.word	0x20000d48

080043cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <prvProcessExpiredTimer+0x7c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fb55 	bl	8002a94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d122      	bne.n	8004438 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	18d1      	adds	r1, r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	6978      	ldr	r0, [r7, #20]
 8004400:	f000 f8c8 	bl	8004594 <prvInsertTimerInActiveList>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800440a:	2300      	movs	r3, #0
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2300      	movs	r3, #0
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	2100      	movs	r1, #0
 8004414:	6978      	ldr	r0, [r7, #20]
 8004416:	f7ff ff8b 	bl	8004330 <xTimerGenericCommand>
 800441a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60fb      	str	r3, [r7, #12]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	6978      	ldr	r0, [r7, #20]
 800443e:	4798      	blx	r3
}
 8004440:	bf00      	nop
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000d40 	.word	0x20000d40

0800444c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f857 	bl	800450c <prvGetNextExpireTime>
 800445e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4619      	mov	r1, r3
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f803 	bl	8004470 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800446a:	f000 f8d5 	bl	8004618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800446e:	e7f1      	b.n	8004454 <prvTimerTask+0x8>

08004470 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800447a:	f7ff fa4b 	bl	8003914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800447e:	f107 0308 	add.w	r3, r7, #8
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f866 	bl	8004554 <prvSampleTimeNow>
 8004488:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d130      	bne.n	80044f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <prvProcessTimerOrBlockTask+0x3c>
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	429a      	cmp	r2, r3
 800449c:	d806      	bhi.n	80044ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800449e:	f7ff fa47 	bl	8003930 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff91 	bl	80043cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044aa:	e024      	b.n	80044f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <prvProcessTimerOrBlockTask+0x90>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <prvProcessTimerOrBlockTask+0x94>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	4619      	mov	r1, r3
 80044d2:	f7fe ffb9 	bl	8003448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044d6:	f7ff fa2b 	bl	8003930 <xTaskResumeAll>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <prvProcessTimerOrBlockTask+0x98>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
}
 80044f0:	e001      	b.n	80044f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044f2:	f7ff fa1d 	bl	8003930 <xTaskResumeAll>
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000d44 	.word	0x20000d44
 8004504:	20000d48 	.word	0x20000d48
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <prvGetNextExpireTime+0x44>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	bf0c      	ite	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	2300      	movne	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <prvGetNextExpireTime+0x44>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e001      	b.n	8004542 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000d40 	.word	0x20000d40

08004554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800455c:	f7ff fa86 	bl	8003a6c <xTaskGetTickCount>
 8004560:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <prvSampleTimeNow+0x3c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	429a      	cmp	r2, r3
 800456a:	d205      	bcs.n	8004578 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800456c:	f000 f908 	bl	8004780 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e002      	b.n	800457e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <prvSampleTimeNow+0x3c>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004584:	68fb      	ldr	r3, [r7, #12]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000d50 	.word	0x20000d50

08004594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d812      	bhi.n	80045e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e01b      	b.n	8004606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <prvInsertTimerInActiveList+0x7c>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fe fa23 	bl	8002a24 <vListInsert>
 80045de:	e012      	b.n	8004606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d206      	bcs.n	80045f6 <prvInsertTimerInActiveList+0x62>
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e007      	b.n	8004606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <prvInsertTimerInActiveList+0x80>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fe fa0f 	bl	8002a24 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004606:	697b      	ldr	r3, [r7, #20]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000d44 	.word	0x20000d44
 8004614:	20000d40 	.word	0x20000d40

08004618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08e      	sub	sp, #56	; 0x38
 800461c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800461e:	e09d      	b.n	800475c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	da18      	bge.n	8004658 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004626:	1d3b      	adds	r3, r7, #4
 8004628:	3304      	adds	r3, #4
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	61fb      	str	r3, [r7, #28]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464e:	6850      	ldr	r0, [r2, #4]
 8004650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004652:	6892      	ldr	r2, [r2, #8]
 8004654:	4611      	mov	r1, r2
 8004656:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	db7d      	blt.n	800475a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	3304      	adds	r3, #4
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fa10 	bl	8002a94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004674:	463b      	mov	r3, r7
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ff6c 	bl	8004554 <prvSampleTimeNow>
 800467c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b09      	cmp	r3, #9
 8004682:	d86b      	bhi.n	800475c <prvProcessReceivedCommands+0x144>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <prvProcessReceivedCommands+0x74>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046b5 	.word	0x080046b5
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046b5 	.word	0x080046b5
 8004698:	0800475d 	.word	0x0800475d
 800469c:	08004711 	.word	0x08004711
 80046a0:	08004749 	.word	0x08004749
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046b5 	.word	0x080046b5
 80046ac:	0800475d 	.word	0x0800475d
 80046b0:	08004711 	.word	0x08004711
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	18d1      	adds	r1, r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c2:	f7ff ff67 	bl	8004594 <prvInsertTimerInActiveList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d047      	beq.n	800475c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d13f      	bne.n	800475c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	441a      	add	r2, r3
 80046e4:	2300      	movs	r3, #0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	2100      	movs	r1, #0
 80046ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ee:	f7ff fe1f 	bl	8004330 <xTimerGenericCommand>
 80046f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d130      	bne.n	800475c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	61bb      	str	r3, [r7, #24]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	617b      	str	r3, [r7, #20]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	699a      	ldr	r2, [r3, #24]
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	18d1      	adds	r1, r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004742:	f7ff ff27 	bl	8004594 <prvInsertTimerInActiveList>
					break;
 8004746:	e009      	b.n	800475c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004754:	f000 fb6e 	bl	8004e34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004758:	e000      	b.n	800475c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800475a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <prvProcessReceivedCommands+0x164>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	1d39      	adds	r1, r7, #4
 8004762:	2200      	movs	r2, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe fc57 	bl	8003018 <xQueueReceive>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f af57 	bne.w	8004620 <prvProcessReceivedCommands+0x8>
	}
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	3730      	adds	r7, #48	; 0x30
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000d48 	.word	0x20000d48

08004780 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004786:	e045      	b.n	8004814 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004788:	4b2c      	ldr	r3, [pc, #176]	; (800483c <prvSwitchTimerLists+0xbc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004792:	4b2a      	ldr	r3, [pc, #168]	; (800483c <prvSwitchTimerLists+0xbc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3304      	adds	r3, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe f977 	bl	8002a94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d12e      	bne.n	8004814 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4413      	add	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d90e      	bls.n	80047e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047d4:	4b19      	ldr	r3, [pc, #100]	; (800483c <prvSwitchTimerLists+0xbc>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3304      	adds	r3, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f7fe f920 	bl	8002a24 <vListInsert>
 80047e4:	e016      	b.n	8004814 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047e6:	2300      	movs	r3, #0
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2300      	movs	r3, #0
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	2100      	movs	r1, #0
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff fd9d 	bl	8004330 <xTimerGenericCommand>
 80047f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <prvSwitchTimerLists+0x94>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	603b      	str	r3, [r7, #0]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004814:	4b09      	ldr	r3, [pc, #36]	; (800483c <prvSwitchTimerLists+0xbc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1b4      	bne.n	8004788 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <prvSwitchTimerLists+0xbc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <prvSwitchTimerLists+0xc0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <prvSwitchTimerLists+0xbc>)
 800482a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800482c:	4a04      	ldr	r2, [pc, #16]	; (8004840 <prvSwitchTimerLists+0xc0>)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	6013      	str	r3, [r2, #0]
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000d40 	.word	0x20000d40
 8004840:	20000d44 	.word	0x20000d44

08004844 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800484a:	f000 f92f 	bl	8004aac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <prvCheckForValidListAndQueue+0x60>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d120      	bne.n	8004898 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004856:	4814      	ldr	r0, [pc, #80]	; (80048a8 <prvCheckForValidListAndQueue+0x64>)
 8004858:	f7fe f896 	bl	8002988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800485c:	4813      	ldr	r0, [pc, #76]	; (80048ac <prvCheckForValidListAndQueue+0x68>)
 800485e:	f7fe f893 	bl	8002988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <prvCheckForValidListAndQueue+0x6c>)
 8004864:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <prvCheckForValidListAndQueue+0x64>)
 8004866:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <prvCheckForValidListAndQueue+0x70>)
 800486a:	4a10      	ldr	r2, [pc, #64]	; (80048ac <prvCheckForValidListAndQueue+0x68>)
 800486c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800486e:	2300      	movs	r3, #0
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <prvCheckForValidListAndQueue+0x74>)
 8004874:	4a11      	ldr	r2, [pc, #68]	; (80048bc <prvCheckForValidListAndQueue+0x78>)
 8004876:	2110      	movs	r1, #16
 8004878:	200a      	movs	r0, #10
 800487a:	f7fe f99d 	bl	8002bb8 <xQueueGenericCreateStatic>
 800487e:	4603      	mov	r3, r0
 8004880:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <prvCheckForValidListAndQueue+0x60>)
 8004882:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <prvCheckForValidListAndQueue+0x60>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <prvCheckForValidListAndQueue+0x60>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	490b      	ldr	r1, [pc, #44]	; (80048c0 <prvCheckForValidListAndQueue+0x7c>)
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fdb0 	bl	80033f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004898:	f000 f938 	bl	8004b0c <vPortExitCritical>
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000d48 	.word	0x20000d48
 80048a8:	20000d18 	.word	0x20000d18
 80048ac:	20000d2c 	.word	0x20000d2c
 80048b0:	20000d40 	.word	0x20000d40
 80048b4:	20000d44 	.word	0x20000d44
 80048b8:	20000df4 	.word	0x20000df4
 80048bc:	20000d54 	.word	0x20000d54
 80048c0:	08005a54 	.word	0x08005a54

080048c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3b04      	subs	r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b04      	subs	r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <pxPortInitialiseStack+0x54>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b14      	subs	r3, #20
 80048fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b20      	subs	r3, #32
 800490a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800490c:	68fb      	ldr	r3, [r7, #12]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	0800491d 	.word	0x0800491d

0800491c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <prvTaskExitError+0x54>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d00a      	beq.n	8004946 <prvTaskExitError+0x2a>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <prvTaskExitError+0x28>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60bb      	str	r3, [r7, #8]
}
 8004958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800495a:	bf00      	nop
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0fc      	beq.n	800495c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	2000000c 	.word	0x2000000c
	...

08004980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <pxCurrentTCBConst2>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800498a:	f380 8809 	msr	PSP, r0
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8811 	msr	BASEPRI, r0
 800499a:	f04e 0e0d 	orr.w	lr, lr, #13
 800499e:	4770      	bx	lr

080049a0 <pxCurrentTCBConst2>:
 80049a0:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80049a8:	4806      	ldr	r0, [pc, #24]	; (80049c4 <prvPortStartFirstTask+0x1c>)
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f380 8808 	msr	MSP, r0
 80049b2:	b662      	cpsie	i
 80049b4:	b661      	cpsie	f
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	df00      	svc	0
 80049c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049c2:	bf00      	nop
 80049c4:	e000ed08 	.word	0xe000ed08

080049c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ce:	4b32      	ldr	r3, [pc, #200]	; (8004a98 <xPortStartScheduler+0xd0>)
 80049d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <xPortStartScheduler+0xd4>)
 80049f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <xPortStartScheduler+0xd8>)
 80049f8:	2207      	movs	r2, #7
 80049fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049fc:	e009      	b.n	8004a12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80049fe:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d0ef      	beq.n	80049fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a1e:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f1c3 0307 	rsb	r3, r3, #7
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00a      	beq.n	8004a40 <xPortStartScheduler+0x78>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60bb      	str	r3, [r7, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a40:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a76:	f000 f8b9 	bl	8004bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <xPortStartScheduler+0xe0>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a80:	f7ff ff92 	bl	80049a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a84:	f7ff f8be 	bl	8003c04 <vTaskSwitchContext>
	prvTaskExitError();
 8004a88:	f7ff ff48 	bl	800491c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	e000e400 	.word	0xe000e400
 8004a9c:	20000e44 	.word	0x20000e44
 8004aa0:	20000e48 	.word	0x20000e48
 8004aa4:	e000ed20 	.word	0xe000ed20
 8004aa8:	2000000c 	.word	0x2000000c

08004aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	607b      	str	r3, [r7, #4]
}
 8004ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <vPortEnterCritical+0x58>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <vPortEnterCritical+0x58>)
 8004ace:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <vPortEnterCritical+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10f      	bne.n	8004af8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <vPortEnterCritical+0x5c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	603b      	str	r3, [r7, #0]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <vPortEnterCritical+0x4a>
	}
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	2000000c 	.word	0x2000000c
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <vPortExitCritical+0x24>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <vPortExitCritical+0x42>
 8004b42:	2300      	movs	r3, #0
 8004b44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	f383 8811 	msr	BASEPRI, r3
}
 8004b4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	2000000c 	.word	0x2000000c
 8004b5c:	00000000 	.word	0x00000000

08004b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b60:	f3ef 8009 	mrs	r0, PSP
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <pxCurrentTCBConst>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b70:	6010      	str	r0, [r2, #0]
 8004b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b7a:	f380 8811 	msr	BASEPRI, r0
 8004b7e:	f7ff f841 	bl	8003c04 <vTaskSwitchContext>
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b96:	f380 8809 	msr	PSP, r0
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	4770      	bx	lr

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bc2:	f7fe ff61 	bl	8003a88 <xTaskIncrementTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <xPortSysTickHandler+0x40>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
}
 8004bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <vPortSetupTimerInterrupt+0x30>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <vPortSetupTimerInterrupt+0x38>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a09      	ldr	r2, [pc, #36]	; (8004c28 <vPortSetupTimerInterrupt+0x3c>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	099b      	lsrs	r3, r3, #6
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <vPortSetupTimerInterrupt+0x40>)
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c0e:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <vPortSetupTimerInterrupt+0x30>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e010 	.word	0xe000e010
 8004c20:	e000e018 	.word	0xe000e018
 8004c24:	20000000 	.word	0x20000000
 8004c28:	10624dd3 	.word	0x10624dd3
 8004c2c:	e000e014 	.word	0xe000e014

08004c30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c36:	f3ef 8305 	mrs	r3, IPSR
 8004c3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d914      	bls.n	8004c6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c42:	4a16      	ldr	r2, [pc, #88]	; (8004c9c <vPortValidateInterruptPriority+0x6c>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <vPortValidateInterruptPriority+0x70>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	7afa      	ldrb	r2, [r7, #11]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d20a      	bcs.n	8004c6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	607b      	str	r3, [r7, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <vPortValidateInterruptPriority+0x74>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <vPortValidateInterruptPriority+0x78>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d90a      	bls.n	8004c92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	603b      	str	r3, [r7, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <vPortValidateInterruptPriority+0x60>
	}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	e000e3f0 	.word	0xe000e3f0
 8004ca0:	20000e44 	.word	0x20000e44
 8004ca4:	e000ed0c 	.word	0xe000ed0c
 8004ca8:	20000e48 	.word	0x20000e48

08004cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cb8:	f7fe fe2c 	bl	8003914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cbc:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <pvPortMalloc+0x174>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cc4:	f000 f910 	bl	8004ee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cc8:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <pvPortMalloc+0x178>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 808e 	bne.w	8004df2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01d      	beq.n	8004d18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cdc:	2208      	movs	r2, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d014      	beq.n	8004d18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <pvPortMalloc+0x6c>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d069      	beq.n	8004df2 <pvPortMalloc+0x146>
 8004d1e:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <pvPortMalloc+0x17c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d864      	bhi.n	8004df2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d28:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <pvPortMalloc+0x180>)
 8004d2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d2c:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <pvPortMalloc+0x180>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d32:	e004      	b.n	8004d3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d903      	bls.n	8004d50 <pvPortMalloc+0xa4>
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f1      	bne.n	8004d34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d50:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <pvPortMalloc+0x174>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d04b      	beq.n	8004df2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4413      	add	r3, r2
 8004d62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad2      	subs	r2, r2, r3
 8004d74:	2308      	movs	r3, #8
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d91f      	bls.n	8004dbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <pvPortMalloc+0xf8>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	613b      	str	r3, [r7, #16]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004db6:	69b8      	ldr	r0, [r7, #24]
 8004db8:	f000 f8f8 	bl	8004fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dca:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <pvPortMalloc+0x184>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d203      	bcs.n	8004dde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <pvPortMalloc+0x184>)
 8004ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <pvPortMalloc+0x178>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004df2:	f7fe fd9d 	bl	8003930 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <pvPortMalloc+0x16a>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60fb      	str	r3, [r7, #12]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <pvPortMalloc+0x168>
	return pvReturn;
 8004e16:	69fb      	ldr	r3, [r7, #28]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20001a54 	.word	0x20001a54
 8004e24:	20001a60 	.word	0x20001a60
 8004e28:	20001a58 	.word	0x20001a58
 8004e2c:	20001a4c 	.word	0x20001a4c
 8004e30:	20001a5c 	.word	0x20001a5c

08004e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d048      	beq.n	8004ed8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e46:	2308      	movs	r3, #8
 8004e48:	425b      	negs	r3, r3
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <vPortFree+0xac>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <vPortFree+0x44>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60fb      	str	r3, [r7, #12]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <vPortFree+0x62>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60bb      	str	r3, [r7, #8]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <vPortFree+0xac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d019      	beq.n	8004ed8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <vPortFree+0xac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ebc:	f7fe fd2a 	bl	8003914 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <vPortFree+0xb0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <vPortFree+0xb0>)
 8004ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ece:	6938      	ldr	r0, [r7, #16]
 8004ed0:	f000 f86c 	bl	8004fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ed4:	f7fe fd2c 	bl	8003930 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ed8:	bf00      	nop
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20001a60 	.word	0x20001a60
 8004ee4:	20001a58 	.word	0x20001a58

08004ee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <prvHeapInit+0xac>)
 8004ef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3307      	adds	r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0307 	bic.w	r3, r3, #7
 8004f0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <prvHeapInit+0xac>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <prvHeapInit+0xb0>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f26:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <prvHeapInit+0xb0>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f34:	2208      	movs	r2, #8
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0307 	bic.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <prvHeapInit+0xb4>)
 8004f48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f4a:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <prvHeapInit+0xb4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <prvHeapInit+0xb4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <prvHeapInit+0xb4>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <prvHeapInit+0xb8>)
 8004f76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <prvHeapInit+0xbc>)
 8004f7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <prvHeapInit+0xc0>)
 8004f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f86:	601a      	str	r2, [r3, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000e4c 	.word	0x20000e4c
 8004f98:	20001a4c 	.word	0x20001a4c
 8004f9c:	20001a54 	.word	0x20001a54
 8004fa0:	20001a5c 	.word	0x20001a5c
 8004fa4:	20001a58 	.word	0x20001a58
 8004fa8:	20001a60 	.word	0x20001a60

08004fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fb4:	4b27      	ldr	r3, [pc, #156]	; (8005054 <prvInsertBlockIntoFreeList+0xa8>)
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e002      	b.n	8004fc0 <prvInsertBlockIntoFreeList+0x14>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d8f7      	bhi.n	8004fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d108      	bne.n	8004fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	441a      	add	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d118      	bne.n	8005034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <prvInsertBlockIntoFreeList+0xac>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d00d      	beq.n	800502a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e008      	b.n	800503c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <prvInsertBlockIntoFreeList+0xac>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e003      	b.n	800503c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d002      	beq.n	800504a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	20001a4c 	.word	0x20001a4c
 8005058:	20001a54 	.word	0x20001a54

0800505c <__errno>:
 800505c:	4b01      	ldr	r3, [pc, #4]	; (8005064 <__errno+0x8>)
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000010 	.word	0x20000010

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	2600      	movs	r6, #0
 800506c:	4d0c      	ldr	r5, [pc, #48]	; (80050a0 <__libc_init_array+0x38>)
 800506e:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 8005070:	1b64      	subs	r4, r4, r5
 8005072:	10a4      	asrs	r4, r4, #2
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	f000 fcac 	bl	80059d4 <_init>
 800507c:	2600      	movs	r6, #0
 800507e:	4d0a      	ldr	r5, [pc, #40]	; (80050a8 <__libc_init_array+0x40>)
 8005080:	4c0a      	ldr	r4, [pc, #40]	; (80050ac <__libc_init_array+0x44>)
 8005082:	1b64      	subs	r4, r4, r5
 8005084:	10a4      	asrs	r4, r4, #2
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	08005b28 	.word	0x08005b28
 80050a4:	08005b28 	.word	0x08005b28
 80050a8:	08005b28 	.word	0x08005b28
 80050ac:	08005b2c 	.word	0x08005b2c

080050b0 <malloc>:
 80050b0:	4b02      	ldr	r3, [pc, #8]	; (80050bc <malloc+0xc>)
 80050b2:	4601      	mov	r1, r0
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f000 b889 	b.w	80051cc <_malloc_r>
 80050ba:	bf00      	nop
 80050bc:	20000010 	.word	0x20000010

080050c0 <free>:
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <free+0xc>)
 80050c2:	4601      	mov	r1, r0
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f000 b819 	b.w	80050fc <_free_r>
 80050ca:	bf00      	nop
 80050cc:	20000010 	.word	0x20000010

080050d0 <memcpy>:
 80050d0:	440a      	add	r2, r1
 80050d2:	4291      	cmp	r1, r2
 80050d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050d8:	d100      	bne.n	80050dc <memcpy+0xc>
 80050da:	4770      	bx	lr
 80050dc:	b510      	push	{r4, lr}
 80050de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050e2:	4291      	cmp	r1, r2
 80050e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050e8:	d1f9      	bne.n	80050de <memcpy+0xe>
 80050ea:	bd10      	pop	{r4, pc}

080050ec <memset>:
 80050ec:	4603      	mov	r3, r0
 80050ee:	4402      	add	r2, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d100      	bne.n	80050f6 <memset+0xa>
 80050f4:	4770      	bx	lr
 80050f6:	f803 1b01 	strb.w	r1, [r3], #1
 80050fa:	e7f9      	b.n	80050f0 <memset+0x4>

080050fc <_free_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4605      	mov	r5, r0
 8005100:	2900      	cmp	r1, #0
 8005102:	d040      	beq.n	8005186 <_free_r+0x8a>
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f0c      	subs	r4, r1, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfb8      	it	lt
 800510e:	18e4      	addlt	r4, r4, r3
 8005110:	f000 f900 	bl	8005314 <__malloc_lock>
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <_free_r+0x8c>)
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	b933      	cbnz	r3, 8005128 <_free_r+0x2c>
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	6014      	str	r4, [r2, #0]
 800511e:	4628      	mov	r0, r5
 8005120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005124:	f000 b8fc 	b.w	8005320 <__malloc_unlock>
 8005128:	42a3      	cmp	r3, r4
 800512a:	d908      	bls.n	800513e <_free_r+0x42>
 800512c:	6820      	ldr	r0, [r4, #0]
 800512e:	1821      	adds	r1, r4, r0
 8005130:	428b      	cmp	r3, r1
 8005132:	bf01      	itttt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	1809      	addeq	r1, r1, r0
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	e7ed      	b.n	800511a <_free_r+0x1e>
 800513e:	461a      	mov	r2, r3
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b10b      	cbz	r3, 8005148 <_free_r+0x4c>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d9fa      	bls.n	800513e <_free_r+0x42>
 8005148:	6811      	ldr	r1, [r2, #0]
 800514a:	1850      	adds	r0, r2, r1
 800514c:	42a0      	cmp	r0, r4
 800514e:	d10b      	bne.n	8005168 <_free_r+0x6c>
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	4401      	add	r1, r0
 8005154:	1850      	adds	r0, r2, r1
 8005156:	4283      	cmp	r3, r0
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	d1e0      	bne.n	800511e <_free_r+0x22>
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4401      	add	r1, r0
 8005162:	6011      	str	r1, [r2, #0]
 8005164:	6053      	str	r3, [r2, #4]
 8005166:	e7da      	b.n	800511e <_free_r+0x22>
 8005168:	d902      	bls.n	8005170 <_free_r+0x74>
 800516a:	230c      	movs	r3, #12
 800516c:	602b      	str	r3, [r5, #0]
 800516e:	e7d6      	b.n	800511e <_free_r+0x22>
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	1821      	adds	r1, r4, r0
 8005174:	428b      	cmp	r3, r1
 8005176:	bf01      	itttt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	1809      	addeq	r1, r1, r0
 800517e:	6021      	streq	r1, [r4, #0]
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	6054      	str	r4, [r2, #4]
 8005184:	e7cb      	b.n	800511e <_free_r+0x22>
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	20001a64 	.word	0x20001a64

0800518c <sbrk_aligned>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	4e0e      	ldr	r6, [pc, #56]	; (80051c8 <sbrk_aligned+0x3c>)
 8005190:	460c      	mov	r4, r1
 8005192:	6831      	ldr	r1, [r6, #0]
 8005194:	4605      	mov	r5, r0
 8005196:	b911      	cbnz	r1, 800519e <sbrk_aligned+0x12>
 8005198:	f000 f88c 	bl	80052b4 <_sbrk_r>
 800519c:	6030      	str	r0, [r6, #0]
 800519e:	4621      	mov	r1, r4
 80051a0:	4628      	mov	r0, r5
 80051a2:	f000 f887 	bl	80052b4 <_sbrk_r>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	d00a      	beq.n	80051c0 <sbrk_aligned+0x34>
 80051aa:	1cc4      	adds	r4, r0, #3
 80051ac:	f024 0403 	bic.w	r4, r4, #3
 80051b0:	42a0      	cmp	r0, r4
 80051b2:	d007      	beq.n	80051c4 <sbrk_aligned+0x38>
 80051b4:	1a21      	subs	r1, r4, r0
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 f87c 	bl	80052b4 <_sbrk_r>
 80051bc:	3001      	adds	r0, #1
 80051be:	d101      	bne.n	80051c4 <sbrk_aligned+0x38>
 80051c0:	f04f 34ff 	mov.w	r4, #4294967295
 80051c4:	4620      	mov	r0, r4
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	20001a68 	.word	0x20001a68

080051cc <_malloc_r>:
 80051cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d0:	1ccd      	adds	r5, r1, #3
 80051d2:	f025 0503 	bic.w	r5, r5, #3
 80051d6:	3508      	adds	r5, #8
 80051d8:	2d0c      	cmp	r5, #12
 80051da:	bf38      	it	cc
 80051dc:	250c      	movcc	r5, #12
 80051de:	2d00      	cmp	r5, #0
 80051e0:	4607      	mov	r7, r0
 80051e2:	db01      	blt.n	80051e8 <_malloc_r+0x1c>
 80051e4:	42a9      	cmp	r1, r5
 80051e6:	d905      	bls.n	80051f4 <_malloc_r+0x28>
 80051e8:	230c      	movs	r3, #12
 80051ea:	2600      	movs	r6, #0
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	4630      	mov	r0, r6
 80051f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f4:	4e2e      	ldr	r6, [pc, #184]	; (80052b0 <_malloc_r+0xe4>)
 80051f6:	f000 f88d 	bl	8005314 <__malloc_lock>
 80051fa:	6833      	ldr	r3, [r6, #0]
 80051fc:	461c      	mov	r4, r3
 80051fe:	bb34      	cbnz	r4, 800524e <_malloc_r+0x82>
 8005200:	4629      	mov	r1, r5
 8005202:	4638      	mov	r0, r7
 8005204:	f7ff ffc2 	bl	800518c <sbrk_aligned>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	4604      	mov	r4, r0
 800520c:	d14d      	bne.n	80052aa <_malloc_r+0xde>
 800520e:	6834      	ldr	r4, [r6, #0]
 8005210:	4626      	mov	r6, r4
 8005212:	2e00      	cmp	r6, #0
 8005214:	d140      	bne.n	8005298 <_malloc_r+0xcc>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	4631      	mov	r1, r6
 800521a:	4638      	mov	r0, r7
 800521c:	eb04 0803 	add.w	r8, r4, r3
 8005220:	f000 f848 	bl	80052b4 <_sbrk_r>
 8005224:	4580      	cmp	r8, r0
 8005226:	d13a      	bne.n	800529e <_malloc_r+0xd2>
 8005228:	6821      	ldr	r1, [r4, #0]
 800522a:	3503      	adds	r5, #3
 800522c:	1a6d      	subs	r5, r5, r1
 800522e:	f025 0503 	bic.w	r5, r5, #3
 8005232:	3508      	adds	r5, #8
 8005234:	2d0c      	cmp	r5, #12
 8005236:	bf38      	it	cc
 8005238:	250c      	movcc	r5, #12
 800523a:	4638      	mov	r0, r7
 800523c:	4629      	mov	r1, r5
 800523e:	f7ff ffa5 	bl	800518c <sbrk_aligned>
 8005242:	3001      	adds	r0, #1
 8005244:	d02b      	beq.n	800529e <_malloc_r+0xd2>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	442b      	add	r3, r5
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	e00e      	b.n	800526c <_malloc_r+0xa0>
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	1b52      	subs	r2, r2, r5
 8005252:	d41e      	bmi.n	8005292 <_malloc_r+0xc6>
 8005254:	2a0b      	cmp	r2, #11
 8005256:	d916      	bls.n	8005286 <_malloc_r+0xba>
 8005258:	1961      	adds	r1, r4, r5
 800525a:	42a3      	cmp	r3, r4
 800525c:	6025      	str	r5, [r4, #0]
 800525e:	bf18      	it	ne
 8005260:	6059      	strne	r1, [r3, #4]
 8005262:	6863      	ldr	r3, [r4, #4]
 8005264:	bf08      	it	eq
 8005266:	6031      	streq	r1, [r6, #0]
 8005268:	5162      	str	r2, [r4, r5]
 800526a:	604b      	str	r3, [r1, #4]
 800526c:	4638      	mov	r0, r7
 800526e:	f104 060b 	add.w	r6, r4, #11
 8005272:	f000 f855 	bl	8005320 <__malloc_unlock>
 8005276:	f026 0607 	bic.w	r6, r6, #7
 800527a:	1d23      	adds	r3, r4, #4
 800527c:	1af2      	subs	r2, r6, r3
 800527e:	d0b6      	beq.n	80051ee <_malloc_r+0x22>
 8005280:	1b9b      	subs	r3, r3, r6
 8005282:	50a3      	str	r3, [r4, r2]
 8005284:	e7b3      	b.n	80051ee <_malloc_r+0x22>
 8005286:	6862      	ldr	r2, [r4, #4]
 8005288:	42a3      	cmp	r3, r4
 800528a:	bf0c      	ite	eq
 800528c:	6032      	streq	r2, [r6, #0]
 800528e:	605a      	strne	r2, [r3, #4]
 8005290:	e7ec      	b.n	800526c <_malloc_r+0xa0>
 8005292:	4623      	mov	r3, r4
 8005294:	6864      	ldr	r4, [r4, #4]
 8005296:	e7b2      	b.n	80051fe <_malloc_r+0x32>
 8005298:	4634      	mov	r4, r6
 800529a:	6876      	ldr	r6, [r6, #4]
 800529c:	e7b9      	b.n	8005212 <_malloc_r+0x46>
 800529e:	230c      	movs	r3, #12
 80052a0:	4638      	mov	r0, r7
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	f000 f83c 	bl	8005320 <__malloc_unlock>
 80052a8:	e7a1      	b.n	80051ee <_malloc_r+0x22>
 80052aa:	6025      	str	r5, [r4, #0]
 80052ac:	e7de      	b.n	800526c <_malloc_r+0xa0>
 80052ae:	bf00      	nop
 80052b0:	20001a64 	.word	0x20001a64

080052b4 <_sbrk_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	2300      	movs	r3, #0
 80052b8:	4d05      	ldr	r5, [pc, #20]	; (80052d0 <_sbrk_r+0x1c>)
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fb fc72 	bl	8000ba8 <_sbrk>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_sbrk_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_sbrk_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	20001a6c 	.word	0x20001a6c

080052d4 <siprintf>:
 80052d4:	b40e      	push	{r1, r2, r3}
 80052d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052da:	b500      	push	{lr}
 80052dc:	b09c      	sub	sp, #112	; 0x70
 80052de:	ab1d      	add	r3, sp, #116	; 0x74
 80052e0:	9002      	str	r0, [sp, #8]
 80052e2:	9006      	str	r0, [sp, #24]
 80052e4:	9107      	str	r1, [sp, #28]
 80052e6:	9104      	str	r1, [sp, #16]
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <siprintf+0x38>)
 80052ea:	4909      	ldr	r1, [pc, #36]	; (8005310 <siprintf+0x3c>)
 80052ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f0:	9105      	str	r1, [sp, #20]
 80052f2:	6800      	ldr	r0, [r0, #0]
 80052f4:	a902      	add	r1, sp, #8
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	f000 f874 	bl	80053e4 <_svfiprintf_r>
 80052fc:	2200      	movs	r2, #0
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	b01c      	add	sp, #112	; 0x70
 8005304:	f85d eb04 	ldr.w	lr, [sp], #4
 8005308:	b003      	add	sp, #12
 800530a:	4770      	bx	lr
 800530c:	20000010 	.word	0x20000010
 8005310:	ffff0208 	.word	0xffff0208

08005314 <__malloc_lock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_lock+0x8>)
 8005316:	f000 bafb 	b.w	8005910 <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	20001a70 	.word	0x20001a70

08005320 <__malloc_unlock>:
 8005320:	4801      	ldr	r0, [pc, #4]	; (8005328 <__malloc_unlock+0x8>)
 8005322:	f000 baf6 	b.w	8005912 <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	20001a70 	.word	0x20001a70

0800532c <__ssputs_r>:
 800532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	688e      	ldr	r6, [r1, #8]
 8005332:	4682      	mov	sl, r0
 8005334:	429e      	cmp	r6, r3
 8005336:	460c      	mov	r4, r1
 8005338:	4690      	mov	r8, r2
 800533a:	461f      	mov	r7, r3
 800533c:	d838      	bhi.n	80053b0 <__ssputs_r+0x84>
 800533e:	898a      	ldrh	r2, [r1, #12]
 8005340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005344:	d032      	beq.n	80053ac <__ssputs_r+0x80>
 8005346:	6825      	ldr	r5, [r4, #0]
 8005348:	6909      	ldr	r1, [r1, #16]
 800534a:	3301      	adds	r3, #1
 800534c:	eba5 0901 	sub.w	r9, r5, r1
 8005350:	6965      	ldr	r5, [r4, #20]
 8005352:	444b      	add	r3, r9
 8005354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800535c:	106d      	asrs	r5, r5, #1
 800535e:	429d      	cmp	r5, r3
 8005360:	bf38      	it	cc
 8005362:	461d      	movcc	r5, r3
 8005364:	0553      	lsls	r3, r2, #21
 8005366:	d531      	bpl.n	80053cc <__ssputs_r+0xa0>
 8005368:	4629      	mov	r1, r5
 800536a:	f7ff ff2f 	bl	80051cc <_malloc_r>
 800536e:	4606      	mov	r6, r0
 8005370:	b950      	cbnz	r0, 8005388 <__ssputs_r+0x5c>
 8005372:	230c      	movs	r3, #12
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	f8ca 3000 	str.w	r3, [sl]
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	464a      	mov	r2, r9
 800538a:	6921      	ldr	r1, [r4, #16]
 800538c:	f7ff fea0 	bl	80050d0 <memcpy>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	6126      	str	r6, [r4, #16]
 800539e:	444e      	add	r6, r9
 80053a0:	6026      	str	r6, [r4, #0]
 80053a2:	463e      	mov	r6, r7
 80053a4:	6165      	str	r5, [r4, #20]
 80053a6:	eba5 0509 	sub.w	r5, r5, r9
 80053aa:	60a5      	str	r5, [r4, #8]
 80053ac:	42be      	cmp	r6, r7
 80053ae:	d900      	bls.n	80053b2 <__ssputs_r+0x86>
 80053b0:	463e      	mov	r6, r7
 80053b2:	4632      	mov	r2, r6
 80053b4:	4641      	mov	r1, r8
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	f000 faba 	bl	8005930 <memmove>
 80053bc:	68a3      	ldr	r3, [r4, #8]
 80053be:	2000      	movs	r0, #0
 80053c0:	1b9b      	subs	r3, r3, r6
 80053c2:	60a3      	str	r3, [r4, #8]
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	4433      	add	r3, r6
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	e7db      	b.n	8005384 <__ssputs_r+0x58>
 80053cc:	462a      	mov	r2, r5
 80053ce:	f000 fac9 	bl	8005964 <_realloc_r>
 80053d2:	4606      	mov	r6, r0
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d1e1      	bne.n	800539c <__ssputs_r+0x70>
 80053d8:	4650      	mov	r0, sl
 80053da:	6921      	ldr	r1, [r4, #16]
 80053dc:	f7ff fe8e 	bl	80050fc <_free_r>
 80053e0:	e7c7      	b.n	8005372 <__ssputs_r+0x46>
	...

080053e4 <_svfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	4698      	mov	r8, r3
 80053ea:	898b      	ldrh	r3, [r1, #12]
 80053ec:	4607      	mov	r7, r0
 80053ee:	061b      	lsls	r3, r3, #24
 80053f0:	460d      	mov	r5, r1
 80053f2:	4614      	mov	r4, r2
 80053f4:	b09d      	sub	sp, #116	; 0x74
 80053f6:	d50e      	bpl.n	8005416 <_svfiprintf_r+0x32>
 80053f8:	690b      	ldr	r3, [r1, #16]
 80053fa:	b963      	cbnz	r3, 8005416 <_svfiprintf_r+0x32>
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	f7ff fee5 	bl	80051cc <_malloc_r>
 8005402:	6028      	str	r0, [r5, #0]
 8005404:	6128      	str	r0, [r5, #16]
 8005406:	b920      	cbnz	r0, 8005412 <_svfiprintf_r+0x2e>
 8005408:	230c      	movs	r3, #12
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	e0d1      	b.n	80055b6 <_svfiprintf_r+0x1d2>
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	616b      	str	r3, [r5, #20]
 8005416:	2300      	movs	r3, #0
 8005418:	9309      	str	r3, [sp, #36]	; 0x24
 800541a:	2320      	movs	r3, #32
 800541c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005420:	2330      	movs	r3, #48	; 0x30
 8005422:	f04f 0901 	mov.w	r9, #1
 8005426:	f8cd 800c 	str.w	r8, [sp, #12]
 800542a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80055d0 <_svfiprintf_r+0x1ec>
 800542e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005432:	4623      	mov	r3, r4
 8005434:	469a      	mov	sl, r3
 8005436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800543a:	b10a      	cbz	r2, 8005440 <_svfiprintf_r+0x5c>
 800543c:	2a25      	cmp	r2, #37	; 0x25
 800543e:	d1f9      	bne.n	8005434 <_svfiprintf_r+0x50>
 8005440:	ebba 0b04 	subs.w	fp, sl, r4
 8005444:	d00b      	beq.n	800545e <_svfiprintf_r+0x7a>
 8005446:	465b      	mov	r3, fp
 8005448:	4622      	mov	r2, r4
 800544a:	4629      	mov	r1, r5
 800544c:	4638      	mov	r0, r7
 800544e:	f7ff ff6d 	bl	800532c <__ssputs_r>
 8005452:	3001      	adds	r0, #1
 8005454:	f000 80aa 	beq.w	80055ac <_svfiprintf_r+0x1c8>
 8005458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800545a:	445a      	add	r2, fp
 800545c:	9209      	str	r2, [sp, #36]	; 0x24
 800545e:	f89a 3000 	ldrb.w	r3, [sl]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a2 	beq.w	80055ac <_svfiprintf_r+0x1c8>
 8005468:	2300      	movs	r3, #0
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005472:	f10a 0a01 	add.w	sl, sl, #1
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	9307      	str	r3, [sp, #28]
 800547a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800547e:	931a      	str	r3, [sp, #104]	; 0x68
 8005480:	4654      	mov	r4, sl
 8005482:	2205      	movs	r2, #5
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	4851      	ldr	r0, [pc, #324]	; (80055d0 <_svfiprintf_r+0x1ec>)
 800548a:	f000 fa43 	bl	8005914 <memchr>
 800548e:	9a04      	ldr	r2, [sp, #16]
 8005490:	b9d8      	cbnz	r0, 80054ca <_svfiprintf_r+0xe6>
 8005492:	06d0      	lsls	r0, r2, #27
 8005494:	bf44      	itt	mi
 8005496:	2320      	movmi	r3, #32
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549c:	0711      	lsls	r1, r2, #28
 800549e:	bf44      	itt	mi
 80054a0:	232b      	movmi	r3, #43	; 0x2b
 80054a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a6:	f89a 3000 	ldrb.w	r3, [sl]
 80054aa:	2b2a      	cmp	r3, #42	; 0x2a
 80054ac:	d015      	beq.n	80054da <_svfiprintf_r+0xf6>
 80054ae:	4654      	mov	r4, sl
 80054b0:	2000      	movs	r0, #0
 80054b2:	f04f 0c0a 	mov.w	ip, #10
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	4621      	mov	r1, r4
 80054ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054be:	3b30      	subs	r3, #48	; 0x30
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d94e      	bls.n	8005562 <_svfiprintf_r+0x17e>
 80054c4:	b1b0      	cbz	r0, 80054f4 <_svfiprintf_r+0x110>
 80054c6:	9207      	str	r2, [sp, #28]
 80054c8:	e014      	b.n	80054f4 <_svfiprintf_r+0x110>
 80054ca:	eba0 0308 	sub.w	r3, r0, r8
 80054ce:	fa09 f303 	lsl.w	r3, r9, r3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	46a2      	mov	sl, r4
 80054d6:	9304      	str	r3, [sp, #16]
 80054d8:	e7d2      	b.n	8005480 <_svfiprintf_r+0x9c>
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	9103      	str	r1, [sp, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfbb      	ittet	lt
 80054e6:	425b      	neglt	r3, r3
 80054e8:	f042 0202 	orrlt.w	r2, r2, #2
 80054ec:	9307      	strge	r3, [sp, #28]
 80054ee:	9307      	strlt	r3, [sp, #28]
 80054f0:	bfb8      	it	lt
 80054f2:	9204      	strlt	r2, [sp, #16]
 80054f4:	7823      	ldrb	r3, [r4, #0]
 80054f6:	2b2e      	cmp	r3, #46	; 0x2e
 80054f8:	d10c      	bne.n	8005514 <_svfiprintf_r+0x130>
 80054fa:	7863      	ldrb	r3, [r4, #1]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d135      	bne.n	800556c <_svfiprintf_r+0x188>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	3402      	adds	r4, #2
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	9203      	str	r2, [sp, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfb8      	it	lt
 800550e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80055d4 <_svfiprintf_r+0x1f0>
 8005518:	2203      	movs	r2, #3
 800551a:	4650      	mov	r0, sl
 800551c:	7821      	ldrb	r1, [r4, #0]
 800551e:	f000 f9f9 	bl	8005914 <memchr>
 8005522:	b140      	cbz	r0, 8005536 <_svfiprintf_r+0x152>
 8005524:	2340      	movs	r3, #64	; 0x40
 8005526:	eba0 000a 	sub.w	r0, r0, sl
 800552a:	fa03 f000 	lsl.w	r0, r3, r0
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	3401      	adds	r4, #1
 8005532:	4303      	orrs	r3, r0
 8005534:	9304      	str	r3, [sp, #16]
 8005536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553a:	2206      	movs	r2, #6
 800553c:	4826      	ldr	r0, [pc, #152]	; (80055d8 <_svfiprintf_r+0x1f4>)
 800553e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005542:	f000 f9e7 	bl	8005914 <memchr>
 8005546:	2800      	cmp	r0, #0
 8005548:	d038      	beq.n	80055bc <_svfiprintf_r+0x1d8>
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <_svfiprintf_r+0x1f8>)
 800554c:	bb1b      	cbnz	r3, 8005596 <_svfiprintf_r+0x1b2>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	3307      	adds	r3, #7
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	3308      	adds	r3, #8
 8005558:	9303      	str	r3, [sp, #12]
 800555a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555c:	4433      	add	r3, r6
 800555e:	9309      	str	r3, [sp, #36]	; 0x24
 8005560:	e767      	b.n	8005432 <_svfiprintf_r+0x4e>
 8005562:	460c      	mov	r4, r1
 8005564:	2001      	movs	r0, #1
 8005566:	fb0c 3202 	mla	r2, ip, r2, r3
 800556a:	e7a5      	b.n	80054b8 <_svfiprintf_r+0xd4>
 800556c:	2300      	movs	r3, #0
 800556e:	f04f 0c0a 	mov.w	ip, #10
 8005572:	4619      	mov	r1, r3
 8005574:	3401      	adds	r4, #1
 8005576:	9305      	str	r3, [sp, #20]
 8005578:	4620      	mov	r0, r4
 800557a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800557e:	3a30      	subs	r2, #48	; 0x30
 8005580:	2a09      	cmp	r2, #9
 8005582:	d903      	bls.n	800558c <_svfiprintf_r+0x1a8>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0c5      	beq.n	8005514 <_svfiprintf_r+0x130>
 8005588:	9105      	str	r1, [sp, #20]
 800558a:	e7c3      	b.n	8005514 <_svfiprintf_r+0x130>
 800558c:	4604      	mov	r4, r0
 800558e:	2301      	movs	r3, #1
 8005590:	fb0c 2101 	mla	r1, ip, r1, r2
 8005594:	e7f0      	b.n	8005578 <_svfiprintf_r+0x194>
 8005596:	ab03      	add	r3, sp, #12
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	462a      	mov	r2, r5
 800559c:	4638      	mov	r0, r7
 800559e:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <_svfiprintf_r+0x1fc>)
 80055a0:	a904      	add	r1, sp, #16
 80055a2:	f3af 8000 	nop.w
 80055a6:	1c42      	adds	r2, r0, #1
 80055a8:	4606      	mov	r6, r0
 80055aa:	d1d6      	bne.n	800555a <_svfiprintf_r+0x176>
 80055ac:	89ab      	ldrh	r3, [r5, #12]
 80055ae:	065b      	lsls	r3, r3, #25
 80055b0:	f53f af2c 	bmi.w	800540c <_svfiprintf_r+0x28>
 80055b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055b6:	b01d      	add	sp, #116	; 0x74
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4638      	mov	r0, r7
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <_svfiprintf_r+0x1fc>)
 80055c6:	a904      	add	r1, sp, #16
 80055c8:	f000 f87c 	bl	80056c4 <_printf_i>
 80055cc:	e7eb      	b.n	80055a6 <_svfiprintf_r+0x1c2>
 80055ce:	bf00      	nop
 80055d0:	08005af2 	.word	0x08005af2
 80055d4:	08005af8 	.word	0x08005af8
 80055d8:	08005afc 	.word	0x08005afc
 80055dc:	00000000 	.word	0x00000000
 80055e0:	0800532d 	.word	0x0800532d

080055e4 <_printf_common>:
 80055e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	4616      	mov	r6, r2
 80055ea:	4699      	mov	r9, r3
 80055ec:	688a      	ldr	r2, [r1, #8]
 80055ee:	690b      	ldr	r3, [r1, #16]
 80055f0:	4607      	mov	r7, r0
 80055f2:	4293      	cmp	r3, r2
 80055f4:	bfb8      	it	lt
 80055f6:	4613      	movlt	r3, r2
 80055f8:	6033      	str	r3, [r6, #0]
 80055fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055fe:	460c      	mov	r4, r1
 8005600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005604:	b10a      	cbz	r2, 800560a <_printf_common+0x26>
 8005606:	3301      	adds	r3, #1
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	0699      	lsls	r1, r3, #26
 800560e:	bf42      	ittt	mi
 8005610:	6833      	ldrmi	r3, [r6, #0]
 8005612:	3302      	addmi	r3, #2
 8005614:	6033      	strmi	r3, [r6, #0]
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	f015 0506 	ands.w	r5, r5, #6
 800561c:	d106      	bne.n	800562c <_printf_common+0x48>
 800561e:	f104 0a19 	add.w	sl, r4, #25
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	6832      	ldr	r2, [r6, #0]
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	42ab      	cmp	r3, r5
 800562a:	dc28      	bgt.n	800567e <_printf_common+0x9a>
 800562c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005630:	1e13      	subs	r3, r2, #0
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	bf18      	it	ne
 8005636:	2301      	movne	r3, #1
 8005638:	0692      	lsls	r2, r2, #26
 800563a:	d42d      	bmi.n	8005698 <_printf_common+0xb4>
 800563c:	4649      	mov	r1, r9
 800563e:	4638      	mov	r0, r7
 8005640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005644:	47c0      	blx	r8
 8005646:	3001      	adds	r0, #1
 8005648:	d020      	beq.n	800568c <_printf_common+0xa8>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	68e5      	ldr	r5, [r4, #12]
 800564e:	f003 0306 	and.w	r3, r3, #6
 8005652:	2b04      	cmp	r3, #4
 8005654:	bf18      	it	ne
 8005656:	2500      	movne	r5, #0
 8005658:	6832      	ldr	r2, [r6, #0]
 800565a:	f04f 0600 	mov.w	r6, #0
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	bf08      	it	eq
 8005662:	1aad      	subeq	r5, r5, r2
 8005664:	6922      	ldr	r2, [r4, #16]
 8005666:	bf08      	it	eq
 8005668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800566c:	4293      	cmp	r3, r2
 800566e:	bfc4      	itt	gt
 8005670:	1a9b      	subgt	r3, r3, r2
 8005672:	18ed      	addgt	r5, r5, r3
 8005674:	341a      	adds	r4, #26
 8005676:	42b5      	cmp	r5, r6
 8005678:	d11a      	bne.n	80056b0 <_printf_common+0xcc>
 800567a:	2000      	movs	r0, #0
 800567c:	e008      	b.n	8005690 <_printf_common+0xac>
 800567e:	2301      	movs	r3, #1
 8005680:	4652      	mov	r2, sl
 8005682:	4649      	mov	r1, r9
 8005684:	4638      	mov	r0, r7
 8005686:	47c0      	blx	r8
 8005688:	3001      	adds	r0, #1
 800568a:	d103      	bne.n	8005694 <_printf_common+0xb0>
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005694:	3501      	adds	r5, #1
 8005696:	e7c4      	b.n	8005622 <_printf_common+0x3e>
 8005698:	2030      	movs	r0, #48	; 0x30
 800569a:	18e1      	adds	r1, r4, r3
 800569c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a6:	4422      	add	r2, r4
 80056a8:	3302      	adds	r3, #2
 80056aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ae:	e7c5      	b.n	800563c <_printf_common+0x58>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4622      	mov	r2, r4
 80056b4:	4649      	mov	r1, r9
 80056b6:	4638      	mov	r0, r7
 80056b8:	47c0      	blx	r8
 80056ba:	3001      	adds	r0, #1
 80056bc:	d0e6      	beq.n	800568c <_printf_common+0xa8>
 80056be:	3601      	adds	r6, #1
 80056c0:	e7d9      	b.n	8005676 <_printf_common+0x92>
	...

080056c4 <_printf_i>:
 80056c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	7e0f      	ldrb	r7, [r1, #24]
 80056ca:	4691      	mov	r9, r2
 80056cc:	2f78      	cmp	r7, #120	; 0x78
 80056ce:	4680      	mov	r8, r0
 80056d0:	460c      	mov	r4, r1
 80056d2:	469a      	mov	sl, r3
 80056d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056da:	d807      	bhi.n	80056ec <_printf_i+0x28>
 80056dc:	2f62      	cmp	r7, #98	; 0x62
 80056de:	d80a      	bhi.n	80056f6 <_printf_i+0x32>
 80056e0:	2f00      	cmp	r7, #0
 80056e2:	f000 80d9 	beq.w	8005898 <_printf_i+0x1d4>
 80056e6:	2f58      	cmp	r7, #88	; 0x58
 80056e8:	f000 80a4 	beq.w	8005834 <_printf_i+0x170>
 80056ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056f4:	e03a      	b.n	800576c <_printf_i+0xa8>
 80056f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056fa:	2b15      	cmp	r3, #21
 80056fc:	d8f6      	bhi.n	80056ec <_printf_i+0x28>
 80056fe:	a101      	add	r1, pc, #4	; (adr r1, 8005704 <_printf_i+0x40>)
 8005700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005704:	0800575d 	.word	0x0800575d
 8005708:	08005771 	.word	0x08005771
 800570c:	080056ed 	.word	0x080056ed
 8005710:	080056ed 	.word	0x080056ed
 8005714:	080056ed 	.word	0x080056ed
 8005718:	080056ed 	.word	0x080056ed
 800571c:	08005771 	.word	0x08005771
 8005720:	080056ed 	.word	0x080056ed
 8005724:	080056ed 	.word	0x080056ed
 8005728:	080056ed 	.word	0x080056ed
 800572c:	080056ed 	.word	0x080056ed
 8005730:	0800587f 	.word	0x0800587f
 8005734:	080057a1 	.word	0x080057a1
 8005738:	08005861 	.word	0x08005861
 800573c:	080056ed 	.word	0x080056ed
 8005740:	080056ed 	.word	0x080056ed
 8005744:	080058a1 	.word	0x080058a1
 8005748:	080056ed 	.word	0x080056ed
 800574c:	080057a1 	.word	0x080057a1
 8005750:	080056ed 	.word	0x080056ed
 8005754:	080056ed 	.word	0x080056ed
 8005758:	08005869 	.word	0x08005869
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	1d1a      	adds	r2, r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800576c:	2301      	movs	r3, #1
 800576e:	e0a4      	b.n	80058ba <_printf_i+0x1f6>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	6829      	ldr	r1, [r5, #0]
 8005774:	0606      	lsls	r6, r0, #24
 8005776:	f101 0304 	add.w	r3, r1, #4
 800577a:	d50a      	bpl.n	8005792 <_printf_i+0xce>
 800577c:	680e      	ldr	r6, [r1, #0]
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	2e00      	cmp	r6, #0
 8005782:	da03      	bge.n	800578c <_printf_i+0xc8>
 8005784:	232d      	movs	r3, #45	; 0x2d
 8005786:	4276      	negs	r6, r6
 8005788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800578c:	230a      	movs	r3, #10
 800578e:	485e      	ldr	r0, [pc, #376]	; (8005908 <_printf_i+0x244>)
 8005790:	e019      	b.n	80057c6 <_printf_i+0x102>
 8005792:	680e      	ldr	r6, [r1, #0]
 8005794:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	bf18      	it	ne
 800579c:	b236      	sxthne	r6, r6
 800579e:	e7ef      	b.n	8005780 <_printf_i+0xbc>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	6820      	ldr	r0, [r4, #0]
 80057a4:	1d19      	adds	r1, r3, #4
 80057a6:	6029      	str	r1, [r5, #0]
 80057a8:	0601      	lsls	r1, r0, #24
 80057aa:	d501      	bpl.n	80057b0 <_printf_i+0xec>
 80057ac:	681e      	ldr	r6, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <_printf_i+0xf2>
 80057b0:	0646      	lsls	r6, r0, #25
 80057b2:	d5fb      	bpl.n	80057ac <_printf_i+0xe8>
 80057b4:	881e      	ldrh	r6, [r3, #0]
 80057b6:	2f6f      	cmp	r7, #111	; 0x6f
 80057b8:	bf0c      	ite	eq
 80057ba:	2308      	moveq	r3, #8
 80057bc:	230a      	movne	r3, #10
 80057be:	4852      	ldr	r0, [pc, #328]	; (8005908 <_printf_i+0x244>)
 80057c0:	2100      	movs	r1, #0
 80057c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057c6:	6865      	ldr	r5, [r4, #4]
 80057c8:	2d00      	cmp	r5, #0
 80057ca:	bfa8      	it	ge
 80057cc:	6821      	ldrge	r1, [r4, #0]
 80057ce:	60a5      	str	r5, [r4, #8]
 80057d0:	bfa4      	itt	ge
 80057d2:	f021 0104 	bicge.w	r1, r1, #4
 80057d6:	6021      	strge	r1, [r4, #0]
 80057d8:	b90e      	cbnz	r6, 80057de <_printf_i+0x11a>
 80057da:	2d00      	cmp	r5, #0
 80057dc:	d04d      	beq.n	800587a <_printf_i+0x1b6>
 80057de:	4615      	mov	r5, r2
 80057e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80057e4:	fb03 6711 	mls	r7, r3, r1, r6
 80057e8:	5dc7      	ldrb	r7, [r0, r7]
 80057ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057ee:	4637      	mov	r7, r6
 80057f0:	42bb      	cmp	r3, r7
 80057f2:	460e      	mov	r6, r1
 80057f4:	d9f4      	bls.n	80057e0 <_printf_i+0x11c>
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d10b      	bne.n	8005812 <_printf_i+0x14e>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	07de      	lsls	r6, r3, #31
 80057fe:	d508      	bpl.n	8005812 <_printf_i+0x14e>
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	6861      	ldr	r1, [r4, #4]
 8005804:	4299      	cmp	r1, r3
 8005806:	bfde      	ittt	le
 8005808:	2330      	movle	r3, #48	; 0x30
 800580a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800580e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005812:	1b52      	subs	r2, r2, r5
 8005814:	6122      	str	r2, [r4, #16]
 8005816:	464b      	mov	r3, r9
 8005818:	4621      	mov	r1, r4
 800581a:	4640      	mov	r0, r8
 800581c:	f8cd a000 	str.w	sl, [sp]
 8005820:	aa03      	add	r2, sp, #12
 8005822:	f7ff fedf 	bl	80055e4 <_printf_common>
 8005826:	3001      	adds	r0, #1
 8005828:	d14c      	bne.n	80058c4 <_printf_i+0x200>
 800582a:	f04f 30ff 	mov.w	r0, #4294967295
 800582e:	b004      	add	sp, #16
 8005830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005834:	4834      	ldr	r0, [pc, #208]	; (8005908 <_printf_i+0x244>)
 8005836:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800583a:	6829      	ldr	r1, [r5, #0]
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005842:	6029      	str	r1, [r5, #0]
 8005844:	061d      	lsls	r5, r3, #24
 8005846:	d514      	bpl.n	8005872 <_printf_i+0x1ae>
 8005848:	07df      	lsls	r7, r3, #31
 800584a:	bf44      	itt	mi
 800584c:	f043 0320 	orrmi.w	r3, r3, #32
 8005850:	6023      	strmi	r3, [r4, #0]
 8005852:	b91e      	cbnz	r6, 800585c <_printf_i+0x198>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	f023 0320 	bic.w	r3, r3, #32
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	2310      	movs	r3, #16
 800585e:	e7af      	b.n	80057c0 <_printf_i+0xfc>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	f043 0320 	orr.w	r3, r3, #32
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	2378      	movs	r3, #120	; 0x78
 800586a:	4828      	ldr	r0, [pc, #160]	; (800590c <_printf_i+0x248>)
 800586c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005870:	e7e3      	b.n	800583a <_printf_i+0x176>
 8005872:	0659      	lsls	r1, r3, #25
 8005874:	bf48      	it	mi
 8005876:	b2b6      	uxthmi	r6, r6
 8005878:	e7e6      	b.n	8005848 <_printf_i+0x184>
 800587a:	4615      	mov	r5, r2
 800587c:	e7bb      	b.n	80057f6 <_printf_i+0x132>
 800587e:	682b      	ldr	r3, [r5, #0]
 8005880:	6826      	ldr	r6, [r4, #0]
 8005882:	1d18      	adds	r0, r3, #4
 8005884:	6961      	ldr	r1, [r4, #20]
 8005886:	6028      	str	r0, [r5, #0]
 8005888:	0635      	lsls	r5, r6, #24
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	d501      	bpl.n	8005892 <_printf_i+0x1ce>
 800588e:	6019      	str	r1, [r3, #0]
 8005890:	e002      	b.n	8005898 <_printf_i+0x1d4>
 8005892:	0670      	lsls	r0, r6, #25
 8005894:	d5fb      	bpl.n	800588e <_printf_i+0x1ca>
 8005896:	8019      	strh	r1, [r3, #0]
 8005898:	2300      	movs	r3, #0
 800589a:	4615      	mov	r5, r2
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	e7ba      	b.n	8005816 <_printf_i+0x152>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	2100      	movs	r1, #0
 80058a4:	1d1a      	adds	r2, r3, #4
 80058a6:	602a      	str	r2, [r5, #0]
 80058a8:	681d      	ldr	r5, [r3, #0]
 80058aa:	6862      	ldr	r2, [r4, #4]
 80058ac:	4628      	mov	r0, r5
 80058ae:	f000 f831 	bl	8005914 <memchr>
 80058b2:	b108      	cbz	r0, 80058b8 <_printf_i+0x1f4>
 80058b4:	1b40      	subs	r0, r0, r5
 80058b6:	6060      	str	r0, [r4, #4]
 80058b8:	6863      	ldr	r3, [r4, #4]
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	2300      	movs	r3, #0
 80058be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c2:	e7a8      	b.n	8005816 <_printf_i+0x152>
 80058c4:	462a      	mov	r2, r5
 80058c6:	4649      	mov	r1, r9
 80058c8:	4640      	mov	r0, r8
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	47d0      	blx	sl
 80058ce:	3001      	adds	r0, #1
 80058d0:	d0ab      	beq.n	800582a <_printf_i+0x166>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	079b      	lsls	r3, r3, #30
 80058d6:	d413      	bmi.n	8005900 <_printf_i+0x23c>
 80058d8:	68e0      	ldr	r0, [r4, #12]
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	4298      	cmp	r0, r3
 80058de:	bfb8      	it	lt
 80058e0:	4618      	movlt	r0, r3
 80058e2:	e7a4      	b.n	800582e <_printf_i+0x16a>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4632      	mov	r2, r6
 80058e8:	4649      	mov	r1, r9
 80058ea:	4640      	mov	r0, r8
 80058ec:	47d0      	blx	sl
 80058ee:	3001      	adds	r0, #1
 80058f0:	d09b      	beq.n	800582a <_printf_i+0x166>
 80058f2:	3501      	adds	r5, #1
 80058f4:	68e3      	ldr	r3, [r4, #12]
 80058f6:	9903      	ldr	r1, [sp, #12]
 80058f8:	1a5b      	subs	r3, r3, r1
 80058fa:	42ab      	cmp	r3, r5
 80058fc:	dcf2      	bgt.n	80058e4 <_printf_i+0x220>
 80058fe:	e7eb      	b.n	80058d8 <_printf_i+0x214>
 8005900:	2500      	movs	r5, #0
 8005902:	f104 0619 	add.w	r6, r4, #25
 8005906:	e7f5      	b.n	80058f4 <_printf_i+0x230>
 8005908:	08005b03 	.word	0x08005b03
 800590c:	08005b14 	.word	0x08005b14

08005910 <__retarget_lock_acquire_recursive>:
 8005910:	4770      	bx	lr

08005912 <__retarget_lock_release_recursive>:
 8005912:	4770      	bx	lr

08005914 <memchr>:
 8005914:	4603      	mov	r3, r0
 8005916:	b510      	push	{r4, lr}
 8005918:	b2c9      	uxtb	r1, r1
 800591a:	4402      	add	r2, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	4618      	mov	r0, r3
 8005920:	d101      	bne.n	8005926 <memchr+0x12>
 8005922:	2000      	movs	r0, #0
 8005924:	e003      	b.n	800592e <memchr+0x1a>
 8005926:	7804      	ldrb	r4, [r0, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	428c      	cmp	r4, r1
 800592c:	d1f6      	bne.n	800591c <memchr+0x8>
 800592e:	bd10      	pop	{r4, pc}

08005930 <memmove>:
 8005930:	4288      	cmp	r0, r1
 8005932:	b510      	push	{r4, lr}
 8005934:	eb01 0402 	add.w	r4, r1, r2
 8005938:	d902      	bls.n	8005940 <memmove+0x10>
 800593a:	4284      	cmp	r4, r0
 800593c:	4623      	mov	r3, r4
 800593e:	d807      	bhi.n	8005950 <memmove+0x20>
 8005940:	1e43      	subs	r3, r0, #1
 8005942:	42a1      	cmp	r1, r4
 8005944:	d008      	beq.n	8005958 <memmove+0x28>
 8005946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800594a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800594e:	e7f8      	b.n	8005942 <memmove+0x12>
 8005950:	4601      	mov	r1, r0
 8005952:	4402      	add	r2, r0
 8005954:	428a      	cmp	r2, r1
 8005956:	d100      	bne.n	800595a <memmove+0x2a>
 8005958:	bd10      	pop	{r4, pc}
 800595a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800595e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005962:	e7f7      	b.n	8005954 <memmove+0x24>

08005964 <_realloc_r>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	4680      	mov	r8, r0
 800596a:	4614      	mov	r4, r2
 800596c:	460e      	mov	r6, r1
 800596e:	b921      	cbnz	r1, 800597a <_realloc_r+0x16>
 8005970:	4611      	mov	r1, r2
 8005972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005976:	f7ff bc29 	b.w	80051cc <_malloc_r>
 800597a:	b92a      	cbnz	r2, 8005988 <_realloc_r+0x24>
 800597c:	f7ff fbbe 	bl	80050fc <_free_r>
 8005980:	4625      	mov	r5, r4
 8005982:	4628      	mov	r0, r5
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005988:	f000 f81b 	bl	80059c2 <_malloc_usable_size_r>
 800598c:	4284      	cmp	r4, r0
 800598e:	4607      	mov	r7, r0
 8005990:	d802      	bhi.n	8005998 <_realloc_r+0x34>
 8005992:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005996:	d812      	bhi.n	80059be <_realloc_r+0x5a>
 8005998:	4621      	mov	r1, r4
 800599a:	4640      	mov	r0, r8
 800599c:	f7ff fc16 	bl	80051cc <_malloc_r>
 80059a0:	4605      	mov	r5, r0
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d0ed      	beq.n	8005982 <_realloc_r+0x1e>
 80059a6:	42bc      	cmp	r4, r7
 80059a8:	4622      	mov	r2, r4
 80059aa:	4631      	mov	r1, r6
 80059ac:	bf28      	it	cs
 80059ae:	463a      	movcs	r2, r7
 80059b0:	f7ff fb8e 	bl	80050d0 <memcpy>
 80059b4:	4631      	mov	r1, r6
 80059b6:	4640      	mov	r0, r8
 80059b8:	f7ff fba0 	bl	80050fc <_free_r>
 80059bc:	e7e1      	b.n	8005982 <_realloc_r+0x1e>
 80059be:	4635      	mov	r5, r6
 80059c0:	e7df      	b.n	8005982 <_realloc_r+0x1e>

080059c2 <_malloc_usable_size_r>:
 80059c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c6:	1f18      	subs	r0, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bfbc      	itt	lt
 80059cc:	580b      	ldrlt	r3, [r1, r0]
 80059ce:	18c0      	addlt	r0, r0, r3
 80059d0:	4770      	bx	lr
	...

080059d4 <_init>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr

080059e0 <_fini>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr
